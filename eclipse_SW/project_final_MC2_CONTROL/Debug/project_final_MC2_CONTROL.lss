
project_final_MC2_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000024b0  00002544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800082  00800082  00002566  2**0
                  ALLOC
  3 .stab         000026a0  00000000  00000000  00002568  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001153  00000000  00000000  00004c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000600b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000098ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a4a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a6 09 	call	0x134c	; 0x134c <main>
      8a:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 47 12 	jmp	0x248e	; 0x248e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 47 12 	jmp	0x248e	; 0x248e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 47 12 	jmp	0x248e	; 0x248e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 47 12 	jmp	0x248e	; 0x248e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 47 12 	jmp	0x248e	; 0x248e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_receivePass>:
uint8 error_check=0;
uint8 g_tick;


void UART_receivePass(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	2f 97       	sbiw	r28, 0x0f	; 15
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for(i=0;i<5;i++)
     b5e:	1f 86       	std	Y+15, r1	; 0x0f
     b60:	7e c0       	rjmp	.+252    	; 0xc5e <UART_receivePass+0x118>
	{
		/*to receive the password from MC1*/
		pass1[i] = UART_recieveByte();
     b62:	8f 85       	ldd	r24, Y+15	; 0x0f
     b64:	08 2f       	mov	r16, r24
     b66:	10 e0       	ldi	r17, 0x00	; 0
     b68:	0e 94 6e 11 	call	0x22dc	; 0x22dc <UART_recieveByte>
     b6c:	f8 01       	movw	r30, r16
     b6e:	ea 56       	subi	r30, 0x6A	; 106
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	80 83       	st	Z, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a8 e4       	ldi	r26, 0x48	; 72
     b7a:	b2 e4       	ldi	r27, 0x42	; 66
     b7c:	8b 87       	std	Y+11, r24	; 0x0b
     b7e:	9c 87       	std	Y+12, r25	; 0x0c
     b80:	ad 87       	std	Y+13, r26	; 0x0d
     b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b84:	6b 85       	ldd	r22, Y+11	; 0x0b
     b86:	7c 85       	ldd	r23, Y+12	; 0x0c
     b88:	8d 85       	ldd	r24, Y+13	; 0x0d
     b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	4a ef       	ldi	r20, 0xFA	; 250
     b92:	54 e4       	ldi	r21, 0x44	; 68
     b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	8f 83       	std	Y+7, r24	; 0x07
     b9e:	98 87       	std	Y+8, r25	; 0x08
     ba0:	a9 87       	std	Y+9, r26	; 0x09
     ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba4:	6f 81       	ldd	r22, Y+7	; 0x07
     ba6:	78 85       	ldd	r23, Y+8	; 0x08
     ba8:	89 85       	ldd	r24, Y+9	; 0x09
     baa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e8       	ldi	r20, 0x80	; 128
     bb2:	5f e3       	ldi	r21, 0x3F	; 63
     bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb8:	88 23       	and	r24, r24
     bba:	2c f4       	brge	.+10     	; 0xbc6 <UART_receivePass+0x80>
		__ticks = 1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	9e 83       	std	Y+6, r25	; 0x06
     bc2:	8d 83       	std	Y+5, r24	; 0x05
     bc4:	3f c0       	rjmp	.+126    	; 0xc44 <UART_receivePass+0xfe>
	else if (__tmp > 65535)
     bc6:	6f 81       	ldd	r22, Y+7	; 0x07
     bc8:	78 85       	ldd	r23, Y+8	; 0x08
     bca:	89 85       	ldd	r24, Y+9	; 0x09
     bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	3f ef       	ldi	r19, 0xFF	; 255
     bd2:	4f e7       	ldi	r20, 0x7F	; 127
     bd4:	57 e4       	ldi	r21, 0x47	; 71
     bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bda:	18 16       	cp	r1, r24
     bdc:	4c f5       	brge	.+82     	; 0xc30 <UART_receivePass+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bde:	6b 85       	ldd	r22, Y+11	; 0x0b
     be0:	7c 85       	ldd	r23, Y+12	; 0x0c
     be2:	8d 85       	ldd	r24, Y+13	; 0x0d
     be4:	9e 85       	ldd	r25, Y+14	; 0x0e
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e2       	ldi	r20, 0x20	; 32
     bec:	51 e4       	ldi	r21, 0x41	; 65
     bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	bc 01       	movw	r22, r24
     bf8:	cd 01       	movw	r24, r26
     bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	9e 83       	std	Y+6, r25	; 0x06
     c04:	8d 83       	std	Y+5, r24	; 0x05
     c06:	0f c0       	rjmp	.+30     	; 0xc26 <UART_receivePass+0xe0>
     c08:	88 ec       	ldi	r24, 0xC8	; 200
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9c 83       	std	Y+4, r25	; 0x04
     c0e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <UART_receivePass+0xce>
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1c:	8d 81       	ldd	r24, Y+5	; 0x05
     c1e:	9e 81       	ldd	r25, Y+6	; 0x06
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	9e 83       	std	Y+6, r25	; 0x06
     c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c26:	8d 81       	ldd	r24, Y+5	; 0x05
     c28:	9e 81       	ldd	r25, Y+6	; 0x06
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	69 f7       	brne	.-38     	; 0xc08 <UART_receivePass+0xc2>
     c2e:	14 c0       	rjmp	.+40     	; 0xc58 <UART_receivePass+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c30:	6f 81       	ldd	r22, Y+7	; 0x07
     c32:	78 85       	ldd	r23, Y+8	; 0x08
     c34:	89 85       	ldd	r24, Y+9	; 0x09
     c36:	9a 85       	ldd	r25, Y+10	; 0x0a
     c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	9e 83       	std	Y+6, r25	; 0x06
     c42:	8d 83       	std	Y+5, r24	; 0x05
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	9a 83       	std	Y+2, r25	; 0x02
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <UART_receivePass+0x10a>
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	89 83       	std	Y+1, r24	; 0x01


void UART_receivePass(void)
{
	uint8 i;
	for(i=0;i<5;i++)
     c58:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	8f 87       	std	Y+15, r24	; 0x0f
     c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c60:	85 30       	cpi	r24, 0x05	; 5
     c62:	08 f4       	brcc	.+2      	; 0xc66 <UART_receivePass+0x120>
     c64:	7e cf       	rjmp	.-260    	; 0xb62 <UART_receivePass+0x1c>
		pass1[i] = UART_recieveByte();
		_delay_ms(50);
	}

	return;
}
     c66:	2f 96       	adiw	r28, 0x0f	; 15
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	08 95       	ret

00000c7c <Store_Password>:


/* To store password in the EEPROM*/
void Store_Password(void)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	61 97       	sbiw	r28, 0x11	; 17
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 byte;
	uint8 dummy;
	for(i=0;i<5;i++)
     c90:	19 8a       	std	Y+17, r1	; 0x11
     c92:	86 c0       	rjmp	.+268    	; 0xda0 <Store_Password+0x124>
	{
		byte=pass1[i];		/* to store the password in EEPROM*/
     c94:	89 89       	ldd	r24, Y+17	; 0x11
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	fc 01       	movw	r30, r24
     c9c:	ea 56       	subi	r30, 0x6A	; 106
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 81       	ld	r24, Z
     ca2:	88 8b       	std	Y+16, r24	; 0x10
		dummy=EEPROM_writeByte(0x0311+i,byte);
     ca4:	89 89       	ldd	r24, Y+17	; 0x11
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	8f 5e       	subi	r24, 0xEF	; 239
     cac:	9c 4f       	sbci	r25, 0xFC	; 252
     cae:	68 89       	ldd	r22, Y+16	; 0x10
     cb0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <EEPROM_writeByte>
     cb4:	8f 87       	std	Y+15, r24	; 0x0f
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a0 e2       	ldi	r26, 0x20	; 32
     cbc:	b1 e4       	ldi	r27, 0x41	; 65
     cbe:	8b 87       	std	Y+11, r24	; 0x0b
     cc0:	9c 87       	std	Y+12, r25	; 0x0c
     cc2:	ad 87       	std	Y+13, r26	; 0x0d
     cc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     cca:	8d 85       	ldd	r24, Y+13	; 0x0d
     ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	4a ef       	ldi	r20, 0xFA	; 250
     cd4:	54 e4       	ldi	r21, 0x44	; 68
     cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	8f 83       	std	Y+7, r24	; 0x07
     ce0:	98 87       	std	Y+8, r25	; 0x08
     ce2:	a9 87       	std	Y+9, r26	; 0x09
     ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce6:	6f 81       	ldd	r22, Y+7	; 0x07
     ce8:	78 85       	ldd	r23, Y+8	; 0x08
     cea:	89 85       	ldd	r24, Y+9	; 0x09
     cec:	9a 85       	ldd	r25, Y+10	; 0x0a
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e8       	ldi	r20, 0x80	; 128
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	2c f4       	brge	.+10     	; 0xd08 <Store_Password+0x8c>
		__ticks = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9e 83       	std	Y+6, r25	; 0x06
     d04:	8d 83       	std	Y+5, r24	; 0x05
     d06:	3f c0       	rjmp	.+126    	; 0xd86 <Store_Password+0x10a>
	else if (__tmp > 65535)
     d08:	6f 81       	ldd	r22, Y+7	; 0x07
     d0a:	78 85       	ldd	r23, Y+8	; 0x08
     d0c:	89 85       	ldd	r24, Y+9	; 0x09
     d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	3f ef       	ldi	r19, 0xFF	; 255
     d14:	4f e7       	ldi	r20, 0x7F	; 127
     d16:	57 e4       	ldi	r21, 0x47	; 71
     d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1c:	18 16       	cp	r1, r24
     d1e:	4c f5       	brge	.+82     	; 0xd72 <Store_Password+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d20:	6b 85       	ldd	r22, Y+11	; 0x0b
     d22:	7c 85       	ldd	r23, Y+12	; 0x0c
     d24:	8d 85       	ldd	r24, Y+13	; 0x0d
     d26:	9e 85       	ldd	r25, Y+14	; 0x0e
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e2       	ldi	r20, 0x20	; 32
     d2e:	51 e4       	ldi	r21, 0x41	; 65
     d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	9e 83       	std	Y+6, r25	; 0x06
     d46:	8d 83       	std	Y+5, r24	; 0x05
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <Store_Password+0xec>
     d4a:	88 ec       	ldi	r24, 0xC8	; 200
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9c 83       	std	Y+4, r25	; 0x04
     d50:	8b 83       	std	Y+3, r24	; 0x03
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	9c 81       	ldd	r25, Y+4	; 0x04
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <Store_Password+0xda>
     d5a:	9c 83       	std	Y+4, r25	; 0x04
     d5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	9e 83       	std	Y+6, r25	; 0x06
     d66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d68:	8d 81       	ldd	r24, Y+5	; 0x05
     d6a:	9e 81       	ldd	r25, Y+6	; 0x06
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	69 f7       	brne	.-38     	; 0xd4a <Store_Password+0xce>
     d70:	14 c0       	rjmp	.+40     	; 0xd9a <Store_Password+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d72:	6f 81       	ldd	r22, Y+7	; 0x07
     d74:	78 85       	ldd	r23, Y+8	; 0x08
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	8d 83       	std	Y+5, r24	; 0x05
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <Store_Password+0x116>
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
void Store_Password(void)
{
	uint8 i;
	uint8 byte;
	uint8 dummy;
	for(i=0;i<5;i++)
     d9a:	89 89       	ldd	r24, Y+17	; 0x11
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	89 8b       	std	Y+17, r24	; 0x11
     da0:	89 89       	ldd	r24, Y+17	; 0x11
     da2:	85 30       	cpi	r24, 0x05	; 5
     da4:	08 f4       	brcc	.+2      	; 0xda8 <Store_Password+0x12c>
     da6:	76 cf       	rjmp	.-276    	; 0xc94 <Store_Password+0x18>
		byte=pass1[i];		/* to store the password in EEPROM*/
		dummy=EEPROM_writeByte(0x0311+i,byte);
		_delay_ms(10);
	}
	return;
}
     da8:	61 96       	adiw	r28, 0x11	; 17
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <Get_Password>:

/*to get password from EEPROM and compare it */
void Get_Password (void)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	61 97       	sbiw	r28, 0x11	; 17
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
	uint8 j;
	uint8 byte;
	uint8 dummy;

	for(j=0;j<5;j++)
     dce:	18 8a       	std	Y+16, r1	; 0x10
     dd0:	89 c0       	rjmp	.+274    	; 0xee4 <Get_Password+0x12a>
		{
		/* read the password from EEPROM*/
		dummy=EEPROM_readByte(0x0311+j,&byte);
     dd2:	88 89       	ldd	r24, Y+16	; 0x10
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	8f 5e       	subi	r24, 0xEF	; 239
     dda:	9c 4f       	sbci	r25, 0xFC	; 252
     ddc:	9e 01       	movw	r18, r28
     dde:	2f 5e       	subi	r18, 0xEF	; 239
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	b9 01       	movw	r22, r18
     de4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <EEPROM_readByte>
     de8:	8f 87       	std	Y+15, r24	; 0x0f
		pass1_check[j]=byte;
     dea:	88 89       	ldd	r24, Y+16	; 0x10
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	29 89       	ldd	r18, Y+17	; 0x11
     df2:	fc 01       	movw	r30, r24
     df4:	eb 57       	subi	r30, 0x7B	; 123
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	20 83       	st	Z, r18
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a0 e2       	ldi	r26, 0x20	; 32
     e00:	b1 e4       	ldi	r27, 0x41	; 65
     e02:	8b 87       	std	Y+11, r24	; 0x0b
     e04:	9c 87       	std	Y+12, r25	; 0x0c
     e06:	ad 87       	std	Y+13, r26	; 0x0d
     e08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	9e 85       	ldd	r25, Y+14	; 0x0e
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4a ef       	ldi	r20, 0xFA	; 250
     e18:	54 e4       	ldi	r21, 0x44	; 68
     e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8f 83       	std	Y+7, r24	; 0x07
     e24:	98 87       	std	Y+8, r25	; 0x08
     e26:	a9 87       	std	Y+9, r26	; 0x09
     e28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e2a:	6f 81       	ldd	r22, Y+7	; 0x07
     e2c:	78 85       	ldd	r23, Y+8	; 0x08
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	9a 85       	ldd	r25, Y+10	; 0x0a
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <Get_Password+0x92>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <Get_Password+0x110>
	else if (__tmp > 65535)
     e4c:	6f 81       	ldd	r22, Y+7	; 0x07
     e4e:	78 85       	ldd	r23, Y+8	; 0x08
     e50:	89 85       	ldd	r24, Y+9	; 0x09
     e52:	9a 85       	ldd	r25, Y+10	; 0x0a
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <Get_Password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	6b 85       	ldd	r22, Y+11	; 0x0b
     e66:	7c 85       	ldd	r23, Y+12	; 0x0c
     e68:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <Get_Password+0xf2>
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <Get_Password+0xe0>
     e9e:	9c 83       	std	Y+4, r25	; 0x04
     ea0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f7       	brne	.-38     	; 0xe8e <Get_Password+0xd4>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <Get_Password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6f 81       	ldd	r22, Y+7	; 0x07
     eb8:	78 85       	ldd	r23, Y+8	; 0x08
     eba:	89 85       	ldd	r24, Y+9	; 0x09
     ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <Get_Password+0x11c>
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 j;
	uint8 byte;
	uint8 dummy;

	for(j=0;j<5;j++)
     ede:	88 89       	ldd	r24, Y+16	; 0x10
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	88 8b       	std	Y+16, r24	; 0x10
     ee4:	88 89       	ldd	r24, Y+16	; 0x10
     ee6:	85 30       	cpi	r24, 0x05	; 5
     ee8:	08 f4       	brcc	.+2      	; 0xeec <Get_Password+0x132>
     eea:	73 cf       	rjmp	.-282    	; 0xdd2 <Get_Password+0x18>
		dummy=EEPROM_readByte(0x0311+j,&byte);
		pass1_check[j]=byte;
		_delay_ms(10);
		}
	return;
}
     eec:	61 96       	adiw	r28, 0x11	; 17
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <Check_Pass_received>:

void Check_Pass_received(void)
{
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	61 97       	sbiw	r28, 0x11	; 17
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 j;
	uint8 m;
	UART_sendByte(MC2_READY);
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	0e 94 57 11 	call	0x22ae	; 0x22ae <UART_sendByte>
	for(i=0;i<5;i++)
     f1c:	19 8a       	std	Y+17, r1	; 0x11
     f1e:	7e c0       	rjmp	.+252    	; 0x101c <Check_Pass_received+0x11e>
	{
		check_pass1[i] = UART_recieveByte();
     f20:	89 89       	ldd	r24, Y+17	; 0x11
     f22:	08 2f       	mov	r16, r24
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	0e 94 6e 11 	call	0x22dc	; 0x22dc <UART_recieveByte>
     f2a:	f8 01       	movw	r30, r16
     f2c:	e5 56       	subi	r30, 0x65	; 101
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	80 83       	st	Z, r24
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a8 e4       	ldi	r26, 0x48	; 72
     f38:	b2 e4       	ldi	r27, 0x42	; 66
     f3a:	8b 87       	std	Y+11, r24	; 0x0b
     f3c:	9c 87       	std	Y+12, r25	; 0x0c
     f3e:	ad 87       	std	Y+13, r26	; 0x0d
     f40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f42:	6b 85       	ldd	r22, Y+11	; 0x0b
     f44:	7c 85       	ldd	r23, Y+12	; 0x0c
     f46:	8d 85       	ldd	r24, Y+13	; 0x0d
     f48:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	4a ef       	ldi	r20, 0xFA	; 250
     f50:	54 e4       	ldi	r21, 0x44	; 68
     f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	8f 83       	std	Y+7, r24	; 0x07
     f5c:	98 87       	std	Y+8, r25	; 0x08
     f5e:	a9 87       	std	Y+9, r26	; 0x09
     f60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f62:	6f 81       	ldd	r22, Y+7	; 0x07
     f64:	78 85       	ldd	r23, Y+8	; 0x08
     f66:	89 85       	ldd	r24, Y+9	; 0x09
     f68:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e8       	ldi	r20, 0x80	; 128
     f70:	5f e3       	ldi	r21, 0x3F	; 63
     f72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f76:	88 23       	and	r24, r24
     f78:	2c f4       	brge	.+10     	; 0xf84 <Check_Pass_received+0x86>
		__ticks = 1;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9e 83       	std	Y+6, r25	; 0x06
     f80:	8d 83       	std	Y+5, r24	; 0x05
     f82:	3f c0       	rjmp	.+126    	; 0x1002 <Check_Pass_received+0x104>
	else if (__tmp > 65535)
     f84:	6f 81       	ldd	r22, Y+7	; 0x07
     f86:	78 85       	ldd	r23, Y+8	; 0x08
     f88:	89 85       	ldd	r24, Y+9	; 0x09
     f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	3f ef       	ldi	r19, 0xFF	; 255
     f90:	4f e7       	ldi	r20, 0x7F	; 127
     f92:	57 e4       	ldi	r21, 0x47	; 71
     f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f98:	18 16       	cp	r1, r24
     f9a:	4c f5       	brge	.+82     	; 0xfee <Check_Pass_received+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e2       	ldi	r20, 0x20	; 32
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9e 83       	std	Y+6, r25	; 0x06
     fc2:	8d 83       	std	Y+5, r24	; 0x05
     fc4:	0f c0       	rjmp	.+30     	; 0xfe4 <Check_Pass_received+0xe6>
     fc6:	88 ec       	ldi	r24, 0xC8	; 200
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	8b 83       	std	Y+3, r24	; 0x03
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <Check_Pass_received+0xd4>
     fd6:	9c 83       	std	Y+4, r25	; 0x04
     fd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	69 f7       	brne	.-38     	; 0xfc6 <Check_Pass_received+0xc8>
     fec:	14 c0       	rjmp	.+40     	; 0x1016 <Check_Pass_received+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fee:	6f 81       	ldd	r22, Y+7	; 0x07
     ff0:	78 85       	ldd	r23, Y+8	; 0x08
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	9e 83       	std	Y+6, r25	; 0x06
    1000:	8d 83       	std	Y+5, r24	; 0x05
    1002:	8d 81       	ldd	r24, Y+5	; 0x05
    1004:	9e 81       	ldd	r25, Y+6	; 0x06
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <Check_Pass_received+0x110>
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 i;
	uint8 j;
	uint8 m;
	UART_sendByte(MC2_READY);
	for(i=0;i<5;i++)
    1016:	89 89       	ldd	r24, Y+17	; 0x11
    1018:	8f 5f       	subi	r24, 0xFF	; 255
    101a:	89 8b       	std	Y+17, r24	; 0x11
    101c:	89 89       	ldd	r24, Y+17	; 0x11
    101e:	85 30       	cpi	r24, 0x05	; 5
    1020:	08 f4       	brcc	.+2      	; 0x1024 <Check_Pass_received+0x126>
    1022:	7e cf       	rjmp	.-260    	; 0xf20 <Check_Pass_received+0x22>
	{
		check_pass1[i] = UART_recieveByte();
		_delay_ms(50);
			}
	Get_Password();
    1024:	0e 94 dd 06 	call	0xdba	; 0xdba <Get_Password>
	for(j=0;j<5;j++)
    1028:	18 8a       	std	Y+16, r1	; 0x10
    102a:	1a c0       	rjmp	.+52     	; 0x1060 <Check_Pass_received+0x162>
	{
		if(check_pass1[j]==pass1_check[j])
    102c:	88 89       	ldd	r24, Y+16	; 0x10
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	fc 01       	movw	r30, r24
    1034:	e5 56       	subi	r30, 0x65	; 101
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	20 81       	ld	r18, Z
    103a:	88 89       	ldd	r24, Y+16	; 0x10
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	fc 01       	movw	r30, r24
    1042:	eb 57       	subi	r30, 0x7B	; 123
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	28 17       	cp	r18, r24
    104a:	39 f4       	brne	.+14     	; 0x105a <Check_Pass_received+0x15c>
			error_check=MATCHED;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 82 00 	sts	0x0082, r24
	{
		check_pass1[i] = UART_recieveByte();
		_delay_ms(50);
			}
	Get_Password();
	for(j=0;j<5;j++)
    1052:	88 89       	ldd	r24, Y+16	; 0x10
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	88 8b       	std	Y+16, r24	; 0x10
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <Check_Pass_received+0x162>
	{
		if(check_pass1[j]==pass1_check[j])
			error_check=MATCHED;
		else
		{
			error_check=UNMATCHED;
    105a:	10 92 82 00 	sts	0x0082, r1
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <Check_Pass_received+0x168>
	{
		check_pass1[i] = UART_recieveByte();
		_delay_ms(50);
			}
	Get_Password();
	for(j=0;j<5;j++)
    1060:	88 89       	ldd	r24, Y+16	; 0x10
    1062:	85 30       	cpi	r24, 0x05	; 5
    1064:	18 f3       	brcs	.-58     	; 0x102c <Check_Pass_received+0x12e>
			break;
		}

	}

	for(m=0;m<5;m++)
    1066:	1f 86       	std	Y+15, r1	; 0x0f
    1068:	11 c0       	rjmp	.+34     	; 0x108c <Check_Pass_received+0x18e>
		{
	check_pass1[m]=0;
    106a:	8f 85       	ldd	r24, Y+15	; 0x0f
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	fc 01       	movw	r30, r24
    1072:	e5 56       	subi	r30, 0x65	; 101
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	10 82       	st	Z, r1
	pass1_check[m]=0;
    1078:	8f 85       	ldd	r24, Y+15	; 0x0f
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	fc 01       	movw	r30, r24
    1080:	eb 57       	subi	r30, 0x7B	; 123
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	10 82       	st	Z, r1
			break;
		}

	}

	for(m=0;m<5;m++)
    1086:	8f 85       	ldd	r24, Y+15	; 0x0f
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	8f 87       	std	Y+15, r24	; 0x0f
    108c:	8f 85       	ldd	r24, Y+15	; 0x0f
    108e:	85 30       	cpi	r24, 0x05	; 5
    1090:	60 f3       	brcs	.-40     	; 0x106a <Check_Pass_received+0x16c>
		{
	check_pass1[m]=0;
	pass1_check[m]=0;
		}
}
    1092:	61 96       	adiw	r28, 0x11	; 17
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <change_password>:

void change_password(void)
{
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	2f 97       	sbiw	r28, 0x0f	; 15
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	UART_sendByte(MC2_READY);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 57 11 	call	0x22ae	; 0x22ae <UART_sendByte>
	for(i=0;i<5;i++)
    10c6:	1f 86       	std	Y+15, r1	; 0x0f
    10c8:	7e c0       	rjmp	.+252    	; 0x11c6 <change_password+0x11e>
	{
		pass1[i] = UART_recieveByte();
    10ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    10cc:	08 2f       	mov	r16, r24
    10ce:	10 e0       	ldi	r17, 0x00	; 0
    10d0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <UART_recieveByte>
    10d4:	f8 01       	movw	r30, r16
    10d6:	ea 56       	subi	r30, 0x6A	; 106
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	80 83       	st	Z, r24
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a8 e4       	ldi	r26, 0x48	; 72
    10e2:	b2 e4       	ldi	r27, 0x42	; 66
    10e4:	8b 87       	std	Y+11, r24	; 0x0b
    10e6:	9c 87       	std	Y+12, r25	; 0x0c
    10e8:	ad 87       	std	Y+13, r26	; 0x0d
    10ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a ef       	ldi	r20, 0xFA	; 250
    10fa:	54 e4       	ldi	r21, 0x44	; 68
    10fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	8f 83       	std	Y+7, r24	; 0x07
    1106:	98 87       	std	Y+8, r25	; 0x08
    1108:	a9 87       	std	Y+9, r26	; 0x09
    110a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110c:	6f 81       	ldd	r22, Y+7	; 0x07
    110e:	78 85       	ldd	r23, Y+8	; 0x08
    1110:	89 85       	ldd	r24, Y+9	; 0x09
    1112:	9a 85       	ldd	r25, Y+10	; 0x0a
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	5f e3       	ldi	r21, 0x3F	; 63
    111c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1120:	88 23       	and	r24, r24
    1122:	2c f4       	brge	.+10     	; 0x112e <change_password+0x86>
		__ticks = 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	3f c0       	rjmp	.+126    	; 0x11ac <change_password+0x104>
	else if (__tmp > 65535)
    112e:	6f 81       	ldd	r22, Y+7	; 0x07
    1130:	78 85       	ldd	r23, Y+8	; 0x08
    1132:	89 85       	ldd	r24, Y+9	; 0x09
    1134:	9a 85       	ldd	r25, Y+10	; 0x0a
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	57 e4       	ldi	r21, 0x47	; 71
    113e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1142:	18 16       	cp	r1, r24
    1144:	4c f5       	brge	.+82     	; 0x1198 <change_password+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	51 e4       	ldi	r21, 0x41	; 65
    1156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9e 83       	std	Y+6, r25	; 0x06
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	0f c0       	rjmp	.+30     	; 0x118e <change_password+0xe6>
    1170:	88 ec       	ldi	r24, 0xC8	; 200
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9c 83       	std	Y+4, r25	; 0x04
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <change_password+0xd4>
    1180:	9c 83       	std	Y+4, r25	; 0x04
    1182:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	69 f7       	brne	.-38     	; 0x1170 <change_password+0xc8>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <change_password+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	6f 81       	ldd	r22, Y+7	; 0x07
    119a:	78 85       	ldd	r23, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	9a 83       	std	Y+2, r25	; 0x02
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <change_password+0x110>
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01

void change_password(void)
{
	uint8 i;
	UART_sendByte(MC2_READY);
	for(i=0;i<5;i++)
    11c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	8f 87       	std	Y+15, r24	; 0x0f
    11c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c8:	85 30       	cpi	r24, 0x05	; 5
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <change_password+0x126>
    11cc:	7e cf       	rjmp	.-260    	; 0x10ca <change_password+0x22>
	{
		pass1[i] = UART_recieveByte();
		_delay_ms(50);
	}
	Store_Password();
    11ce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <Store_Password>

}
    11d2:	2f 96       	adiw	r28, 0x0f	; 15
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	08 95       	ret

000011e8 <Timer1_processing>:

void Timer1_processing(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    11f0:	80 91 90 00 	lds	r24, 0x0090
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	80 93 90 00 	sts	0x0090, r24
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <Door_Unlocking>:

void Door_Unlocking(void)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	2b 97       	sbiw	r28, 0x0b	; 11
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType config_type={0,62500,PRESCALAR_8,operation_CTC};
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	98 87       	std	Y+8, r25	; 0x08
    121a:	8f 83       	std	Y+7, r24	; 0x07
    121c:	e8 e6       	ldi	r30, 0x68	; 104
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	fa 87       	std	Y+10, r31	; 0x0a
    1222:	e9 87       	std	Y+9, r30	; 0x09
    1224:	f6 e0       	ldi	r31, 0x06	; 6
    1226:	fb 87       	std	Y+11, r31	; 0x0b
    1228:	e9 85       	ldd	r30, Y+9	; 0x09
    122a:	fa 85       	ldd	r31, Y+10	; 0x0a
    122c:	00 80       	ld	r0, Z
    122e:	89 85       	ldd	r24, Y+9	; 0x09
    1230:	9a 85       	ldd	r25, Y+10	; 0x0a
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	9a 87       	std	Y+10, r25	; 0x0a
    1236:	89 87       	std	Y+9, r24	; 0x09
    1238:	ef 81       	ldd	r30, Y+7	; 0x07
    123a:	f8 85       	ldd	r31, Y+8	; 0x08
    123c:	00 82       	st	Z, r0
    123e:	8f 81       	ldd	r24, Y+7	; 0x07
    1240:	98 85       	ldd	r25, Y+8	; 0x08
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	98 87       	std	Y+8, r25	; 0x08
    1246:	8f 83       	std	Y+7, r24	; 0x07
    1248:	9b 85       	ldd	r25, Y+11	; 0x0b
    124a:	91 50       	subi	r25, 0x01	; 1
    124c:	9b 87       	std	Y+11, r25	; 0x0b
    124e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1250:	ee 23       	and	r30, r30
    1252:	51 f7       	brne	.-44     	; 0x1228 <Door_Unlocking+0x28>
	Timer1_init(&config_type);
    1254:	ce 01       	movw	r24, r28
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <Timer1_init>
	Timer1_setCallBack(Timer1_processing);
    125c:	84 ef       	ldi	r24, 0xF4	; 244
    125e:	98 e0       	ldi	r25, 0x08	; 8
    1260:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <Timer1_setCallBack>

	g_tick=0;
    1264:	10 92 90 00 	sts	0x0090, r1
	DcMotor_Rotate(STATE_CW,100);
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	64 e6       	ldi	r22, 0x64	; 100
    126c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DcMotor_Rotate>
	while(g_tick<70){}
    1270:	80 91 90 00 	lds	r24, 0x0090
    1274:	86 34       	cpi	r24, 0x46	; 70
    1276:	e0 f3       	brcs	.-8      	; 0x1270 <Door_Unlocking+0x70>

	g_tick=0;
    1278:	10 92 90 00 	sts	0x0090, r1
	DcMotor_Rotate(STATE_STOP,0);
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DcMotor_Rotate>
	while(g_tick<15){}
    1284:	80 91 90 00 	lds	r24, 0x0090
    1288:	8f 30       	cpi	r24, 0x0F	; 15
    128a:	e0 f3       	brcs	.-8      	; 0x1284 <Door_Unlocking+0x84>

	g_tick=0;
    128c:	10 92 90 00 	sts	0x0090, r1
	DcMotor_Rotate(STATE_ACW,100);
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	64 e6       	ldi	r22, 0x64	; 100
    1294:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DcMotor_Rotate>
	while(g_tick<70){}
    1298:	80 91 90 00 	lds	r24, 0x0090
    129c:	86 34       	cpi	r24, 0x46	; 70
    129e:	e0 f3       	brcs	.-8      	; 0x1298 <Door_Unlocking+0x98>

	DcMotor_Rotate(STATE_STOP,0);
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DcMotor_Rotate>

	Timer1_deInit();
    12a8:	0e 94 0c 10 	call	0x2018	; 0x2018 <Timer1_deInit>
}
    12ac:	2b 96       	adiw	r28, 0x0b	; 11
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <Buzzer_operation>:


void Buzzer_operation(void)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	2b 97       	sbiw	r28, 0x0b	; 11
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType config_type={0,62500,PRESCALAR_8,operation_CTC};
    12d2:	ce 01       	movw	r24, r28
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	98 87       	std	Y+8, r25	; 0x08
    12d8:	8f 83       	std	Y+7, r24	; 0x07
    12da:	ee e6       	ldi	r30, 0x6E	; 110
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	fa 87       	std	Y+10, r31	; 0x0a
    12e0:	e9 87       	std	Y+9, r30	; 0x09
    12e2:	f6 e0       	ldi	r31, 0x06	; 6
    12e4:	fb 87       	std	Y+11, r31	; 0x0b
    12e6:	e9 85       	ldd	r30, Y+9	; 0x09
    12e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    12ea:	00 80       	ld	r0, Z
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	9a 87       	std	Y+10, r25	; 0x0a
    12f4:	89 87       	std	Y+9, r24	; 0x09
    12f6:	ef 81       	ldd	r30, Y+7	; 0x07
    12f8:	f8 85       	ldd	r31, Y+8	; 0x08
    12fa:	00 82       	st	Z, r0
    12fc:	8f 81       	ldd	r24, Y+7	; 0x07
    12fe:	98 85       	ldd	r25, Y+8	; 0x08
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	98 87       	std	Y+8, r25	; 0x08
    1304:	8f 83       	std	Y+7, r24	; 0x07
    1306:	9b 85       	ldd	r25, Y+11	; 0x0b
    1308:	91 50       	subi	r25, 0x01	; 1
    130a:	9b 87       	std	Y+11, r25	; 0x0b
    130c:	eb 85       	ldd	r30, Y+11	; 0x0b
    130e:	ee 23       	and	r30, r30
    1310:	51 f7       	brne	.-44     	; 0x12e6 <Buzzer_operation+0x28>
	Timer1_init(&config_type);
    1312:	ce 01       	movw	r24, r28
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <Timer1_init>
	Timer1_setCallBack(Timer1_processing);
    131a:	84 ef       	ldi	r24, 0xF4	; 244
    131c:	98 e0       	ldi	r25, 0x08	; 8
    131e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <Timer1_setCallBack>
	g_tick=0;
    1322:	10 92 90 00 	sts	0x0090, r1

	Buzzer_On();
    1326:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <Buzzer_On>
	while(g_tick<240){}
    132a:	80 91 90 00 	lds	r24, 0x0090
    132e:	80 3f       	cpi	r24, 0xF0	; 240
    1330:	e0 f3       	brcs	.-8      	; 0x132a <Buzzer_operation+0x6c>

	Buzzer_Off();
    1332:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Buzzer_Off>
	Timer1_deInit();
    1336:	0e 94 0c 10 	call	0x2018	; 0x2018 <Timer1_deInit>

}
    133a:	2b 96       	adiw	r28, 0x0b	; 11
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <main>:


int main(void)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	6b 97       	sbiw	r28, 0x1b	; 27
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61

	uint8 check;
	uint8 choice;

/*to define the structure of the UART configurable and enable the UART*/
	UART_ConfigType Config_Type= {BITS_8,disabled_parity,BIT_1,9600};
    1360:	9e 01       	movw	r18, r28
    1362:	2d 5f       	subi	r18, 0xFD	; 253
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	3b 8b       	std	Y+19, r19	; 0x13
    1368:	2a 8b       	std	Y+18, r18	; 0x12
    136a:	8a e7       	ldi	r24, 0x7A	; 122
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9d 8b       	std	Y+21, r25	; 0x15
    1370:	8c 8b       	std	Y+20, r24	; 0x14
    1372:	97 e0       	ldi	r25, 0x07	; 7
    1374:	9e 8b       	std	Y+22, r25	; 0x16
    1376:	ec 89       	ldd	r30, Y+20	; 0x14
    1378:	fd 89       	ldd	r31, Y+21	; 0x15
    137a:	00 80       	ld	r0, Z
    137c:	2c 89       	ldd	r18, Y+20	; 0x14
    137e:	3d 89       	ldd	r19, Y+21	; 0x15
    1380:	2f 5f       	subi	r18, 0xFF	; 255
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	3d 8b       	std	Y+21, r19	; 0x15
    1386:	2c 8b       	std	Y+20, r18	; 0x14
    1388:	ea 89       	ldd	r30, Y+18	; 0x12
    138a:	fb 89       	ldd	r31, Y+19	; 0x13
    138c:	00 82       	st	Z, r0
    138e:	2a 89       	ldd	r18, Y+18	; 0x12
    1390:	3b 89       	ldd	r19, Y+19	; 0x13
    1392:	2f 5f       	subi	r18, 0xFF	; 255
    1394:	3f 4f       	sbci	r19, 0xFF	; 255
    1396:	3b 8b       	std	Y+19, r19	; 0x13
    1398:	2a 8b       	std	Y+18, r18	; 0x12
    139a:	3e 89       	ldd	r19, Y+22	; 0x16
    139c:	31 50       	subi	r19, 0x01	; 1
    139e:	3e 8b       	std	Y+22, r19	; 0x16
    13a0:	8e 89       	ldd	r24, Y+22	; 0x16
    13a2:	88 23       	and	r24, r24
    13a4:	41 f7       	brne	.-48     	; 0x1376 <main+0x2a>
	UART_init(&Config_Type);
    13a6:	ce 01       	movw	r24, r28
    13a8:	03 96       	adiw	r24, 0x03	; 3
    13aa:	0e 94 d6 10 	call	0x21ac	; 0x21ac <UART_init>


/*to define the structure of the UART configurable and enable the UART*/
	TWI_ConfigType Config_TypeI2C= {1,400000};
    13ae:	fe 01       	movw	r30, r28
    13b0:	3a 96       	adiw	r30, 0x0a	; 10
    13b2:	f8 8f       	std	Y+24, r31	; 0x18
    13b4:	ef 8b       	std	Y+23, r30	; 0x17
    13b6:	24 e7       	ldi	r18, 0x74	; 116
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3a 8f       	std	Y+26, r19	; 0x1a
    13bc:	29 8f       	std	Y+25, r18	; 0x19
    13be:	36 e0       	ldi	r19, 0x06	; 6
    13c0:	3b 8f       	std	Y+27, r19	; 0x1b
    13c2:	e9 8d       	ldd	r30, Y+25	; 0x19
    13c4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    13c6:	00 80       	ld	r0, Z
    13c8:	29 8d       	ldd	r18, Y+25	; 0x19
    13ca:	3a 8d       	ldd	r19, Y+26	; 0x1a
    13cc:	2f 5f       	subi	r18, 0xFF	; 255
    13ce:	3f 4f       	sbci	r19, 0xFF	; 255
    13d0:	3a 8f       	std	Y+26, r19	; 0x1a
    13d2:	29 8f       	std	Y+25, r18	; 0x19
    13d4:	ef 89       	ldd	r30, Y+23	; 0x17
    13d6:	f8 8d       	ldd	r31, Y+24	; 0x18
    13d8:	00 82       	st	Z, r0
    13da:	2f 89       	ldd	r18, Y+23	; 0x17
    13dc:	38 8d       	ldd	r19, Y+24	; 0x18
    13de:	2f 5f       	subi	r18, 0xFF	; 255
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	38 8f       	std	Y+24, r19	; 0x18
    13e4:	2f 8b       	std	Y+23, r18	; 0x17
    13e6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    13e8:	31 50       	subi	r19, 0x01	; 1
    13ea:	3b 8f       	std	Y+27, r19	; 0x1b
    13ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ee:	88 23       	and	r24, r24
    13f0:	41 f7       	brne	.-48     	; 0x13c2 <main+0x76>
	TWI_init(&Config_TypeI2C);
    13f2:	ce 01       	movw	r24, r28
    13f4:	0a 96       	adiw	r24, 0x0a	; 10
    13f6:	0e 94 2f 10 	call	0x205e	; 0x205e <TWI_init>

	DcMotor_Init();
    13fa:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <DcMotor_Init>
	buzzer_init();
    13fe:	0e 94 4d 0a 	call	0x149a	; 0x149a <buzzer_init>
	SREG=(1<<7);
    1402:	ef e5       	ldi	r30, 0x5F	; 95
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	80 83       	st	Z, r24

	while (UART_recieveByte()!=MC1_IsReady_Matched){}
    140a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <UART_recieveByte>
    140e:	8f 3f       	cpi	r24, 0xFF	; 255
    1410:	e1 f7       	brne	.-8      	; 0x140a <main+0xbe>
	UART_receivePass();
    1412:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_receivePass>

	Store_Password();
    1416:	0e 94 3e 06 	call	0xc7c	; 0xc7c <Store_Password>


	while(1)
	{
		UART_sendByte(MC2_READY);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	0e 94 57 11 	call	0x22ae	; 0x22ae <UART_sendByte>
		choice = UART_recieveByte();
    1420:	0e 94 6e 11 	call	0x22dc	; 0x22dc <UART_recieveByte>
    1424:	89 83       	std	Y+1, r24	; 0x01
		switch (choice)
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	e8 2f       	mov	r30, r24
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	f9 8b       	std	Y+17, r31	; 0x11
    142e:	e8 8b       	std	Y+16, r30	; 0x10
    1430:	28 89       	ldd	r18, Y+16	; 0x10
    1432:	39 89       	ldd	r19, Y+17	; 0x11
    1434:	23 30       	cpi	r18, 0x03	; 3
    1436:	31 05       	cpc	r19, r1
    1438:	51 f1       	breq	.+84     	; 0x148e <main+0x142>
    143a:	88 89       	ldd	r24, Y+16	; 0x10
    143c:	99 89       	ldd	r25, Y+17	; 0x11
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	91 05       	cpc	r25, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <main+0x104>
    1444:	e8 89       	ldd	r30, Y+16	; 0x10
    1446:	f9 89       	ldd	r31, Y+17	; 0x11
    1448:	e2 30       	cpi	r30, 0x02	; 2
    144a:	f1 05       	cpc	r31, r1
    144c:	e9 f0       	breq	.+58     	; 0x1488 <main+0x13c>
    144e:	e5 cf       	rjmp	.-54     	; 0x141a <main+0xce>
    1450:	28 89       	ldd	r18, Y+16	; 0x10
    1452:	39 89       	ldd	r19, Y+17	; 0x11
    1454:	24 30       	cpi	r18, 0x04	; 4
    1456:	31 05       	cpc	r19, r1
    1458:	e9 f0       	breq	.+58     	; 0x1494 <main+0x148>
    145a:	88 89       	ldd	r24, Y+16	; 0x10
    145c:	99 89       	ldd	r25, Y+17	; 0x11
    145e:	8c 3f       	cpi	r24, 0xFC	; 252
    1460:	91 05       	cpc	r25, r1
    1462:	d9 f6       	brne	.-74     	; 0x141a <main+0xce>
		{
		case MC1_check_password:
		Check_Pass_received();
    1464:	0e 94 7f 07 	call	0xefe	; 0xefe <Check_Pass_received>

		if (error_check==MATCHED)
    1468:	80 91 82 00 	lds	r24, 0x0082
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	21 f4       	brne	.+8      	; 0x1478 <main+0x12c>
		{
			UART_sendByte(CORRECT);
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	0e 94 57 11 	call	0x22ae	; 0x22ae <UART_sendByte>
    1476:	d1 cf       	rjmp	.-94     	; 0x141a <main+0xce>
		}
		else if(error_check==UNMATCHED)
    1478:	80 91 82 00 	lds	r24, 0x0082
    147c:	88 23       	and	r24, r24
    147e:	69 f6       	brne	.-102    	; 0x141a <main+0xce>
		{
			UART_sendByte(IN_CORRECT);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	0e 94 57 11 	call	0x22ae	; 0x22ae <UART_sendByte>
    1486:	c9 cf       	rjmp	.-110    	; 0x141a <main+0xce>
		}
		break;

		case DOOR_OPEN:
			Door_Unlocking();
    1488:	0e 94 00 09 	call	0x1200	; 0x1200 <Door_Unlocking>
    148c:	c6 cf       	rjmp	.-116    	; 0x141a <main+0xce>
			break;

		case MC1_change_password:
			change_password();
    148e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <change_password>
    1492:	c3 cf       	rjmp	.-122    	; 0x141a <main+0xce>
			break;

		case Fire_Buzzer:
			Buzzer_operation();
    1494:	0e 94 5f 09 	call	0x12be	; 0x12be <Buzzer_operation>
    1498:	c0 cf       	rjmp	.-128    	; 0x141a <main+0xce>

0000149a <buzzer_init>:
#include"gpio.h"
#include"buzzer.h"
#include"common_header.h"

void buzzer_init(void)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setUpPinDirection(BUZZER_PORT,BUZZER_PIN ,PIN_OUTPUT);
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	63 e0       	ldi	r22, 0x03	; 3
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_setUpPinDirection>
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <Buzzer_On>:

void Buzzer_On(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	63 e0       	ldi	r22, 0x03	; 3
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>
}
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <Buzzer_Off>:

void Buzzer_Off(void)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	63 e0       	ldi	r22, 0x03	; 3
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>
}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <EEPROM_writeByte+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <EEPROM_writeByte+0x8>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14f4:	0e 94 6f 10 	call	0x20de	; 0x20de <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14f8:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    14fc:	88 30       	cpi	r24, 0x08	; 8
    14fe:	11 f0       	breq	.+4      	; 0x1504 <EEPROM_writeByte+0x22>
        return ERROR;
    1500:	1c 82       	std	Y+4, r1	; 0x04
    1502:	28 c0       	rjmp	.+80     	; 0x1554 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	80 70       	andi	r24, 0x00	; 0
    150a:	97 70       	andi	r25, 0x07	; 7
    150c:	88 0f       	add	r24, r24
    150e:	89 2f       	mov	r24, r25
    1510:	88 1f       	adc	r24, r24
    1512:	99 0b       	sbc	r25, r25
    1514:	91 95       	neg	r25
    1516:	80 6a       	ori	r24, 0xA0	; 160
    1518:	0e 94 8a 10 	call	0x2114	; 0x2114 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    151c:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    1520:	88 31       	cpi	r24, 0x18	; 24
    1522:	11 f0       	breq	.+4      	; 0x1528 <EEPROM_writeByte+0x46>
        return ERROR; 
    1524:	1c 82       	std	Y+4, r1	; 0x04
    1526:	16 c0       	rjmp	.+44     	; 0x1554 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	0e 94 8a 10 	call	0x2114	; 0x2114 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    152e:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    1532:	88 32       	cpi	r24, 0x28	; 40
    1534:	11 f0       	breq	.+4      	; 0x153a <EEPROM_writeByte+0x58>
        return ERROR;
    1536:	1c 82       	std	Y+4, r1	; 0x04
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	0e 94 8a 10 	call	0x2114	; 0x2114 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1540:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    1544:	88 32       	cpi	r24, 0x28	; 40
    1546:	11 f0       	breq	.+4      	; 0x154c <EEPROM_writeByte+0x6a>
        return ERROR;
    1548:	1c 82       	std	Y+4, r1	; 0x04
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    154c:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TWI_stop>
	
    return SUCCESS;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	8c 83       	std	Y+4, r24	; 0x04
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <EEPROM_readByte+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <EEPROM_readByte+0x8>
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	7c 83       	std	Y+4, r23	; 0x04
    1578:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    157a:	0e 94 6f 10 	call	0x20de	; 0x20de <TWI_start>
    if (TWI_getStatus() != TWI_START)
    157e:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    1582:	88 30       	cpi	r24, 0x08	; 8
    1584:	11 f0       	breq	.+4      	; 0x158a <EEPROM_readByte+0x26>
        return ERROR;
    1586:	1d 82       	std	Y+5, r1	; 0x05
    1588:	44 c0       	rjmp	.+136    	; 0x1612 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	80 70       	andi	r24, 0x00	; 0
    1590:	97 70       	andi	r25, 0x07	; 7
    1592:	88 0f       	add	r24, r24
    1594:	89 2f       	mov	r24, r25
    1596:	88 1f       	adc	r24, r24
    1598:	99 0b       	sbc	r25, r25
    159a:	91 95       	neg	r25
    159c:	80 6a       	ori	r24, 0xA0	; 160
    159e:	0e 94 8a 10 	call	0x2114	; 0x2114 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15a2:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    15a6:	88 31       	cpi	r24, 0x18	; 24
    15a8:	11 f0       	breq	.+4      	; 0x15ae <EEPROM_readByte+0x4a>
        return ERROR;
    15aa:	1d 82       	std	Y+5, r1	; 0x05
    15ac:	32 c0       	rjmp	.+100    	; 0x1612 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	0e 94 8a 10 	call	0x2114	; 0x2114 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15b4:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    15b8:	88 32       	cpi	r24, 0x28	; 40
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <EEPROM_readByte+0x5c>
        return ERROR;
    15bc:	1d 82       	std	Y+5, r1	; 0x05
    15be:	29 c0       	rjmp	.+82     	; 0x1612 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    15c0:	0e 94 6f 10 	call	0x20de	; 0x20de <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    15c4:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    15c8:	80 31       	cpi	r24, 0x10	; 16
    15ca:	11 f0       	breq	.+4      	; 0x15d0 <EEPROM_readByte+0x6c>
        return ERROR;
    15cc:	1d 82       	std	Y+5, r1	; 0x05
    15ce:	21 c0       	rjmp	.+66     	; 0x1612 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	80 70       	andi	r24, 0x00	; 0
    15d6:	97 70       	andi	r25, 0x07	; 7
    15d8:	88 0f       	add	r24, r24
    15da:	89 2f       	mov	r24, r25
    15dc:	88 1f       	adc	r24, r24
    15de:	99 0b       	sbc	r25, r25
    15e0:	91 95       	neg	r25
    15e2:	81 6a       	ori	r24, 0xA1	; 161
    15e4:	0e 94 8a 10 	call	0x2114	; 0x2114 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    15e8:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    15ec:	80 34       	cpi	r24, 0x40	; 64
    15ee:	11 f0       	breq	.+4      	; 0x15f4 <EEPROM_readByte+0x90>
        return ERROR;
    15f0:	1d 82       	std	Y+5, r1	; 0x05
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    15f4:	0e 94 b4 10 	call	0x2168	; 0x2168 <TWI_readByteWithNACK>
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    15fe:	0e 94 c7 10 	call	0x218e	; 0x218e <TWI_getStatus>
    1602:	88 35       	cpi	r24, 0x58	; 88
    1604:	11 f0       	breq	.+4      	; 0x160a <EEPROM_readByte+0xa6>
        return ERROR;
    1606:	1d 82       	std	Y+5, r1	; 0x05
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    160a:	0e 94 7f 10 	call	0x20fe	; 0x20fe <TWI_stop>

    return SUCCESS;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <GPIO_setUpPinDirection>:
/* description:
 * function to determine the direction of the pin wethere input or output
 * if the pin number or port number is not correct, the function will do nothing
 */
void GPIO_setUpPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	27 97       	sbiw	r28, 0x07	; 7
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	6a 83       	std	Y+2, r22	; 0x02
    163c:	4b 83       	std	Y+3, r20	; 0x03
	/* to check if the number of port and number of pin is correct
	 * if not correct then the function will not handle the request
	 * if correct then switch on the port to setup the pin direction in each port
	 * */

	if ((port_num >= NUM_OF_PORTS ) | (pin_num>=NUM_OF_PINS) )
    163e:	1f 82       	std	Y+7, r1	; 0x07
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	10 f0       	brcs	.+4      	; 0x164a <GPIO_setUpPinDirection+0x26>
    1646:	21 e0       	ldi	r18, 0x01	; 1
    1648:	2f 83       	std	Y+7, r18	; 0x07
    164a:	1e 82       	std	Y+6, r1	; 0x06
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	10 f0       	brcs	.+4      	; 0x1656 <GPIO_setUpPinDirection+0x32>
    1652:	31 e0       	ldi	r19, 0x01	; 1
    1654:	3e 83       	std	Y+6, r19	; 0x06
    1656:	8f 81       	ldd	r24, Y+7	; 0x07
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	89 2b       	or	r24, r25
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	89 27       	eor	r24, r25
    1660:	88 23       	and	r24, r24
    1662:	09 f4       	brne	.+2      	; 0x1666 <GPIO_setUpPinDirection+0x42>
    1664:	d1 c0       	rjmp	.+418    	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
		/* Do nothing */
	}
	else {

	/* to check for the port and pin number and setup the pin direction*/
	switch(port_num)
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3d 83       	std	Y+5, r19	; 0x05
    166e:	2c 83       	std	Y+4, r18	; 0x04
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <GPIO_setUpPinDirection+0x58>
    167a:	43 c0       	rjmp	.+134    	; 0x1702 <GPIO_setUpPinDirection+0xde>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	2c f4       	brge	.+10     	; 0x1690 <GPIO_setUpPinDirection+0x6c>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	71 f0       	breq	.+28     	; 0x16aa <GPIO_setUpPinDirection+0x86>
    168e:	bc c0       	rjmp	.+376    	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
    1690:	2c 81       	ldd	r18, Y+4	; 0x04
    1692:	3d 81       	ldd	r19, Y+5	; 0x05
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <GPIO_setUpPinDirection+0x78>
    169a:	5f c0       	rjmp	.+190    	; 0x175a <GPIO_setUpPinDirection+0x136>
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <GPIO_setUpPinDirection+0x84>
    16a6:	85 c0       	rjmp	.+266    	; 0x17b2 <GPIO_setUpPinDirection+0x18e>
    16a8:	af c0       	rjmp	.+350    	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
	{
	case PORTA_ID:
		if (direction == PIN_INPUT)
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	88 23       	and	r24, r24
    16ae:	a9 f4       	brne	.+42     	; 0x16da <GPIO_setUpPinDirection+0xb6>
			CLEAR_BIT(DDRA,pin_num);
    16b0:	aa e3       	ldi	r26, 0x3A	; 58
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ea e3       	ldi	r30, 0x3A	; 58
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <GPIO_setUpPinDirection+0xaa>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <GPIO_setUpPinDirection+0xa6>
    16d2:	80 95       	com	r24
    16d4:	84 23       	and	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	97 c0       	rjmp	.+302    	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
		else
			SET_BIT(DDRA,pin_num);
    16da:	aa e3       	ldi	r26, 0x3A	; 58
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ea e3       	ldi	r30, 0x3A	; 58
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_setUpPinDirection+0xd4>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_setUpPinDirection+0xd0>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	83 c0       	rjmp	.+262    	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
		break;
	case PORTB_ID:
			if (direction==PIN_INPUT)
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	88 23       	and	r24, r24
    1706:	a9 f4       	brne	.+42     	; 0x1732 <GPIO_setUpPinDirection+0x10e>
				CLEAR_BIT(DDRB,pin_num);
    1708:	a7 e3       	ldi	r26, 0x37	; 55
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e7 e3       	ldi	r30, 0x37	; 55
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <GPIO_setUpPinDirection+0x102>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <GPIO_setUpPinDirection+0xfe>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	6b c0       	rjmp	.+214    	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
			else
				SET_BIT(DDRB,pin_num);
    1732:	a7 e3       	ldi	r26, 0x37	; 55
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e7 e3       	ldi	r30, 0x37	; 55
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_setUpPinDirection+0x12c>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_setUpPinDirection+0x128>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	57 c0       	rjmp	.+174    	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
			break;
	case PORTC_ID:
			if (direction==PIN_INPUT)
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	88 23       	and	r24, r24
    175e:	a9 f4       	brne	.+42     	; 0x178a <GPIO_setUpPinDirection+0x166>
				CLEAR_BIT(DDRC,pin_num);
    1760:	a4 e3       	ldi	r26, 0x34	; 52
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e4 e3       	ldi	r30, 0x34	; 52
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <GPIO_setUpPinDirection+0x15a>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <GPIO_setUpPinDirection+0x156>
    1782:	80 95       	com	r24
    1784:	84 23       	and	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	3f c0       	rjmp	.+126    	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
			else
				SET_BIT(DDRC,pin_num);
    178a:	a4 e3       	ldi	r26, 0x34	; 52
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e4 e3       	ldi	r30, 0x34	; 52
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GPIO_setUpPinDirection+0x184>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <GPIO_setUpPinDirection+0x180>
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	2b c0       	rjmp	.+86     	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
			break;
	case PORTD_ID:
			if (direction==PIN_INPUT)
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	88 23       	and	r24, r24
    17b6:	a9 f4       	brne	.+42     	; 0x17e2 <GPIO_setUpPinDirection+0x1be>
				CLEAR_BIT(DDRD,pin_num);
    17b8:	a1 e3       	ldi	r26, 0x31	; 49
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e1 e3       	ldi	r30, 0x31	; 49
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <GPIO_setUpPinDirection+0x1b2>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <GPIO_setUpPinDirection+0x1ae>
    17da:	80 95       	com	r24
    17dc:	84 23       	and	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <GPIO_setUpPinDirection+0x1e4>
			else
				SET_BIT(DDRD,pin_num);
    17e2:	a1 e3       	ldi	r26, 0x31	; 49
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e1 e3       	ldi	r30, 0x31	; 49
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_setUpPinDirection+0x1dc>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_setUpPinDirection+0x1d8>
    1804:	84 2b       	or	r24, r20
    1806:	8c 93       	st	X, r24
			break;
	}
	}
}
    1808:	27 96       	adiw	r28, 0x07	; 7
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <GPIO_writePin>:
 * function to set pin or clear pin
 * if the pin number or port number is not correct, the function will do nothing
 */

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	27 97       	sbiw	r28, 0x07	; 7
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	6a 83       	std	Y+2, r22	; 0x02
    1832:	4b 83       	std	Y+3, r20	; 0x03
	/* if the pin number or port number is not correct then the function will do nothing
	 */
	if ((port_num >= NUM_OF_PORTS ) | (pin_num>=NUM_OF_PINS) )
    1834:	1f 82       	std	Y+7, r1	; 0x07
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	10 f0       	brcs	.+4      	; 0x1840 <GPIO_writePin+0x26>
    183c:	21 e0       	ldi	r18, 0x01	; 1
    183e:	2f 83       	std	Y+7, r18	; 0x07
    1840:	1e 82       	std	Y+6, r1	; 0x06
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	88 30       	cpi	r24, 0x08	; 8
    1846:	10 f0       	brcs	.+4      	; 0x184c <GPIO_writePin+0x32>
    1848:	31 e0       	ldi	r19, 0x01	; 1
    184a:	3e 83       	std	Y+6, r19	; 0x06
    184c:	8f 81       	ldd	r24, Y+7	; 0x07
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	89 2b       	or	r24, r25
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	89 27       	eor	r24, r25
    1856:	88 23       	and	r24, r24
    1858:	09 f4       	brne	.+2      	; 0x185c <GPIO_writePin+0x42>
    185a:	d1 c0       	rjmp	.+418    	; 0x19fe <GPIO_writePin+0x1e4>
	else {


	/* switch on the port number to set the required pin in the required port */

	switch(port_num)
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	3d 83       	std	Y+5, r19	; 0x05
    1864:	2c 83       	std	Y+4, r18	; 0x04
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	91 05       	cpc	r25, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <GPIO_writePin+0x58>
    1870:	43 c0       	rjmp	.+134    	; 0x18f8 <GPIO_writePin+0xde>
    1872:	2c 81       	ldd	r18, Y+4	; 0x04
    1874:	3d 81       	ldd	r19, Y+5	; 0x05
    1876:	22 30       	cpi	r18, 0x02	; 2
    1878:	31 05       	cpc	r19, r1
    187a:	2c f4       	brge	.+10     	; 0x1886 <GPIO_writePin+0x6c>
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	9d 81       	ldd	r25, Y+5	; 0x05
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	71 f0       	breq	.+28     	; 0x18a0 <GPIO_writePin+0x86>
    1884:	bc c0       	rjmp	.+376    	; 0x19fe <GPIO_writePin+0x1e4>
    1886:	2c 81       	ldd	r18, Y+4	; 0x04
    1888:	3d 81       	ldd	r19, Y+5	; 0x05
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	09 f4       	brne	.+2      	; 0x1892 <GPIO_writePin+0x78>
    1890:	5f c0       	rjmp	.+190    	; 0x1950 <GPIO_writePin+0x136>
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	9d 81       	ldd	r25, Y+5	; 0x05
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	91 05       	cpc	r25, r1
    189a:	09 f4       	brne	.+2      	; 0x189e <GPIO_writePin+0x84>
    189c:	85 c0       	rjmp	.+266    	; 0x19a8 <GPIO_writePin+0x18e>
    189e:	af c0       	rjmp	.+350    	; 0x19fe <GPIO_writePin+0x1e4>
	{
	case PORTA_ID:
		if(value==LOGIC_HIGH)
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	a1 f4       	brne	.+40     	; 0x18ce <GPIO_writePin+0xb4>
			SET_BIT(PORTA,pin_num);
    18a6:	ab e3       	ldi	r26, 0x3B	; 59
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	eb e3       	ldi	r30, 0x3B	; 59
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	48 2f       	mov	r20, r24
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <GPIO_writePin+0xaa>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <GPIO_writePin+0xa6>
    18c8:	84 2b       	or	r24, r20
    18ca:	8c 93       	st	X, r24
    18cc:	98 c0       	rjmp	.+304    	; 0x19fe <GPIO_writePin+0x1e4>
		else
			CLEAR_BIT(PORTA,pin_num);
    18ce:	ab e3       	ldi	r26, 0x3B	; 59
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	eb e3       	ldi	r30, 0x3B	; 59
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_writePin+0xd2>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_writePin+0xce>
    18f0:	80 95       	com	r24
    18f2:	84 23       	and	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	83 c0       	rjmp	.+262    	; 0x19fe <GPIO_writePin+0x1e4>
		break;
	case PORTB_ID:
			if(value==LOGIC_HIGH)
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	a1 f4       	brne	.+40     	; 0x1926 <GPIO_writePin+0x10c>
				SET_BIT(PORTB,pin_num);
    18fe:	a8 e3       	ldi	r26, 0x38	; 56
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e8 e3       	ldi	r30, 0x38	; 56
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <GPIO_writePin+0x102>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <GPIO_writePin+0xfe>
    1920:	84 2b       	or	r24, r20
    1922:	8c 93       	st	X, r24
    1924:	6c c0       	rjmp	.+216    	; 0x19fe <GPIO_writePin+0x1e4>
			else
				CLEAR_BIT(PORTB,pin_num);
    1926:	a8 e3       	ldi	r26, 0x38	; 56
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e8 e3       	ldi	r30, 0x38	; 56
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <GPIO_writePin+0x12a>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <GPIO_writePin+0x126>
    1948:	80 95       	com	r24
    194a:	84 23       	and	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	57 c0       	rjmp	.+174    	; 0x19fe <GPIO_writePin+0x1e4>
			break;
	case PORTC_ID:
			if(value==LOGIC_HIGH)
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	a1 f4       	brne	.+40     	; 0x197e <GPIO_writePin+0x164>
				SET_BIT(PORTC,pin_num);
    1956:	a5 e3       	ldi	r26, 0x35	; 53
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e5 e3       	ldi	r30, 0x35	; 53
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	48 2f       	mov	r20, r24
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 2e       	mov	r0, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <GPIO_writePin+0x15a>
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	0a 94       	dec	r0
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <GPIO_writePin+0x156>
    1978:	84 2b       	or	r24, r20
    197a:	8c 93       	st	X, r24
    197c:	40 c0       	rjmp	.+128    	; 0x19fe <GPIO_writePin+0x1e4>
			else
				CLEAR_BIT(PORTC,pin_num);
    197e:	a5 e3       	ldi	r26, 0x35	; 53
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e5 e3       	ldi	r30, 0x35	; 53
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <GPIO_writePin+0x182>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <GPIO_writePin+0x17e>
    19a0:	80 95       	com	r24
    19a2:	84 23       	and	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	2b c0       	rjmp	.+86     	; 0x19fe <GPIO_writePin+0x1e4>
			break;
	case PORTD_ID:
			if(value==LOGIC_HIGH)
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	a1 f4       	brne	.+40     	; 0x19d6 <GPIO_writePin+0x1bc>
				SET_BIT(PORTD,pin_num);
    19ae:	a2 e3       	ldi	r26, 0x32	; 50
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e2 e3       	ldi	r30, 0x32	; 50
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <GPIO_writePin+0x1b2>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <GPIO_writePin+0x1ae>
    19d0:	84 2b       	or	r24, r20
    19d2:	8c 93       	st	X, r24
    19d4:	14 c0       	rjmp	.+40     	; 0x19fe <GPIO_writePin+0x1e4>
			else
				CLEAR_BIT(PORTD,pin_num);
    19d6:	a2 e3       	ldi	r26, 0x32	; 50
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e2 e3       	ldi	r30, 0x32	; 50
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 2e       	mov	r0, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <GPIO_writePin+0x1da>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	0a 94       	dec	r0
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <GPIO_writePin+0x1d6>
    19f8:	80 95       	com	r24
    19fa:	84 23       	and	r24, r20
    19fc:	8c 93       	st	X, r24
			break;
	}
	}

}
    19fe:	27 96       	adiw	r28, 0x07	; 7
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <GPIO_readPin>:
/* description:
 * function to read the statues of the pin whether it is high or low
 * if the number of port of pin number is incorrect then the function return logic low
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	27 97       	sbiw	r28, 0x07	; 7
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	8a 83       	std	Y+2, r24	; 0x02
    1a26:	6b 83       	std	Y+3, r22	; 0x03
	uint8 statues;

	/* if the number of port of pin number is incorrect so return logic low */
	if ((port_num >= NUM_OF_PORTS ) | (pin_num>=NUM_OF_PINS) )
    1a28:	1f 82       	std	Y+7, r1	; 0x07
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	84 30       	cpi	r24, 0x04	; 4
    1a2e:	10 f0       	brcs	.+4      	; 0x1a34 <GPIO_readPin+0x24>
    1a30:	21 e0       	ldi	r18, 0x01	; 1
    1a32:	2f 83       	std	Y+7, r18	; 0x07
    1a34:	1e 82       	std	Y+6, r1	; 0x06
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	88 30       	cpi	r24, 0x08	; 8
    1a3a:	10 f0       	brcs	.+4      	; 0x1a40 <GPIO_readPin+0x30>
    1a3c:	31 e0       	ldi	r19, 0x01	; 1
    1a3e:	3e 83       	std	Y+6, r19	; 0x06
    1a40:	8f 81       	ldd	r24, Y+7	; 0x07
    1a42:	4e 81       	ldd	r20, Y+6	; 0x06
    1a44:	84 2b       	or	r24, r20
    1a46:	88 23       	and	r24, r24
    1a48:	11 f0       	breq	.+4      	; 0x1a4e <GPIO_readPin+0x3e>
	{
		statues=LOGIC_LOW;
    1a4a:	19 82       	std	Y+1, r1	; 0x01
    1a4c:	80 c0       	rjmp	.+256    	; 0x1b4e <GPIO_readPin+0x13e>


	/* read the required pin from the required port and return the statues
	 * of the pin whether 1 or 0 (SET OR CLEARED)
	 */
	switch(port_num)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3d 83       	std	Y+5, r19	; 0x05
    1a56:	2c 83       	std	Y+4, r18	; 0x04
    1a58:	4c 81       	ldd	r20, Y+4	; 0x04
    1a5a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a5c:	41 30       	cpi	r20, 0x01	; 1
    1a5e:	51 05       	cpc	r21, r1
    1a60:	79 f1       	breq	.+94     	; 0x1ac0 <GPIO_readPin+0xb0>
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	34 f4       	brge	.+12     	; 0x1a78 <GPIO_readPin+0x68>
    1a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a70:	21 15       	cp	r18, r1
    1a72:	31 05       	cpc	r19, r1
    1a74:	69 f0       	breq	.+26     	; 0x1a90 <GPIO_readPin+0x80>
    1a76:	6b c0       	rjmp	.+214    	; 0x1b4e <GPIO_readPin+0x13e>
    1a78:	4c 81       	ldd	r20, Y+4	; 0x04
    1a7a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7c:	42 30       	cpi	r20, 0x02	; 2
    1a7e:	51 05       	cpc	r21, r1
    1a80:	b9 f1       	breq	.+110    	; 0x1af0 <GPIO_readPin+0xe0>
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	9d 81       	ldd	r25, Y+5	; 0x05
    1a86:	83 30       	cpi	r24, 0x03	; 3
    1a88:	91 05       	cpc	r25, r1
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <GPIO_readPin+0x7e>
    1a8c:	49 c0       	rjmp	.+146    	; 0x1b20 <GPIO_readPin+0x110>
    1a8e:	5f c0       	rjmp	.+190    	; 0x1b4e <GPIO_readPin+0x13e>
	{
	case PORTA_ID:
		if (BIT_IS_SET(PINA,pin_num))
    1a90:	e9 e3       	ldi	r30, 0x39	; 57
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a9 01       	movw	r20, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_readPin+0x98>
    1aa4:	55 95       	asr	r21
    1aa6:	47 95       	ror	r20
    1aa8:	8a 95       	dec	r24
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_readPin+0x94>
    1aac:	ca 01       	movw	r24, r20
    1aae:	81 70       	andi	r24, 0x01	; 1
    1ab0:	90 70       	andi	r25, 0x00	; 0
    1ab2:	88 23       	and	r24, r24
    1ab4:	19 f0       	breq	.+6      	; 0x1abc <GPIO_readPin+0xac>
			statues=LOGIC_HIGH;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	49 c0       	rjmp	.+146    	; 0x1b4e <GPIO_readPin+0x13e>
		else
			statues=LOGIC_LOW;
    1abc:	19 82       	std	Y+1, r1	; 0x01
    1abe:	47 c0       	rjmp	.+142    	; 0x1b4e <GPIO_readPin+0x13e>
		break;
	case PORTB_ID:
			if (BIT_IS_SET(PINB,pin_num))
    1ac0:	e6 e3       	ldi	r30, 0x36	; 54
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <GPIO_readPin+0xc8>
    1ad4:	55 95       	asr	r21
    1ad6:	47 95       	ror	r20
    1ad8:	8a 95       	dec	r24
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <GPIO_readPin+0xc4>
    1adc:	ca 01       	movw	r24, r20
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	88 23       	and	r24, r24
    1ae4:	19 f0       	breq	.+6      	; 0x1aec <GPIO_readPin+0xdc>
				statues=LOGIC_HIGH;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	31 c0       	rjmp	.+98     	; 0x1b4e <GPIO_readPin+0x13e>
			else
				statues=LOGIC_LOW;
    1aec:	19 82       	std	Y+1, r1	; 0x01
    1aee:	2f c0       	rjmp	.+94     	; 0x1b4e <GPIO_readPin+0x13e>
			break;
	case PORTC_ID:
			if (BIT_IS_SET(PINC,pin_num))
    1af0:	e3 e3       	ldi	r30, 0x33	; 51
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a9 01       	movw	r20, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_readPin+0xf8>
    1b04:	55 95       	asr	r21
    1b06:	47 95       	ror	r20
    1b08:	8a 95       	dec	r24
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_readPin+0xf4>
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	81 70       	andi	r24, 0x01	; 1
    1b10:	90 70       	andi	r25, 0x00	; 0
    1b12:	88 23       	and	r24, r24
    1b14:	19 f0       	breq	.+6      	; 0x1b1c <GPIO_readPin+0x10c>
				statues=LOGIC_HIGH;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	19 c0       	rjmp	.+50     	; 0x1b4e <GPIO_readPin+0x13e>
			else
				statues=LOGIC_LOW;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	17 c0       	rjmp	.+46     	; 0x1b4e <GPIO_readPin+0x13e>
			break;
	case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num))
    1b20:	e0 e3       	ldi	r30, 0x30	; 48
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a9 01       	movw	r20, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <GPIO_readPin+0x128>
    1b34:	55 95       	asr	r21
    1b36:	47 95       	ror	r20
    1b38:	8a 95       	dec	r24
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <GPIO_readPin+0x124>
    1b3c:	ca 01       	movw	r24, r20
    1b3e:	81 70       	andi	r24, 0x01	; 1
    1b40:	90 70       	andi	r25, 0x00	; 0
    1b42:	88 23       	and	r24, r24
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <GPIO_readPin+0x13c>
				statues=LOGIC_HIGH;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <GPIO_readPin+0x13e>
			else
				statues=LOGIC_LOW;
    1b4c:	19 82       	std	Y+1, r1	; 0x01
			break;

	}
	}
	return statues;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b50:	27 96       	adiw	r28, 0x07	; 7
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <GPIO_setUpPortDirection>:
/* description:
 * function to determine the direction of the port wethere input or output
 * if the pin number or port number is not correct, the function will do nothing
 */
void GPIO_setUpPortDirection(uint8 port_num, uint8 direction)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <GPIO_setUpPortDirection+0x6>
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <GPIO_setUpPortDirection+0x8>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
	/*if the  port number is not correct, do nothing*/
	if ((port_num >= NUM_OF_PORTS ) )
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	84 30       	cpi	r24, 0x04	; 4
    1b76:	08 f0       	brcs	.+2      	; 0x1b7a <GPIO_setUpPortDirection+0x18>
    1b78:	4e c0       	rjmp	.+156    	; 0x1c16 <GPIO_setUpPortDirection+0xb4>


/* switch on the port to get the required port then set the whole port as input or
 * output
 */
	switch(port_num)
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	3c 83       	std	Y+4, r19	; 0x04
    1b82:	2b 83       	std	Y+3, r18	; 0x03
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	09 f1       	breq	.+66     	; 0x1bd0 <GPIO_setUpPortDirection+0x6e>
    1b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b90:	3c 81       	ldd	r19, Y+4	; 0x04
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <GPIO_setUpPortDirection+0x40>
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	61 f0       	breq	.+24     	; 0x1bb8 <GPIO_setUpPortDirection+0x56>
    1ba0:	3a c0       	rjmp	.+116    	; 0x1c16 <GPIO_setUpPortDirection+0xb4>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	f1 f0       	breq	.+60     	; 0x1be8 <GPIO_setUpPortDirection+0x86>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	29 f1       	breq	.+74     	; 0x1c00 <GPIO_setUpPortDirection+0x9e>
    1bb6:	2f c0       	rjmp	.+94     	; 0x1c16 <GPIO_setUpPortDirection+0xb4>
	{
	case PORTA_ID:
		if(direction==PORT_INPUT)
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	88 23       	and	r24, r24
    1bbc:	21 f4       	brne	.+8      	; 0x1bc6 <GPIO_setUpPortDirection+0x64>
			DDRA=0x00;
    1bbe:	ea e3       	ldi	r30, 0x3A	; 58
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	10 82       	st	Z, r1
    1bc4:	28 c0       	rjmp	.+80     	; 0x1c16 <GPIO_setUpPortDirection+0xb4>
		else
			DDRA=0xFF;
    1bc6:	ea e3       	ldi	r30, 0x3A	; 58
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	8f ef       	ldi	r24, 0xFF	; 255
    1bcc:	80 83       	st	Z, r24
    1bce:	23 c0       	rjmp	.+70     	; 0x1c16 <GPIO_setUpPortDirection+0xb4>
		break;
	case PORTB_ID:
			if(direction==PORT_INPUT)
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	88 23       	and	r24, r24
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <GPIO_setUpPortDirection+0x7c>
				DDRB=0x00;
    1bd6:	e7 e3       	ldi	r30, 0x37	; 55
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	10 82       	st	Z, r1
    1bdc:	1c c0       	rjmp	.+56     	; 0x1c16 <GPIO_setUpPortDirection+0xb4>
			else
				DDRB=0xFF;
    1bde:	e7 e3       	ldi	r30, 0x37	; 55
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8f ef       	ldi	r24, 0xFF	; 255
    1be4:	80 83       	st	Z, r24
    1be6:	17 c0       	rjmp	.+46     	; 0x1c16 <GPIO_setUpPortDirection+0xb4>
			break;
	case PORTC_ID:
				if(direction==PORT_INPUT)
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	88 23       	and	r24, r24
    1bec:	21 f4       	brne	.+8      	; 0x1bf6 <GPIO_setUpPortDirection+0x94>
					DDRC=0x00;
    1bee:	e4 e3       	ldi	r30, 0x34	; 52
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	10 82       	st	Z, r1
    1bf4:	10 c0       	rjmp	.+32     	; 0x1c16 <GPIO_setUpPortDirection+0xb4>
				else
					DDRC=0xFF;
    1bf6:	e4 e3       	ldi	r30, 0x34	; 52
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	80 83       	st	Z, r24
    1bfe:	0b c0       	rjmp	.+22     	; 0x1c16 <GPIO_setUpPortDirection+0xb4>
				break;
	case PORTD_ID:
				if(direction==PORT_INPUT)
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	88 23       	and	r24, r24
    1c04:	21 f4       	brne	.+8      	; 0x1c0e <GPIO_setUpPortDirection+0xac>
					DDRD=0x00;
    1c06:	e1 e3       	ldi	r30, 0x31	; 49
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	10 82       	st	Z, r1
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <GPIO_setUpPortDirection+0xb4>
				else
					DDRD=0xFF;
    1c0e:	e1 e3       	ldi	r30, 0x31	; 49
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	80 83       	st	Z, r24
				break;
	}
	}
}
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <GPIO_writePort>:
/* description:
 * function to write on port a required value
 * if the pin number or port number is not correct, the function will do nothing
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <GPIO_writePort+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <GPIO_writePort+0x8>
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	6a 83       	std	Y+2, r22	; 0x02
	/*if the port number is not correct, the function will do nothing*/
	if ((port_num >= NUM_OF_PORTS ))
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	84 30       	cpi	r24, 0x04	; 4
    1c38:	90 f5       	brcc	.+100    	; 0x1c9e <GPIO_writePort+0x7a>
			/*do nothing*/
		}

	else {
		/* find the required port then write on the port the required value*/
		switch(port_num){
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	3c 83       	std	Y+4, r19	; 0x04
    1c42:	2b 83       	std	Y+3, r18	; 0x03
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	d1 f0       	breq	.+52     	; 0x1c82 <GPIO_writePort+0x5e>
    1c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c50:	3c 81       	ldd	r19, Y+4	; 0x04
    1c52:	22 30       	cpi	r18, 0x02	; 2
    1c54:	31 05       	cpc	r19, r1
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <GPIO_writePort+0x3e>
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	61 f0       	breq	.+24     	; 0x1c78 <GPIO_writePort+0x54>
    1c60:	1e c0       	rjmp	.+60     	; 0x1c9e <GPIO_writePort+0x7a>
    1c62:	2b 81       	ldd	r18, Y+3	; 0x03
    1c64:	3c 81       	ldd	r19, Y+4	; 0x04
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	81 f0       	breq	.+32     	; 0x1c8c <GPIO_writePort+0x68>
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	83 30       	cpi	r24, 0x03	; 3
    1c72:	91 05       	cpc	r25, r1
    1c74:	81 f0       	breq	.+32     	; 0x1c96 <GPIO_writePort+0x72>
    1c76:	13 c0       	rjmp	.+38     	; 0x1c9e <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA=value;
    1c78:	eb e3       	ldi	r30, 0x3B	; 59
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	80 83       	st	Z, r24
    1c80:	0e c0       	rjmp	.+28     	; 0x1c9e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    1c82:	e8 e3       	ldi	r30, 0x38	; 56
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	80 83       	st	Z, r24
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1c8c:	e5 e3       	ldi	r30, 0x35	; 53
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	80 83       	st	Z, r24
    1c94:	04 c0       	rjmp	.+8      	; 0x1c9e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1c96:	e2 e3       	ldi	r30, 0x32	; 50
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	80 83       	st	Z, r24

		}

	}

}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <GPIO_readPort>:
/* description:
 * function to read the whole port and return it's value
 * if the port number or pin number is incorrect the function will return zero
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <GPIO_readPort+0x6>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <GPIO_readPort+0x8>
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value;
	/*if the port number is not correct, the function will do nothing*/
		if ((port_num >= NUM_OF_PORTS ))
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	84 30       	cpi	r24, 0x04	; 4
    1cbe:	10 f0       	brcs	.+4      	; 0x1cc4 <GPIO_readPort+0x18>
			{
			port_value=0;
    1cc0:	19 82       	std	Y+1, r1	; 0x01
    1cc2:	32 c0       	rjmp	.+100    	; 0x1d28 <GPIO_readPort+0x7c>
			}
		else
		{
			switch(port_num)
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	3c 83       	std	Y+4, r19	; 0x04
    1ccc:	2b 83       	std	Y+3, r18	; 0x03
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	d1 f0       	breq	.+52     	; 0x1d0c <GPIO_readPort+0x60>
    1cd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cda:	3c 81       	ldd	r19, Y+4	; 0x04
    1cdc:	22 30       	cpi	r18, 0x02	; 2
    1cde:	31 05       	cpc	r19, r1
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <GPIO_readPort+0x40>
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	61 f0       	breq	.+24     	; 0x1d02 <GPIO_readPort+0x56>
    1cea:	1e c0       	rjmp	.+60     	; 0x1d28 <GPIO_readPort+0x7c>
    1cec:	2b 81       	ldd	r18, Y+3	; 0x03
    1cee:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	81 f0       	breq	.+32     	; 0x1d16 <GPIO_readPort+0x6a>
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	81 f0       	breq	.+32     	; 0x1d20 <GPIO_readPort+0x74>
    1d00:	13 c0       	rjmp	.+38     	; 0x1d28 <GPIO_readPort+0x7c>
			{
			case PORTA_ID:
				port_value=PINA;
    1d02:	e9 e3       	ldi	r30, 0x39	; 57
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	0e c0       	rjmp	.+28     	; 0x1d28 <GPIO_readPort+0x7c>
				break;
			case PORTB_ID:
				port_value=PINB;
    1d0c:	e6 e3       	ldi	r30, 0x36	; 54
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	09 c0       	rjmp	.+18     	; 0x1d28 <GPIO_readPort+0x7c>
				break;
			case PORTC_ID:
				port_value=PINC;
    1d16:	e3 e3       	ldi	r30, 0x33	; 51
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	04 c0       	rjmp	.+8      	; 0x1d28 <GPIO_readPort+0x7c>
				break;
			case PORTD_ID:
				port_value=PIND;
    1d20:	e0 e3       	ldi	r30, 0x30	; 48
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	89 83       	std	Y+1, r24	; 0x01
				break;

			}
		}
		return port_value;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <DcMotor_Init>:
/*************************************************************************
                      *function definitions *
 *************************************************************************/

void DcMotor_Init(void)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
	/* to set up the two pins of the motor as ouTput pins*/
	GPIO_setUpPinDirection(PORT_MOTOR_INPUT,PIN1_MOTOR_INPUT_ID,PIN_OUTPUT);
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_setUpPinDirection>
	GPIO_setUpPinDirection(PORT_MOTOR_INPUT,PIN2_MOTOR_INPUT_ID,PIN_OUTPUT);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_setUpPinDirection>

	/* to stop the motor at the start*/
	GPIO_writePin(PORT_MOTOR_INPUT,PIN1_MOTOR_INPUT_ID,LOGIC_LOW);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>
	GPIO_writePin(PORT_MOTOR_INPUT,PIN2_MOTOR_INPUT_ID,LOGIC_LOW);
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	61 e0       	ldi	r22, 0x01	; 1
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>

}
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <DcMotor_Rotate>:

void DcMotor_Rotate(DCMotor_State state,uint8 speed)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <DcMotor_Rotate+0x6>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <DcMotor_Rotate+0x8>
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <PWM_Timer0_Start>
	switch (state)
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	3c 83       	std	Y+4, r19	; 0x04
    1d90:	2b 83       	std	Y+3, r18	; 0x03
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	91 05       	cpc	r25, r1
    1d9a:	a1 f0       	breq	.+40     	; 0x1dc4 <DcMotor_Rotate+0x56>
    1d9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1da0:	22 30       	cpi	r18, 0x02	; 2
    1da2:	31 05       	cpc	r19, r1
    1da4:	d1 f0       	breq	.+52     	; 0x1dda <DcMotor_Rotate+0x6c>
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	01 f5       	brne	.+64     	; 0x1dee <DcMotor_Rotate+0x80>
	{
	case STATE_CW:
		GPIO_writePin(PORT_MOTOR_INPUT,PIN1_MOTOR_INPUT_ID,LOGIC_HIGH);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR_INPUT,PIN2_MOTOR_INPUT_ID,LOGIC_LOW);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	61 e0       	ldi	r22, 0x01	; 1
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>
    1dc2:	15 c0       	rjmp	.+42     	; 0x1dee <DcMotor_Rotate+0x80>
		break;
	case STATE_ACW:
		GPIO_writePin(PORT_MOTOR_INPUT,PIN1_MOTOR_INPUT_ID,LOGIC_LOW);
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR_INPUT,PIN2_MOTOR_INPUT_ID,LOGIC_HIGH);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>
    1dd8:	0a c0       	rjmp	.+20     	; 0x1dee <DcMotor_Rotate+0x80>
		break;
	case STATE_STOP:
		GPIO_writePin(PORT_MOTOR_INPUT,PIN1_MOTOR_INPUT_ID,LOGIC_LOW);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR_INPUT,PIN2_MOTOR_INPUT_ID,LOGIC_LOW);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	61 e0       	ldi	r22, 0x01	; 1
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	0e 94 0d 0c 	call	0x181a	; 0x181a <GPIO_writePin>

	}

}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <PWM_Timer0_Start>:
                      *function definitions *
 *************************************************************************/


void PWM_Timer0_Start(uint8 duty_cycle)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	89 83       	std	Y+1, r24	; 0x01
	/* to make PWM mode and non-inverting mode
	 *  and prescalar of 8
	 */
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01);
    1e08:	e3 e5       	ldi	r30, 0x53	; 83
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	8a e6       	ldi	r24, 0x6A	; 106
    1e0e:	80 83       	st	Z, r24
	TCNT0=0;
    1e10:	e2 e5       	ldi	r30, 0x52	; 82
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	10 82       	st	Z, r1

	OCR0= (uint8)(((uint16)(duty_cycle*255))/(100));
    1e16:	ec e5       	ldi	r30, 0x5C	; 92
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	ca 01       	movw	r24, r20
    1e22:	9c 01       	movw	r18, r24
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	c9 01       	movw	r24, r18
    1e2a:	96 95       	lsr	r25
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	88 27       	eor	r24, r24
    1e30:	97 95       	ror	r25
    1e32:	87 95       	ror	r24
    1e34:	82 1b       	sub	r24, r18
    1e36:	93 0b       	sbc	r25, r19
    1e38:	84 0f       	add	r24, r20
    1e3a:	95 1f       	adc	r25, r21
    1e3c:	24 e6       	ldi	r18, 0x64	; 100
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	b9 01       	movw	r22, r18
    1e42:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__udivmodhi4>
    1e46:	cb 01       	movw	r24, r22
    1e48:	80 83       	st	Z, r24
	GPIO_setUpPinDirection(PORTB_ID,PIN3_NUM,PIN_OUTPUT);
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	63 e0       	ldi	r22, 0x03	; 3
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_setUpPinDirection>

}
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <__vector_7>:
/***********************************************************************
                     * Function Definitions*
 **********************************************************************/

ISR(TIMER1_COMPA_vect)
{
    1e5c:	1f 92       	push	r1
    1e5e:	0f 92       	push	r0
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	0f 92       	push	r0
    1e64:	11 24       	eor	r1, r1
    1e66:	2f 93       	push	r18
    1e68:	3f 93       	push	r19
    1e6a:	4f 93       	push	r20
    1e6c:	5f 93       	push	r21
    1e6e:	6f 93       	push	r22
    1e70:	7f 93       	push	r23
    1e72:	8f 93       	push	r24
    1e74:	9f 93       	push	r25
    1e76:	af 93       	push	r26
    1e78:	bf 93       	push	r27
    1e7a:	ef 93       	push	r30
    1e7c:	ff 93       	push	r31
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    1e86:	80 91 83 00 	lds	r24, 0x0083
    1e8a:	90 91 84 00 	lds	r25, 0x0084
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	29 f0       	breq	.+10     	; 0x1e9c <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    1e92:	e0 91 83 00 	lds	r30, 0x0083
    1e96:	f0 91 84 00 	lds	r31, 0x0084
    1e9a:	09 95       	icall

	}
}
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	ff 91       	pop	r31
    1ea2:	ef 91       	pop	r30
    1ea4:	bf 91       	pop	r27
    1ea6:	af 91       	pop	r26
    1ea8:	9f 91       	pop	r25
    1eaa:	8f 91       	pop	r24
    1eac:	7f 91       	pop	r23
    1eae:	6f 91       	pop	r22
    1eb0:	5f 91       	pop	r21
    1eb2:	4f 91       	pop	r20
    1eb4:	3f 91       	pop	r19
    1eb6:	2f 91       	pop	r18
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	0f 90       	pop	r0
    1ebe:	1f 90       	pop	r1
    1ec0:	18 95       	reti

00001ec2 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1ec2:	1f 92       	push	r1
    1ec4:	0f 92       	push	r0
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	0f 92       	push	r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	2f 93       	push	r18
    1ece:	3f 93       	push	r19
    1ed0:	4f 93       	push	r20
    1ed2:	5f 93       	push	r21
    1ed4:	6f 93       	push	r22
    1ed6:	7f 93       	push	r23
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	af 93       	push	r26
    1ede:	bf 93       	push	r27
    1ee0:	ef 93       	push	r30
    1ee2:	ff 93       	push	r31
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    1eec:	80 91 83 00 	lds	r24, 0x0083
    1ef0:	90 91 84 00 	lds	r25, 0x0084
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	29 f0       	breq	.+10     	; 0x1f02 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1ef8:	e0 91 83 00 	lds	r30, 0x0083
    1efc:	f0 91 84 00 	lds	r31, 0x0084
    1f00:	09 95       	icall

	}
}
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	ff 91       	pop	r31
    1f08:	ef 91       	pop	r30
    1f0a:	bf 91       	pop	r27
    1f0c:	af 91       	pop	r26
    1f0e:	9f 91       	pop	r25
    1f10:	8f 91       	pop	r24
    1f12:	7f 91       	pop	r23
    1f14:	6f 91       	pop	r22
    1f16:	5f 91       	pop	r21
    1f18:	4f 91       	pop	r20
    1f1a:	3f 91       	pop	r19
    1f1c:	2f 91       	pop	r18
    1f1e:	0f 90       	pop	r0
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	0f 90       	pop	r0
    1f24:	1f 90       	pop	r1
    1f26:	18 95       	reti

00001f28 <Timer1_init>:




void Timer1_init(const Timer1_ConfigType* config_ptr)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <Timer1_init+0x6>
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
	/* FOC1A are set high when a non-pwm mode*/
	TCCR1A =(1<<FOC1A);
    1f36:	ef e4       	ldi	r30, 0x4F	; 79
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	88 e0       	ldi	r24, 0x08	; 8
    1f3c:	80 83       	st	Z, r24

	/* make the mode operation configurable wether normal or compare
	 * by configuration in WGM10,WGM11 in TCCR1A register
	 * and WGM12 in TCCR1B register
	 */
	TCCR1A=(TCCR1A & 0xFC)| ( (config_ptr->mode) & 0x03) ;
    1f3e:	af e4       	ldi	r26, 0x4F	; 79
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	ef e4       	ldi	r30, 0x4F	; 79
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	98 2f       	mov	r25, r24
    1f4a:	9c 7f       	andi	r25, 0xFC	; 252
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	85 81       	ldd	r24, Z+5	; 0x05
    1f52:	83 70       	andi	r24, 0x03	; 3
    1f54:	89 2b       	or	r24, r25
    1f56:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B & 0xE7)| ( ((config_ptr->mode) & 0x0C) << 1);
    1f58:	ae e4       	ldi	r26, 0x4E	; 78
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	ee e4       	ldi	r30, 0x4E	; 78
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	28 2f       	mov	r18, r24
    1f64:	27 7e       	andi	r18, 0xE7	; 231
    1f66:	e9 81       	ldd	r30, Y+1	; 0x01
    1f68:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6a:	85 81       	ldd	r24, Z+5	; 0x05
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	8c 70       	andi	r24, 0x0C	; 12
    1f72:	90 70       	andi	r25, 0x00	; 0
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	82 2b       	or	r24, r18
    1f7a:	8c 93       	st	X, r24

	/* make the prescalar configurable
	 * by configuration in bit CS10,CS11,CS12 in TCCR1B
	 */
	TCCR1B=(TCCR1B & 0xF8) |(config_ptr->prescalar);
    1f7c:	ae e4       	ldi	r26, 0x4E	; 78
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	ee e4       	ldi	r30, 0x4E	; 78
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	98 2f       	mov	r25, r24
    1f88:	98 7f       	andi	r25, 0xF8	; 248
    1f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8e:	84 81       	ldd	r24, Z+4	; 0x04
    1f90:	89 2b       	or	r24, r25
    1f92:	8c 93       	st	X, r24
	TCNT1= (config_ptr-> initial_value);
    1f94:	ac e4       	ldi	r26, 0x4C	; 76
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	11 96       	adiw	r26, 0x01	; 1
    1fa2:	9c 93       	st	X, r25
    1fa4:	8e 93       	st	-X, r24

	/* to write in the compare register if it is compare mode*/
	if (config_ptr->mode==operation_CTC)
    1fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1faa:	85 81       	ldd	r24, Z+5	; 0x05
    1fac:	84 30       	cpi	r24, 0x04	; 4
    1fae:	89 f4       	brne	.+34     	; 0x1fd2 <Timer1_init+0xaa>
	{
		OCR1A= (config_ptr->compare_value);
    1fb0:	aa e4       	ldi	r26, 0x4A	; 74
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	11 96       	adiw	r26, 0x01	; 1
    1fbe:	9c 93       	st	X, r25
    1fc0:	8e 93       	st	-X, r24
		TIMSK|=(1<<OCIE1A);
    1fc2:	a9 e5       	ldi	r26, 0x59	; 89
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e9 e5       	ldi	r30, 0x59	; 89
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 61       	ori	r24, 0x10	; 16
    1fce:	8c 93       	st	X, r24
    1fd0:	0c c0       	rjmp	.+24     	; 0x1fea <Timer1_init+0xc2>

	}
	else if(config_ptr->mode==operation_normal)
    1fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd6:	85 81       	ldd	r24, Z+5	; 0x05
    1fd8:	88 23       	and	r24, r24
    1fda:	39 f4       	brne	.+14     	; 0x1fea <Timer1_init+0xc2>
		TIMSK|=(1<<TOIE1);
    1fdc:	a9 e5       	ldi	r26, 0x59	; 89
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e9 e5       	ldi	r30, 0x59	; 89
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	84 60       	ori	r24, 0x04	; 4
    1fe8:	8c 93       	st	X, r24


}
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <Timer1_setCallBack+0x6>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	90 93 84 00 	sts	0x0084, r25
    200a:	80 93 83 00 	sts	0x0083, r24
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <Timer1_deInit>:

/*function to deInit the timer to use it again with another settings or
 * to stop the timer */
void Timer1_deInit(void)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2020:	ef e4       	ldi	r30, 0x4F	; 79
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	10 82       	st	Z, r1
	TCCR1B=0;
    2026:	ee e4       	ldi	r30, 0x4E	; 78
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	10 82       	st	Z, r1
	TCNT1=0;
    202c:	ec e4       	ldi	r30, 0x4C	; 76
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	11 82       	std	Z+1, r1	; 0x01
    2032:	10 82       	st	Z, r1
	OCR1A=0;
    2034:	ea e4       	ldi	r30, 0x4A	; 74
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	11 82       	std	Z+1, r1	; 0x01
    203a:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    203c:	a9 e5       	ldi	r26, 0x59	; 89
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e9 e5       	ldi	r30, 0x59	; 89
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	8f 7e       	andi	r24, 0xEF	; 239
    2048:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
    204a:	a9 e5       	ldi	r26, 0x59	; 89
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e9 e5       	ldi	r30, 0x59	; 89
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	8b 7f       	andi	r24, 0xFB	; 251
    2056:	8c 93       	st	X, r24

}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * config_ptr)
{
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	00 d0       	rcall	.+0      	; 0x2068 <TWI_init+0xa>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
    /* configurable bit rate
     * make TWSP1 and TWSP0 to zero
      */

    TWBR = (((F_CPU/config_ptr->bit_rate)-(16))/(2));
    2070:	00 e2       	ldi	r16, 0x20	; 32
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	e9 81       	ldd	r30, Y+1	; 0x01
    2076:	fa 81       	ldd	r31, Y+2	; 0x02
    2078:	22 81       	ldd	r18, Z+2	; 0x02
    207a:	33 81       	ldd	r19, Z+3	; 0x03
    207c:	44 81       	ldd	r20, Z+4	; 0x04
    207e:	55 81       	ldd	r21, Z+5	; 0x05
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	92 e1       	ldi	r25, 0x12	; 18
    2084:	aa e7       	ldi	r26, 0x7A	; 122
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__udivmodsi4>
    2090:	da 01       	movw	r26, r20
    2092:	c9 01       	movw	r24, r18
    2094:	40 97       	sbiw	r24, 0x10	; 16
    2096:	a1 09       	sbc	r26, r1
    2098:	b1 09       	sbc	r27, r1
    209a:	b6 95       	lsr	r27
    209c:	a7 95       	ror	r26
    209e:	97 95       	ror	r25
    20a0:	87 95       	ror	r24
    20a2:	f8 01       	movw	r30, r16
    20a4:	80 83       	st	Z, r24
	TWSR = 0x00;
    20a6:	e1 e2       	ldi	r30, 0x21	; 33
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	10 82       	st	Z, r1
	
    /* configurable address */
    TWAR = ((TWAR &0xFE) | (config_ptr->adress <<1)) ;
    20ac:	a2 e2       	ldi	r26, 0x22	; 34
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e2 e2       	ldi	r30, 0x22	; 34
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	28 2f       	mov	r18, r24
    20b8:	2e 7f       	andi	r18, 0xFE	; 254
    20ba:	e9 81       	ldd	r30, Y+1	; 0x01
    20bc:	fa 81       	ldd	r31, Y+2	; 0x02
    20be:	80 81       	ld	r24, Z
    20c0:	91 81       	ldd	r25, Z+1	; 0x01
    20c2:	88 0f       	add	r24, r24
    20c4:	82 2b       	or	r24, r18
    20c6:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    20c8:	e6 e5       	ldi	r30, 0x56	; 86
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	84 e0       	ldi	r24, 0x04	; 4
    20ce:	80 83       	st	Z, r24
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	08 95       	ret

000020de <TWI_start>:

void TWI_start(void)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    20e6:	e6 e5       	ldi	r30, 0x56	; 86
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	84 ea       	ldi	r24, 0xA4	; 164
    20ec:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    20ee:	e6 e5       	ldi	r30, 0x56	; 86
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	88 23       	and	r24, r24
    20f6:	dc f7       	brge	.-10     	; 0x20ee <TWI_start+0x10>
}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <TWI_stop>:

void TWI_stop(void)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2106:	e6 e5       	ldi	r30, 0x56	; 86
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	84 e9       	ldi	r24, 0x94	; 148
    210c:	80 83       	st	Z, r24
}
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	0f 92       	push	r0
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2120:	e3 e2       	ldi	r30, 0x23	; 35
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2128:	e6 e5       	ldi	r30, 0x56	; 86
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	84 e8       	ldi	r24, 0x84	; 132
    212e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2130:	e6 e5       	ldi	r30, 0x56	; 86
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	88 23       	and	r24, r24
    2138:	dc f7       	brge	.-10     	; 0x2130 <TWI_writeByte+0x1c>
}
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    214a:	e6 e5       	ldi	r30, 0x56	; 86
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	84 ec       	ldi	r24, 0xC4	; 196
    2150:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2152:	e6 e5       	ldi	r30, 0x56	; 86
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	88 23       	and	r24, r24
    215a:	dc f7       	brge	.-10     	; 0x2152 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    215c:	e3 e2       	ldi	r30, 0x23	; 35
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
}
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2170:	e6 e5       	ldi	r30, 0x56	; 86
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	84 e8       	ldi	r24, 0x84	; 132
    2176:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2178:	e6 e5       	ldi	r30, 0x56	; 86
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	88 23       	and	r24, r24
    2180:	dc f7       	brge	.-10     	; 0x2178 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2182:	e3 e2       	ldi	r30, 0x23	; 35
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
}
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	0f 92       	push	r0
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2198:	e1 e2       	ldi	r30, 0x21	; 33
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	88 7f       	andi	r24, 0xF8	; 248
    21a0:	89 83       	std	Y+1, r24	; 0x01
    return status;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config_ptr)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <UART_init+0x6>
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <UART_init+0x8>
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    21bc:	1a 82       	std	Y+2, r1	; 0x02
    21be:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    21c0:	eb e2       	ldi	r30, 0x2B	; 43
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    21c8:	ea e2       	ldi	r30, 0x2A	; 42
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	88 e1       	ldi	r24, 0x18	; 24
    21ce:	80 83       	st	Z, r24
	 * UMSEL   = 0 Asynchronous Operation
	 * make the parity configurable
	 * make the stop bit configurable
	 * make the data bit configurable
	 */
	UCSRC = (1<<URSEL) ;
    21d0:	e0 e4       	ldi	r30, 0x40	; 64
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 e8       	ldi	r24, 0x80	; 128
    21d6:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) |( (config_ptr->parity) << 4);
    21d8:	a0 e4       	ldi	r26, 0x40	; 64
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e0 e4       	ldi	r30, 0x40	; 64
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	28 2f       	mov	r18, r24
    21e4:	2f 7c       	andi	r18, 0xCF	; 207
    21e6:	eb 81       	ldd	r30, Y+3	; 0x03
    21e8:	fc 81       	ldd	r31, Y+4	; 0x04
    21ea:	81 81       	ldd	r24, Z+1	; 0x01
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	82 95       	swap	r24
    21f2:	92 95       	swap	r25
    21f4:	90 7f       	andi	r25, 0xF0	; 240
    21f6:	98 27       	eor	r25, r24
    21f8:	80 7f       	andi	r24, 0xF0	; 240
    21fa:	98 27       	eor	r25, r24
    21fc:	82 2b       	or	r24, r18
    21fe:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) |( (config_ptr->stop_bit) << 3);
    2200:	a0 e4       	ldi	r26, 0x40	; 64
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e0 e4       	ldi	r30, 0x40	; 64
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	28 2f       	mov	r18, r24
    220c:	27 7f       	andi	r18, 0xF7	; 247
    220e:	eb 81       	ldd	r30, Y+3	; 0x03
    2210:	fc 81       	ldd	r31, Y+4	; 0x04
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	82 2b       	or	r24, r18
    2226:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) |( (config_ptr->bit_data) << 1);
    2228:	a0 e4       	ldi	r26, 0x40	; 64
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e0 e4       	ldi	r30, 0x40	; 64
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	28 2f       	mov	r18, r24
    2234:	29 7f       	andi	r18, 0xF9	; 249
    2236:	eb 81       	ldd	r30, Y+3	; 0x03
    2238:	fc 81       	ldd	r31, Y+4	; 0x04
    223a:	80 81       	ld	r24, Z
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	82 2b       	or	r24, r18
    2246:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((config_ptr->baud_rate) * 8UL))) - 1);
    2248:	eb 81       	ldd	r30, Y+3	; 0x03
    224a:	fc 81       	ldd	r31, Y+4	; 0x04
    224c:	83 81       	ldd	r24, Z+3	; 0x03
    224e:	94 81       	ldd	r25, Z+4	; 0x04
    2250:	a5 81       	ldd	r26, Z+5	; 0x05
    2252:	b6 81       	ldd	r27, Z+6	; 0x06
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	aa 1f       	adc	r26, r26
    225a:	bb 1f       	adc	r27, r27
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	aa 1f       	adc	r26, r26
    2262:	bb 1f       	adc	r27, r27
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	aa 1f       	adc	r26, r26
    226a:	bb 1f       	adc	r27, r27
    226c:	9c 01       	movw	r18, r24
    226e:	ad 01       	movw	r20, r26
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	92 e1       	ldi	r25, 0x12	; 18
    2274:	aa e7       	ldi	r26, 0x7A	; 122
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__udivmodsi4>
    2280:	da 01       	movw	r26, r20
    2282:	c9 01       	movw	r24, r18
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    228a:	e0 e4       	ldi	r30, 0x40	; 64
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	89 2f       	mov	r24, r25
    2294:	99 27       	eor	r25, r25
    2296:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2298:	e9 e2       	ldi	r30, 0x29	; 41
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	80 83       	st	Z, r24
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	0f 92       	push	r0
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    22ba:	eb e2       	ldi	r30, 0x2B	; 43
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	80 72       	andi	r24, 0x20	; 32
    22c6:	90 70       	andi	r25, 0x00	; 0
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	b9 f3       	breq	.-18     	; 0x22ba <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    22cc:	ec e2       	ldi	r30, 0x2C	; 44
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    22e4:	eb e2       	ldi	r30, 0x2B	; 43
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	88 23       	and	r24, r24
    22ec:	dc f7       	brge	.-10     	; 0x22e4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    22ee:	ec e2       	ldi	r30, 0x2C	; 44
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
}
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <UART_sendString+0x6>
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	9b 83       	std	Y+3, r25	; 0x03
    2308:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    230a:	19 82       	std	Y+1, r1	; 0x01
    230c:	0e c0       	rjmp	.+28     	; 0x232a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	9b 81       	ldd	r25, Y+3	; 0x03
    2318:	fc 01       	movw	r30, r24
    231a:	e2 0f       	add	r30, r18
    231c:	f3 1f       	adc	r31, r19
    231e:	80 81       	ld	r24, Z
    2320:	0e 94 57 11 	call	0x22ae	; 0x22ae <UART_sendByte>
		i++;
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	8f 5f       	subi	r24, 0xFF	; 255
    2328:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	fc 01       	movw	r30, r24
    2336:	e2 0f       	add	r30, r18
    2338:	f3 1f       	adc	r31, r19
    233a:	80 81       	ld	r24, Z
    233c:	88 23       	and	r24, r24
    233e:	39 f7       	brne	.-50     	; 0x230e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <UART_receiveString+0xa>
    2356:	0f 92       	push	r0
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	9b 83       	std	Y+3, r25	; 0x03
    235e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2360:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	9b 81       	ldd	r25, Y+3	; 0x03
    236c:	8c 01       	movw	r16, r24
    236e:	02 0f       	add	r16, r18
    2370:	13 1f       	adc	r17, r19
    2372:	0e 94 6e 11 	call	0x22dc	; 0x22dc <UART_recieveByte>
    2376:	f8 01       	movw	r30, r16
    2378:	80 83       	st	Z, r24
    237a:	0f c0       	rjmp	.+30     	; 0x239a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	8f 5f       	subi	r24, 0xFF	; 255
    2380:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	9b 81       	ldd	r25, Y+3	; 0x03
    238c:	8c 01       	movw	r16, r24
    238e:	02 0f       	add	r16, r18
    2390:	13 1f       	adc	r17, r19
    2392:	0e 94 6e 11 	call	0x22dc	; 0x22dc <UART_recieveByte>
    2396:	f8 01       	movw	r30, r16
    2398:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	9b 81       	ldd	r25, Y+3	; 0x03
    23a4:	fc 01       	movw	r30, r24
    23a6:	e2 0f       	add	r30, r18
    23a8:	f3 1f       	adc	r31, r19
    23aa:	80 81       	ld	r24, Z
    23ac:	83 32       	cpi	r24, 0x23	; 35
    23ae:	31 f7       	brne	.-52     	; 0x237c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ba:	fc 01       	movw	r30, r24
    23bc:	e2 0f       	add	r30, r18
    23be:	f3 1f       	adc	r31, r19
    23c0:	10 82       	st	Z, r1
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	08 95       	ret

000023d2 <__udivmodhi4>:
    23d2:	aa 1b       	sub	r26, r26
    23d4:	bb 1b       	sub	r27, r27
    23d6:	51 e1       	ldi	r21, 0x11	; 17
    23d8:	07 c0       	rjmp	.+14     	; 0x23e8 <__udivmodhi4_ep>

000023da <__udivmodhi4_loop>:
    23da:	aa 1f       	adc	r26, r26
    23dc:	bb 1f       	adc	r27, r27
    23de:	a6 17       	cp	r26, r22
    23e0:	b7 07       	cpc	r27, r23
    23e2:	10 f0       	brcs	.+4      	; 0x23e8 <__udivmodhi4_ep>
    23e4:	a6 1b       	sub	r26, r22
    23e6:	b7 0b       	sbc	r27, r23

000023e8 <__udivmodhi4_ep>:
    23e8:	88 1f       	adc	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	5a 95       	dec	r21
    23ee:	a9 f7       	brne	.-22     	; 0x23da <__udivmodhi4_loop>
    23f0:	80 95       	com	r24
    23f2:	90 95       	com	r25
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	08 95       	ret

000023fa <__udivmodsi4>:
    23fa:	a1 e2       	ldi	r26, 0x21	; 33
    23fc:	1a 2e       	mov	r1, r26
    23fe:	aa 1b       	sub	r26, r26
    2400:	bb 1b       	sub	r27, r27
    2402:	fd 01       	movw	r30, r26
    2404:	0d c0       	rjmp	.+26     	; 0x2420 <__udivmodsi4_ep>

00002406 <__udivmodsi4_loop>:
    2406:	aa 1f       	adc	r26, r26
    2408:	bb 1f       	adc	r27, r27
    240a:	ee 1f       	adc	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	a2 17       	cp	r26, r18
    2410:	b3 07       	cpc	r27, r19
    2412:	e4 07       	cpc	r30, r20
    2414:	f5 07       	cpc	r31, r21
    2416:	20 f0       	brcs	.+8      	; 0x2420 <__udivmodsi4_ep>
    2418:	a2 1b       	sub	r26, r18
    241a:	b3 0b       	sbc	r27, r19
    241c:	e4 0b       	sbc	r30, r20
    241e:	f5 0b       	sbc	r31, r21

00002420 <__udivmodsi4_ep>:
    2420:	66 1f       	adc	r22, r22
    2422:	77 1f       	adc	r23, r23
    2424:	88 1f       	adc	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	1a 94       	dec	r1
    242a:	69 f7       	brne	.-38     	; 0x2406 <__udivmodsi4_loop>
    242c:	60 95       	com	r22
    242e:	70 95       	com	r23
    2430:	80 95       	com	r24
    2432:	90 95       	com	r25
    2434:	9b 01       	movw	r18, r22
    2436:	ac 01       	movw	r20, r24
    2438:	bd 01       	movw	r22, r26
    243a:	cf 01       	movw	r24, r30
    243c:	08 95       	ret

0000243e <__prologue_saves__>:
    243e:	2f 92       	push	r2
    2440:	3f 92       	push	r3
    2442:	4f 92       	push	r4
    2444:	5f 92       	push	r5
    2446:	6f 92       	push	r6
    2448:	7f 92       	push	r7
    244a:	8f 92       	push	r8
    244c:	9f 92       	push	r9
    244e:	af 92       	push	r10
    2450:	bf 92       	push	r11
    2452:	cf 92       	push	r12
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	ca 1b       	sub	r28, r26
    2468:	db 0b       	sbc	r29, r27
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	09 94       	ijmp

00002476 <__epilogue_restores__>:
    2476:	2a 88       	ldd	r2, Y+18	; 0x12
    2478:	39 88       	ldd	r3, Y+17	; 0x11
    247a:	48 88       	ldd	r4, Y+16	; 0x10
    247c:	5f 84       	ldd	r5, Y+15	; 0x0f
    247e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2480:	7d 84       	ldd	r7, Y+13	; 0x0d
    2482:	8c 84       	ldd	r8, Y+12	; 0x0c
    2484:	9b 84       	ldd	r9, Y+11	; 0x0b
    2486:	aa 84       	ldd	r10, Y+10	; 0x0a
    2488:	b9 84       	ldd	r11, Y+9	; 0x09
    248a:	c8 84       	ldd	r12, Y+8	; 0x08
    248c:	df 80       	ldd	r13, Y+7	; 0x07
    248e:	ee 80       	ldd	r14, Y+6	; 0x06
    2490:	fd 80       	ldd	r15, Y+5	; 0x05
    2492:	0c 81       	ldd	r16, Y+4	; 0x04
    2494:	1b 81       	ldd	r17, Y+3	; 0x03
    2496:	aa 81       	ldd	r26, Y+2	; 0x02
    2498:	b9 81       	ldd	r27, Y+1	; 0x01
    249a:	ce 0f       	add	r28, r30
    249c:	d1 1d       	adc	r29, r1
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	ed 01       	movw	r28, r26
    24aa:	08 95       	ret

000024ac <_exit>:
    24ac:	f8 94       	cli

000024ae <__stop_program>:
    24ae:	ff cf       	rjmp	.-2      	; 0x24ae <__stop_program>
