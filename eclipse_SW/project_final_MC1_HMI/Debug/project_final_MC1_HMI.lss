
project_final_MC1_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00003752  000037e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800100  00800100  00003886  2**0
                  ALLOC
  3 .stab         000032f4  00000000  00000000  00003888  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010f8  00000000  00000000  00006b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b808  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b968  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bbf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 30       	cpi	r26, 0x00	; 0
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 32       	cpi	r26, 0x26	; 38
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <main>
      8a:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ee       	ldi	r26, 0xEB	; 235
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ee       	ldi	r24, 0xEB	; 235
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Set_Password>:
/* description:
 * function to set the password at first and make the user enter it and then re-enter it to
 * check if they are matched or not
 */
void Set_Password(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e0 97       	sbiw	r28, 0x30	; 48
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 m;
	uint8 i;
	uint8 p;

	do {
		Pass_Match=MATCHED;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 13 01 	sts	0x0113, r24
		LCD_clearScreen();
     b60:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
		LCD_displayString("plz Enter pass:");
     b64:	80 e6       	ldi	r24, 0x60	; 96
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
		LCD_moveCursor(1,0);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_moveCursor>

		while(KEYPAD_getPressedKey()=='='){}
     b74:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
     b78:	8d 33       	cpi	r24, 0x3D	; 61
     b7a:	e1 f3       	breq	.-8      	; 0xb74 <Set_Password+0x2e>
		for(k=0;k<5;k++) // To enter the password //
     b7c:	1e a6       	std	Y+46, r1	; 0x2e
     b7e:	85 c0       	rjmp	.+266    	; 0xc8a <Set_Password+0x144>
		{
		key1=KEYPAD_getPressedKey();
     b80:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
     b84:	88 ab       	std	Y+48, r24	; 0x30
		pass1[k]=key1;
     b86:	8e a5       	ldd	r24, Y+46	; 0x2e
     b88:	88 2f       	mov	r24, r24
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	fc 01       	movw	r30, r24
     b8e:	ec 5e       	subi	r30, 0xEC	; 236
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	88 a9       	ldd	r24, Y+48	; 0x30
     b94:	80 83       	st	Z, r24
		LCD_intgerToString(key1);
     b96:	88 a9       	ldd	r24, Y+48	; 0x30
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_intgerToString>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	aa ef       	ldi	r26, 0xFA	; 250
     ba6:	b3 e4       	ldi	r27, 0x43	; 67
     ba8:	8f a3       	std	Y+39, r24	; 0x27
     baa:	98 a7       	std	Y+40, r25	; 0x28
     bac:	a9 a7       	std	Y+41, r26	; 0x29
     bae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	6f a1       	ldd	r22, Y+39	; 0x27
     bb2:	78 a5       	ldd	r23, Y+40	; 0x28
     bb4:	89 a5       	ldd	r24, Y+41	; 0x29
     bb6:	9a a5       	ldd	r25, Y+42	; 0x2a
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4a ef       	ldi	r20, 0xFA	; 250
     bbe:	54 e4       	ldi	r21, 0x44	; 68
     bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	8b a3       	std	Y+35, r24	; 0x23
     bca:	9c a3       	std	Y+36, r25	; 0x24
     bcc:	ad a3       	std	Y+37, r26	; 0x25
     bce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bd0:	6b a1       	ldd	r22, Y+35	; 0x23
     bd2:	7c a1       	ldd	r23, Y+36	; 0x24
     bd4:	8d a1       	ldd	r24, Y+37	; 0x25
     bd6:	9e a1       	ldd	r25, Y+38	; 0x26
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e8       	ldi	r20, 0x80	; 128
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be4:	88 23       	and	r24, r24
     be6:	2c f4       	brge	.+10     	; 0xbf2 <Set_Password+0xac>
		__ticks = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	9a a3       	std	Y+34, r25	; 0x22
     bee:	89 a3       	std	Y+33, r24	; 0x21
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <Set_Password+0x12a>
	else if (__tmp > 65535)
     bf2:	6b a1       	ldd	r22, Y+35	; 0x23
     bf4:	7c a1       	ldd	r23, Y+36	; 0x24
     bf6:	8d a1       	ldd	r24, Y+37	; 0x25
     bf8:	9e a1       	ldd	r25, Y+38	; 0x26
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	3f ef       	ldi	r19, 0xFF	; 255
     bfe:	4f e7       	ldi	r20, 0x7F	; 127
     c00:	57 e4       	ldi	r21, 0x47	; 71
     c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c06:	18 16       	cp	r1, r24
     c08:	4c f5       	brge	.+82     	; 0xc5c <Set_Password+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0a:	6f a1       	ldd	r22, Y+39	; 0x27
     c0c:	78 a5       	ldd	r23, Y+40	; 0x28
     c0e:	89 a5       	ldd	r24, Y+41	; 0x29
     c10:	9a a5       	ldd	r25, Y+42	; 0x2a
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e2       	ldi	r20, 0x20	; 32
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	9a a3       	std	Y+34, r25	; 0x22
     c30:	89 a3       	std	Y+33, r24	; 0x21
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <Set_Password+0x10c>
     c34:	88 ec       	ldi	r24, 0xC8	; 200
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	98 a3       	std	Y+32, r25	; 0x20
     c3a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c3e:	98 a1       	ldd	r25, Y+32	; 0x20
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <Set_Password+0xfa>
     c44:	98 a3       	std	Y+32, r25	; 0x20
     c46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	89 a1       	ldd	r24, Y+33	; 0x21
     c4a:	9a a1       	ldd	r25, Y+34	; 0x22
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	9a a3       	std	Y+34, r25	; 0x22
     c50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	89 a1       	ldd	r24, Y+33	; 0x21
     c54:	9a a1       	ldd	r25, Y+34	; 0x22
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	69 f7       	brne	.-38     	; 0xc34 <Set_Password+0xee>
     c5a:	14 c0       	rjmp	.+40     	; 0xc84 <Set_Password+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5c:	6b a1       	ldd	r22, Y+35	; 0x23
     c5e:	7c a1       	ldd	r23, Y+36	; 0x24
     c60:	8d a1       	ldd	r24, Y+37	; 0x25
     c62:	9e a1       	ldd	r25, Y+38	; 0x26
     c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	9a a3       	std	Y+34, r25	; 0x22
     c6e:	89 a3       	std	Y+33, r24	; 0x21
     c70:	89 a1       	ldd	r24, Y+33	; 0x21
     c72:	9a a1       	ldd	r25, Y+34	; 0x22
     c74:	9e 8f       	std	Y+30, r25	; 0x1e
     c76:	8d 8f       	std	Y+29, r24	; 0x1d
     c78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <Set_Password+0x136>
     c80:	9e 8f       	std	Y+30, r25	; 0x1e
     c82:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_clearScreen();
		LCD_displayString("plz Enter pass:");
		LCD_moveCursor(1,0);

		while(KEYPAD_getPressedKey()=='='){}
		for(k=0;k<5;k++) // To enter the password //
     c84:	8e a5       	ldd	r24, Y+46	; 0x2e
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	8e a7       	std	Y+46, r24	; 0x2e
     c8a:	8e a5       	ldd	r24, Y+46	; 0x2e
     c8c:	85 30       	cpi	r24, 0x05	; 5
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <Set_Password+0x14c>
     c90:	77 cf       	rjmp	.-274    	; 0xb80 <Set_Password+0x3a>
		pass1[k]=key1;
		LCD_intgerToString(key1);
		_delay_ms(500);
		}

		while(KEYPAD_getPressedKey()!='='){} // wait till the user enter the ENTER button//
     c92:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
     c96:	8d 33       	cpi	r24, 0x3D	; 61
     c98:	e1 f7       	brne	.-8      	; 0xc92 <Set_Password+0x14c>

		LCD_clearScreen();
     c9a:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
		LCD_displayString("plz Re-Enter");
     c9e:	80 e7       	ldi	r24, 0x70	; 112
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
		LCD_moveCursor(1,1);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_moveCursor>
		LCD_displayString("pass:");
     cae:	8d e7       	ldi	r24, 0x7D	; 125
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>

		while(KEYPAD_getPressedKey()=='='){}
     cb6:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
     cba:	8d 33       	cpi	r24, 0x3D	; 61
     cbc:	e1 f3       	breq	.-8      	; 0xcb6 <Set_Password+0x170>

		for(m=0;m<5;m++) // to Re-enter the password//
     cbe:	1d a6       	std	Y+45, r1	; 0x2d
     cc0:	85 c0       	rjmp	.+266    	; 0xdcc <Set_Password+0x286>
		{
			key2=KEYPAD_getPressedKey();
     cc2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
     cc6:	8f a7       	std	Y+47, r24	; 0x2f
			pass2[m]=key2;
     cc8:	8d a5       	ldd	r24, Y+45	; 0x2d
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	fc 01       	movw	r30, r24
     cd0:	e9 5f       	subi	r30, 0xF9	; 249
     cd2:	fe 4f       	sbci	r31, 0xFE	; 254
     cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
     cd6:	80 83       	st	Z, r24
			LCD_intgerToString(key2);
     cd8:	8f a5       	ldd	r24, Y+47	; 0x2f
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_intgerToString>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	aa ef       	ldi	r26, 0xFA	; 250
     ce8:	b3 e4       	ldi	r27, 0x43	; 67
     cea:	89 8f       	std	Y+25, r24	; 0x19
     cec:	9a 8f       	std	Y+26, r25	; 0x1a
     cee:	ab 8f       	std	Y+27, r26	; 0x1b
     cf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf2:	69 8d       	ldd	r22, Y+25	; 0x19
     cf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	4a ef       	ldi	r20, 0xFA	; 250
     d00:	54 e4       	ldi	r21, 0x44	; 68
     d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	8d 8b       	std	Y+21, r24	; 0x15
     d0c:	9e 8b       	std	Y+22, r25	; 0x16
     d0e:	af 8b       	std	Y+23, r26	; 0x17
     d10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d12:	6d 89       	ldd	r22, Y+21	; 0x15
     d14:	7e 89       	ldd	r23, Y+22	; 0x16
     d16:	8f 89       	ldd	r24, Y+23	; 0x17
     d18:	98 8d       	ldd	r25, Y+24	; 0x18
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d26:	88 23       	and	r24, r24
     d28:	2c f4       	brge	.+10     	; 0xd34 <Set_Password+0x1ee>
		__ticks = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9c 8b       	std	Y+20, r25	; 0x14
     d30:	8b 8b       	std	Y+19, r24	; 0x13
     d32:	3f c0       	rjmp	.+126    	; 0xdb2 <Set_Password+0x26c>
	else if (__tmp > 65535)
     d34:	6d 89       	ldd	r22, Y+21	; 0x15
     d36:	7e 89       	ldd	r23, Y+22	; 0x16
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	98 8d       	ldd	r25, Y+24	; 0x18
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	4f e7       	ldi	r20, 0x7F	; 127
     d42:	57 e4       	ldi	r21, 0x47	; 71
     d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d48:	18 16       	cp	r1, r24
     d4a:	4c f5       	brge	.+82     	; 0xd9e <Set_Password+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4c:	69 8d       	ldd	r22, Y+25	; 0x19
     d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	51 e4       	ldi	r21, 0x41	; 65
     d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9c 8b       	std	Y+20, r25	; 0x14
     d72:	8b 8b       	std	Y+19, r24	; 0x13
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <Set_Password+0x24e>
     d76:	88 ec       	ldi	r24, 0xC8	; 200
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9a 8b       	std	Y+18, r25	; 0x12
     d7c:	89 8b       	std	Y+17, r24	; 0x11
     d7e:	89 89       	ldd	r24, Y+17	; 0x11
     d80:	9a 89       	ldd	r25, Y+18	; 0x12
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <Set_Password+0x23c>
     d86:	9a 8b       	std	Y+18, r25	; 0x12
     d88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	8b 89       	ldd	r24, Y+19	; 0x13
     d8c:	9c 89       	ldd	r25, Y+20	; 0x14
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	9c 8b       	std	Y+20, r25	; 0x14
     d92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d94:	8b 89       	ldd	r24, Y+19	; 0x13
     d96:	9c 89       	ldd	r25, Y+20	; 0x14
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	69 f7       	brne	.-38     	; 0xd76 <Set_Password+0x230>
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <Set_Password+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9e:	6d 89       	ldd	r22, Y+21	; 0x15
     da0:	7e 89       	ldd	r23, Y+22	; 0x16
     da2:	8f 89       	ldd	r24, Y+23	; 0x17
     da4:	98 8d       	ldd	r25, Y+24	; 0x18
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9c 8b       	std	Y+20, r25	; 0x14
     db0:	8b 8b       	std	Y+19, r24	; 0x13
     db2:	8b 89       	ldd	r24, Y+19	; 0x13
     db4:	9c 89       	ldd	r25, Y+20	; 0x14
     db6:	98 8b       	std	Y+16, r25	; 0x10
     db8:	8f 87       	std	Y+15, r24	; 0x0f
     dba:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbc:	98 89       	ldd	r25, Y+16	; 0x10
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <Set_Password+0x278>
     dc2:	98 8b       	std	Y+16, r25	; 0x10
     dc4:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_moveCursor(1,1);
		LCD_displayString("pass:");

		while(KEYPAD_getPressedKey()=='='){}

		for(m=0;m<5;m++) // to Re-enter the password//
     dc6:	8d a5       	ldd	r24, Y+45	; 0x2d
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	8d a7       	std	Y+45, r24	; 0x2d
     dcc:	8d a5       	ldd	r24, Y+45	; 0x2d
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <Set_Password+0x28e>
     dd2:	77 cf       	rjmp	.-274    	; 0xcc2 <Set_Password+0x17c>
			LCD_intgerToString(key2);
			_delay_ms(500);
		}


		while(KEYPAD_getPressedKey()!='='){} // wait till the user enter the ENTER button//
     dd4:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
     dd8:	8d 33       	cpi	r24, 0x3D	; 61
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <Set_Password+0x28e>

		for(i=0;i<5;i++) // to check if the two passwords are matched or not//
     ddc:	1c a6       	std	Y+44, r1	; 0x2c
     dde:	16 c0       	rjmp	.+44     	; 0xe0c <Set_Password+0x2c6>
		{
			if (pass1[i]!=pass2[i])
     de0:	8c a5       	ldd	r24, Y+44	; 0x2c
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	fc 01       	movw	r30, r24
     de8:	ec 5e       	subi	r30, 0xEC	; 236
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	20 81       	ld	r18, Z
     dee:	8c a5       	ldd	r24, Y+44	; 0x2c
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	fc 01       	movw	r30, r24
     df6:	e9 5f       	subi	r30, 0xF9	; 249
     df8:	fe 4f       	sbci	r31, 0xFE	; 254
     dfa:	80 81       	ld	r24, Z
     dfc:	28 17       	cp	r18, r24
     dfe:	19 f0       	breq	.+6      	; 0xe06 <Set_Password+0x2c0>
			{
				Pass_Match=UNMATCHED;
     e00:	10 92 13 01 	sts	0x0113, r1
     e04:	06 c0       	rjmp	.+12     	; 0xe12 <Set_Password+0x2cc>
		}


		while(KEYPAD_getPressedKey()!='='){} // wait till the user enter the ENTER button//

		for(i=0;i<5;i++) // to check if the two passwords are matched or not//
     e06:	8c a5       	ldd	r24, Y+44	; 0x2c
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	8c a7       	std	Y+44, r24	; 0x2c
     e0c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e0e:	85 30       	cpi	r24, 0x05	; 5
     e10:	38 f3       	brcs	.-50     	; 0xde0 <Set_Password+0x29a>
				Pass_Match=UNMATCHED;
				break;
			}
		}

		if (Pass_Match==MATCHED)// if the two passwords are matched the send it to the EEPROM//
     e12:	80 91 13 01 	lds	r24, 0x0113
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	09 f0       	breq	.+2      	; 0xe1c <Set_Password+0x2d6>
     e1a:	87 c0       	rjmp	.+270    	; 0xf2a <Set_Password+0x3e4>
		{
			UART_sendByte(MC1_IsReady_Matched);
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_sendByte>
			for(p=0;p<5;p++)
     e22:	1b a6       	std	Y+43, r1	; 0x2b
     e24:	7e c0       	rjmp	.+252    	; 0xf22 <Set_Password+0x3dc>
			{
				UART_sendByte(pass1[p]);
     e26:	8b a5       	ldd	r24, Y+43	; 0x2b
     e28:	88 2f       	mov	r24, r24
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	ec 5e       	subi	r30, 0xEC	; 236
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	80 81       	ld	r24, Z
     e34:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_sendByte>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a8 e4       	ldi	r26, 0x48	; 72
     e3e:	b2 e4       	ldi	r27, 0x42	; 66
     e40:	8b 87       	std	Y+11, r24	; 0x0b
     e42:	9c 87       	std	Y+12, r25	; 0x0c
     e44:	ad 87       	std	Y+13, r26	; 0x0d
     e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e48:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	4a ef       	ldi	r20, 0xFA	; 250
     e56:	54 e4       	ldi	r21, 0x44	; 68
     e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	8f 83       	std	Y+7, r24	; 0x07
     e62:	98 87       	std	Y+8, r25	; 0x08
     e64:	a9 87       	std	Y+9, r26	; 0x09
     e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e68:	6f 81       	ldd	r22, Y+7	; 0x07
     e6a:	78 85       	ldd	r23, Y+8	; 0x08
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e7c:	88 23       	and	r24, r24
     e7e:	2c f4       	brge	.+10     	; 0xe8a <Set_Password+0x344>
		__ticks = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <Set_Password+0x3c2>
	else if (__tmp > 65535)
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	4c f5       	brge	.+82     	; 0xef4 <Set_Password+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e2       	ldi	r20, 0x20	; 32
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	0f c0       	rjmp	.+30     	; 0xeea <Set_Password+0x3a4>
     ecc:	88 ec       	ldi	r24, 0xC8	; 200
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9c 83       	std	Y+4, r25	; 0x04
     ed2:	8b 83       	std	Y+3, r24	; 0x03
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <Set_Password+0x392>
     edc:	9c 83       	std	Y+4, r25	; 0x04
     ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	69 f7       	brne	.-38     	; 0xecc <Set_Password+0x386>
     ef2:	14 c0       	rjmp	.+40     	; 0xf1c <Set_Password+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef4:	6f 81       	ldd	r22, Y+7	; 0x07
     ef6:	78 85       	ldd	r23, Y+8	; 0x08
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <Set_Password+0x3ce>
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
		}

		if (Pass_Match==MATCHED)// if the two passwords are matched the send it to the EEPROM//
		{
			UART_sendByte(MC1_IsReady_Matched);
			for(p=0;p<5;p++)
     f1c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	8b a7       	std	Y+43, r24	; 0x2b
     f22:	8b a5       	ldd	r24, Y+43	; 0x2b
     f24:	85 30       	cpi	r24, 0x05	; 5
     f26:	08 f4       	brcc	.+2      	; 0xf2a <Set_Password+0x3e4>
     f28:	7e cf       	rjmp	.-260    	; 0xe26 <Set_Password+0x2e0>
				_delay_ms(50);
			}

		}

	} while (Pass_Match!=MATCHED); /* loop in the function till the two passwords are matched*/
     f2a:	80 91 13 01 	lds	r24, 0x0113
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	09 f0       	breq	.+2      	; 0xf34 <Set_Password+0x3ee>
     f32:	13 ce       	rjmp	.-986    	; 0xb5a <Set_Password+0x14>

}
     f34:	e0 96       	adiw	r28, 0x30	; 48
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <read_password>:
 * function to check if the entered password is correct or not
 * if the entered password is not correct for three consecutive times then a buzzer should operate
 * and display an ERROR message on the screen
 */
void read_password(void)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	af 97       	sbiw	r28, 0x2f	; 47
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 password_state;
	uint8 error_count=0;
     f5a:	1d a6       	std	Y+45, r1	; 0x2d
     f5c:	ac c1       	rjmp	.+856    	; 0x12b6 <read_password+0x370>
	uint8 key2;
	uint8 j;

	while(error_count<3)
	{
		LCD_clearScreen();
     f5e:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
		LCD_displayString("plz Enter pass:");
     f62:	80 e6       	ldi	r24, 0x60	; 96
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
		LCD_moveCursor(1,0);
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_moveCursor>

		while(KEYPAD_getPressedKey()=='='){}
     f72:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
     f76:	8d 33       	cpi	r24, 0x3D	; 61
     f78:	e1 f3       	breq	.-8      	; 0xf72 <read_password+0x2c>
		for(i=0;i<5;i++) // To enter the password //
     f7a:	1f a6       	std	Y+47, r1	; 0x2f
     f7c:	85 c0       	rjmp	.+266    	; 0x1088 <read_password+0x142>
		{
			key2=KEYPAD_getPressedKey();
     f7e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
     f82:	8c a7       	std	Y+44, r24	; 0x2c
			pass_Enter[i]=key2;
     f84:	8f a5       	ldd	r24, Y+47	; 0x2f
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	e2 5f       	subi	r30, 0xF2	; 242
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	8c a5       	ldd	r24, Y+44	; 0x2c
     f92:	80 83       	st	Z, r24
			LCD_intgerToString(key2);
     f94:	8c a5       	ldd	r24, Y+44	; 0x2c
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_intgerToString>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	aa ef       	ldi	r26, 0xFA	; 250
     fa4:	b3 e4       	ldi	r27, 0x43	; 67
     fa6:	8f a3       	std	Y+39, r24	; 0x27
     fa8:	98 a7       	std	Y+40, r25	; 0x28
     faa:	a9 a7       	std	Y+41, r26	; 0x29
     fac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fae:	6f a1       	ldd	r22, Y+39	; 0x27
     fb0:	78 a5       	ldd	r23, Y+40	; 0x28
     fb2:	89 a5       	ldd	r24, Y+41	; 0x29
     fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	4a ef       	ldi	r20, 0xFA	; 250
     fbc:	54 e4       	ldi	r21, 0x44	; 68
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	8b a3       	std	Y+35, r24	; 0x23
     fc8:	9c a3       	std	Y+36, r25	; 0x24
     fca:	ad a3       	std	Y+37, r26	; 0x25
     fcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fce:	6b a1       	ldd	r22, Y+35	; 0x23
     fd0:	7c a1       	ldd	r23, Y+36	; 0x24
     fd2:	8d a1       	ldd	r24, Y+37	; 0x25
     fd4:	9e a1       	ldd	r25, Y+38	; 0x26
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e8       	ldi	r20, 0x80	; 128
     fdc:	5f e3       	ldi	r21, 0x3F	; 63
     fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe2:	88 23       	and	r24, r24
     fe4:	2c f4       	brge	.+10     	; 0xff0 <read_password+0xaa>
		__ticks = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9a a3       	std	Y+34, r25	; 0x22
     fec:	89 a3       	std	Y+33, r24	; 0x21
     fee:	3f c0       	rjmp	.+126    	; 0x106e <read_password+0x128>
	else if (__tmp > 65535)
     ff0:	6b a1       	ldd	r22, Y+35	; 0x23
     ff2:	7c a1       	ldd	r23, Y+36	; 0x24
     ff4:	8d a1       	ldd	r24, Y+37	; 0x25
     ff6:	9e a1       	ldd	r25, Y+38	; 0x26
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	3f ef       	ldi	r19, 0xFF	; 255
     ffc:	4f e7       	ldi	r20, 0x7F	; 127
     ffe:	57 e4       	ldi	r21, 0x47	; 71
    1000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1004:	18 16       	cp	r1, r24
    1006:	4c f5       	brge	.+82     	; 0x105a <read_password+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1008:	6f a1       	ldd	r22, Y+39	; 0x27
    100a:	78 a5       	ldd	r23, Y+40	; 0x28
    100c:	89 a5       	ldd	r24, Y+41	; 0x29
    100e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9a a3       	std	Y+34, r25	; 0x22
    102e:	89 a3       	std	Y+33, r24	; 0x21
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <read_password+0x10a>
    1032:	88 ec       	ldi	r24, 0xC8	; 200
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	98 a3       	std	Y+32, r25	; 0x20
    1038:	8f 8f       	std	Y+31, r24	; 0x1f
    103a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    103c:	98 a1       	ldd	r25, Y+32	; 0x20
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <read_password+0xf8>
    1042:	98 a3       	std	Y+32, r25	; 0x20
    1044:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	89 a1       	ldd	r24, Y+33	; 0x21
    1048:	9a a1       	ldd	r25, Y+34	; 0x22
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	9a a3       	std	Y+34, r25	; 0x22
    104e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1050:	89 a1       	ldd	r24, Y+33	; 0x21
    1052:	9a a1       	ldd	r25, Y+34	; 0x22
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	69 f7       	brne	.-38     	; 0x1032 <read_password+0xec>
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <read_password+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105a:	6b a1       	ldd	r22, Y+35	; 0x23
    105c:	7c a1       	ldd	r23, Y+36	; 0x24
    105e:	8d a1       	ldd	r24, Y+37	; 0x25
    1060:	9e a1       	ldd	r25, Y+38	; 0x26
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	9a a3       	std	Y+34, r25	; 0x22
    106c:	89 a3       	std	Y+33, r24	; 0x21
    106e:	89 a1       	ldd	r24, Y+33	; 0x21
    1070:	9a a1       	ldd	r25, Y+34	; 0x22
    1072:	9e 8f       	std	Y+30, r25	; 0x1e
    1074:	8d 8f       	std	Y+29, r24	; 0x1d
    1076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1078:	9e 8d       	ldd	r25, Y+30	; 0x1e
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <read_password+0x134>
    107e:	9e 8f       	std	Y+30, r25	; 0x1e
    1080:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_clearScreen();
		LCD_displayString("plz Enter pass:");
		LCD_moveCursor(1,0);

		while(KEYPAD_getPressedKey()=='='){}
		for(i=0;i<5;i++) // To enter the password //
    1082:	8f a5       	ldd	r24, Y+47	; 0x2f
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	8f a7       	std	Y+47, r24	; 0x2f
    1088:	8f a5       	ldd	r24, Y+47	; 0x2f
    108a:	85 30       	cpi	r24, 0x05	; 5
    108c:	08 f4       	brcc	.+2      	; 0x1090 <read_password+0x14a>
    108e:	77 cf       	rjmp	.-274    	; 0xf7e <read_password+0x38>
			pass_Enter[i]=key2;
			LCD_intgerToString(key2);
			_delay_ms(500);
		}

		while(UART_recieveByte()!=MC2_READY){}
    1090:	0e 94 8e 1a 	call	0x351c	; 0x351c <UART_recieveByte>
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	e1 f7       	brne	.-8      	; 0x1090 <read_password+0x14a>

		UART_sendByte(MC1_check_password);
    1098:	8c ef       	ldi	r24, 0xFC	; 252
    109a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_sendByte>

		while(UART_recieveByte()!=MC2_READY){}
    109e:	0e 94 8e 1a 	call	0x351c	; 0x351c <UART_recieveByte>
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	e1 f7       	brne	.-8      	; 0x109e <read_password+0x158>

		for(j=0;j<5;j++)
    10a6:	1b a6       	std	Y+43, r1	; 0x2b
    10a8:	7e c0       	rjmp	.+252    	; 0x11a6 <read_password+0x260>
		{
			UART_sendByte(pass_Enter[j]);
    10aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	fc 01       	movw	r30, r24
    10b2:	e2 5f       	subi	r30, 0xF2	; 242
    10b4:	fe 4f       	sbci	r31, 0xFE	; 254
    10b6:	80 81       	ld	r24, Z
    10b8:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_sendByte>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a8 e4       	ldi	r26, 0x48	; 72
    10c2:	b2 e4       	ldi	r27, 0x42	; 66
    10c4:	89 8f       	std	Y+25, r24	; 0x19
    10c6:	9a 8f       	std	Y+26, r25	; 0x1a
    10c8:	ab 8f       	std	Y+27, r26	; 0x1b
    10ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10cc:	69 8d       	ldd	r22, Y+25	; 0x19
    10ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	4a ef       	ldi	r20, 0xFA	; 250
    10da:	54 e4       	ldi	r21, 0x44	; 68
    10dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	8d 8b       	std	Y+21, r24	; 0x15
    10e6:	9e 8b       	std	Y+22, r25	; 0x16
    10e8:	af 8b       	std	Y+23, r26	; 0x17
    10ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10ec:	6d 89       	ldd	r22, Y+21	; 0x15
    10ee:	7e 89       	ldd	r23, Y+22	; 0x16
    10f0:	8f 89       	ldd	r24, Y+23	; 0x17
    10f2:	98 8d       	ldd	r25, Y+24	; 0x18
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e8       	ldi	r20, 0x80	; 128
    10fa:	5f e3       	ldi	r21, 0x3F	; 63
    10fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1100:	88 23       	and	r24, r24
    1102:	2c f4       	brge	.+10     	; 0x110e <read_password+0x1c8>
		__ticks = 1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9c 8b       	std	Y+20, r25	; 0x14
    110a:	8b 8b       	std	Y+19, r24	; 0x13
    110c:	3f c0       	rjmp	.+126    	; 0x118c <read_password+0x246>
	else if (__tmp > 65535)
    110e:	6d 89       	ldd	r22, Y+21	; 0x15
    1110:	7e 89       	ldd	r23, Y+22	; 0x16
    1112:	8f 89       	ldd	r24, Y+23	; 0x17
    1114:	98 8d       	ldd	r25, Y+24	; 0x18
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	3f ef       	ldi	r19, 0xFF	; 255
    111a:	4f e7       	ldi	r20, 0x7F	; 127
    111c:	57 e4       	ldi	r21, 0x47	; 71
    111e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1122:	18 16       	cp	r1, r24
    1124:	4c f5       	brge	.+82     	; 0x1178 <read_password+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1126:	69 8d       	ldd	r22, Y+25	; 0x19
    1128:	7a 8d       	ldd	r23, Y+26	; 0x1a
    112a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    112c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e2       	ldi	r20, 0x20	; 32
    1134:	51 e4       	ldi	r21, 0x41	; 65
    1136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9c 8b       	std	Y+20, r25	; 0x14
    114c:	8b 8b       	std	Y+19, r24	; 0x13
    114e:	0f c0       	rjmp	.+30     	; 0x116e <read_password+0x228>
    1150:	88 ec       	ldi	r24, 0xC8	; 200
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9a 8b       	std	Y+18, r25	; 0x12
    1156:	89 8b       	std	Y+17, r24	; 0x11
    1158:	89 89       	ldd	r24, Y+17	; 0x11
    115a:	9a 89       	ldd	r25, Y+18	; 0x12
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <read_password+0x216>
    1160:	9a 8b       	std	Y+18, r25	; 0x12
    1162:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1164:	8b 89       	ldd	r24, Y+19	; 0x13
    1166:	9c 89       	ldd	r25, Y+20	; 0x14
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	9c 8b       	std	Y+20, r25	; 0x14
    116c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116e:	8b 89       	ldd	r24, Y+19	; 0x13
    1170:	9c 89       	ldd	r25, Y+20	; 0x14
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	69 f7       	brne	.-38     	; 0x1150 <read_password+0x20a>
    1176:	14 c0       	rjmp	.+40     	; 0x11a0 <read_password+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1178:	6d 89       	ldd	r22, Y+21	; 0x15
    117a:	7e 89       	ldd	r23, Y+22	; 0x16
    117c:	8f 89       	ldd	r24, Y+23	; 0x17
    117e:	98 8d       	ldd	r25, Y+24	; 0x18
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9c 8b       	std	Y+20, r25	; 0x14
    118a:	8b 8b       	std	Y+19, r24	; 0x13
    118c:	8b 89       	ldd	r24, Y+19	; 0x13
    118e:	9c 89       	ldd	r25, Y+20	; 0x14
    1190:	98 8b       	std	Y+16, r25	; 0x10
    1192:	8f 87       	std	Y+15, r24	; 0x0f
    1194:	8f 85       	ldd	r24, Y+15	; 0x0f
    1196:	98 89       	ldd	r25, Y+16	; 0x10
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <read_password+0x252>
    119c:	98 8b       	std	Y+16, r25	; 0x10
    119e:	8f 87       	std	Y+15, r24	; 0x0f

		UART_sendByte(MC1_check_password);

		while(UART_recieveByte()!=MC2_READY){}

		for(j=0;j<5;j++)
    11a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	8b a7       	std	Y+43, r24	; 0x2b
    11a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11a8:	85 30       	cpi	r24, 0x05	; 5
    11aa:	08 f4       	brcc	.+2      	; 0x11ae <read_password+0x268>
    11ac:	7e cf       	rjmp	.-260    	; 0x10aa <read_password+0x164>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	aa ef       	ldi	r26, 0xFA	; 250
    11b4:	b4 e4       	ldi	r27, 0x44	; 68
    11b6:	8b 87       	std	Y+11, r24	; 0x0b
    11b8:	9c 87       	std	Y+12, r25	; 0x0c
    11ba:	ad 87       	std	Y+13, r26	; 0x0d
    11bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11be:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	4a ef       	ldi	r20, 0xFA	; 250
    11cc:	54 e4       	ldi	r21, 0x44	; 68
    11ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	8f 83       	std	Y+7, r24	; 0x07
    11d8:	98 87       	std	Y+8, r25	; 0x08
    11da:	a9 87       	std	Y+9, r26	; 0x09
    11dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11de:	6f 81       	ldd	r22, Y+7	; 0x07
    11e0:	78 85       	ldd	r23, Y+8	; 0x08
    11e2:	89 85       	ldd	r24, Y+9	; 0x09
    11e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e8       	ldi	r20, 0x80	; 128
    11ec:	5f e3       	ldi	r21, 0x3F	; 63
    11ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f2:	88 23       	and	r24, r24
    11f4:	2c f4       	brge	.+10     	; 0x1200 <read_password+0x2ba>
		__ticks = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <read_password+0x338>
	else if (__tmp > 65535)
    1200:	6f 81       	ldd	r22, Y+7	; 0x07
    1202:	78 85       	ldd	r23, Y+8	; 0x08
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	4f e7       	ldi	r20, 0x7F	; 127
    120e:	57 e4       	ldi	r21, 0x47	; 71
    1210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1214:	18 16       	cp	r1, r24
    1216:	4c f5       	brge	.+82     	; 0x126a <read_password+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1218:	6b 85       	ldd	r22, Y+11	; 0x0b
    121a:	7c 85       	ldd	r23, Y+12	; 0x0c
    121c:	8d 85       	ldd	r24, Y+13	; 0x0d
    121e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
    1240:	0f c0       	rjmp	.+30     	; 0x1260 <read_password+0x31a>
    1242:	88 ec       	ldi	r24, 0xC8	; 200
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9c 83       	std	Y+4, r25	; 0x04
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <read_password+0x308>
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	69 f7       	brne	.-38     	; 0x1242 <read_password+0x2fc>
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <read_password+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126a:	6f 81       	ldd	r22, Y+7	; 0x07
    126c:	78 85       	ldd	r23, Y+8	; 0x08
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	9a 85       	ldd	r25, Y+10	; 0x0a
    1272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9e 83       	std	Y+6, r25	; 0x06
    127c:	8d 83       	std	Y+5, r24	; 0x05
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <read_password+0x344>
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
		}

		_delay_ms(2000);

		password_state=UART_recieveByte(); /* receive the state of the password from MC2*/
    1292:	0e 94 8e 1a 	call	0x351c	; 0x351c <UART_recieveByte>
    1296:	8e a7       	std	Y+46, r24	; 0x2e


	if (password_state==CORRECT)
    1298:	8e a5       	ldd	r24, Y+46	; 0x2e
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	21 f4       	brne	.+8      	; 0x12a6 <read_password+0x360>
	{
		error_check=CLEAR;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	80 93 1f 01 	sts	0x011F, r24
    12a4:	15 c0       	rjmp	.+42     	; 0x12d0 <read_password+0x38a>
		return;
	}
	else if(password_state==IN_CORRECT)
    12a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    12a8:	88 23       	and	r24, r24
    12aa:	29 f4       	brne	.+10     	; 0x12b6 <read_password+0x370>
	{
		error_check=ERROR;
    12ac:	10 92 1f 01 	sts	0x011F, r1
		error_count++;
    12b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	8d a7       	std	Y+45, r24	; 0x2d
	uint8 password_state;
	uint8 error_count=0;
	uint8 key2;
	uint8 j;

	while(error_count<3)
    12b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	08 f4       	brcc	.+2      	; 0x12be <read_password+0x378>
    12bc:	50 ce       	rjmp	.-864    	; 0xf5e <read_password+0x18>
	}

	}


	while(UART_recieveByte()!=MC2_READY){} /* wait for MC2 to send a byte so that MC1 can send*/
    12be:	0e 94 8e 1a 	call	0x351c	; 0x351c <UART_recieveByte>
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	e1 f7       	brne	.-8      	; 0x12be <read_password+0x378>
	UART_sendByte(Fire_Buzzer);
    12c6:	84 e0       	ldi	r24, 0x04	; 4
    12c8:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_sendByte>

	message_error();
    12cc:	0e 94 7d 09 	call	0x12fa	; 0x12fa <message_error>

}
    12d0:	af 96       	adiw	r28, 0x2f	; 47
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <Timer1_processing>:

/* description:
 * call back function for Timer1 when an interrupt occurs
 */
void Timer1_processing(void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    12ea:	80 91 0d 01 	lds	r24, 0x010D
    12ee:	8f 5f       	subi	r24, 0xFF	; 255
    12f0:	80 93 0d 01 	sts	0x010D, r24
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <message_error>:

/* description:
 * function to display the error message on the screen
 */
void message_error(void)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	2b 97       	sbiw	r28, 0x0b	; 11
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType config_type={0,62500,PRESCALAR_8,operation_CTC};
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	98 87       	std	Y+8, r25	; 0x08
    1314:	8f 83       	std	Y+7, r24	; 0x07
    1316:	e3 ef       	ldi	r30, 0xF3	; 243
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	fa 87       	std	Y+10, r31	; 0x0a
    131c:	e9 87       	std	Y+9, r30	; 0x09
    131e:	f6 e0       	ldi	r31, 0x06	; 6
    1320:	fb 87       	std	Y+11, r31	; 0x0b
    1322:	e9 85       	ldd	r30, Y+9	; 0x09
    1324:	fa 85       	ldd	r31, Y+10	; 0x0a
    1326:	00 80       	ld	r0, Z
    1328:	89 85       	ldd	r24, Y+9	; 0x09
    132a:	9a 85       	ldd	r25, Y+10	; 0x0a
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	9a 87       	std	Y+10, r25	; 0x0a
    1330:	89 87       	std	Y+9, r24	; 0x09
    1332:	ef 81       	ldd	r30, Y+7	; 0x07
    1334:	f8 85       	ldd	r31, Y+8	; 0x08
    1336:	00 82       	st	Z, r0
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	98 87       	std	Y+8, r25	; 0x08
    1340:	8f 83       	std	Y+7, r24	; 0x07
    1342:	9b 85       	ldd	r25, Y+11	; 0x0b
    1344:	91 50       	subi	r25, 0x01	; 1
    1346:	9b 87       	std	Y+11, r25	; 0x0b
    1348:	eb 85       	ldd	r30, Y+11	; 0x0b
    134a:	ee 23       	and	r30, r30
    134c:	51 f7       	brne	.-44     	; 0x1322 <message_error+0x28>
	Timer1_init(&config_type);
    134e:	ce 01       	movw	r24, r28
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	0e 94 62 19 	call	0x32c4	; 0x32c4 <Timer1_init>
	Timer1_setCallBack(Timer1_processing);
    1356:	81 e7       	ldi	r24, 0x71	; 113
    1358:	99 e0       	ldi	r25, 0x09	; 9
    135a:	0e 94 c8 19 	call	0x3390	; 0x3390 <Timer1_setCallBack>
	g_tick=0;
    135e:	10 92 0d 01 	sts	0x010D, r1

	LCD_clearScreen();
    1362:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
	LCD_displayString("ERROR");
    1366:	83 e8       	ldi	r24, 0x83	; 131
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
	while(g_tick<120){}
    136e:	80 91 0d 01 	lds	r24, 0x010D
    1372:	88 37       	cpi	r24, 0x78	; 120
    1374:	e0 f3       	brcs	.-8      	; 0x136e <message_error+0x74>

	LCD_clearScreen();
    1376:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
}
    137a:	2b 96       	adiw	r28, 0x0b	; 11
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <Door_Choice>:
 * Function to open the door if the password is matched to the real password entered at first
 * rotate the motor CW for 15 sec then stop the motor for 3 sec
 * then rotate the motor ACW for 15sec
 */
void Door_Choice(void)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	ad 97       	sbiw	r28, 0x2d	; 45
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
	uint8 n;
	uint8 key;
	uint8 i;

	read_password();
    13a0:	0e 94 a3 07 	call	0xf46	; 0xf46 <read_password>


	if(error_check==CLEAR)
    13a4:	80 91 1f 01 	lds	r24, 0x011F
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <Door_Choice+0x22>
    13ac:	6f c1       	rjmp	.+734    	; 0x168c <Door_Choice+0x300>
	{
		LCD_clearScreen();
    13ae:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>

		while(UART_recieveByte()!=MC2_READY){}
    13b2:	0e 94 8e 1a 	call	0x351c	; 0x351c <UART_recieveByte>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <Door_Choice+0x26>

		UART_sendByte(DOOR_OPEN);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_sendByte>

		LCD_displayString("Door is unlocking");
    13c0:	89 e8       	ldi	r24, 0x89	; 137
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e6       	ldi	r25, 0x60	; 96
    13cc:	aa e6       	ldi	r26, 0x6A	; 106
    13ce:	b6 e4       	ldi	r27, 0x46	; 70
    13d0:	8f a3       	std	Y+39, r24	; 0x27
    13d2:	98 a7       	std	Y+40, r25	; 0x28
    13d4:	a9 a7       	std	Y+41, r26	; 0x29
    13d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d8:	6f a1       	ldd	r22, Y+39	; 0x27
    13da:	78 a5       	ldd	r23, Y+40	; 0x28
    13dc:	89 a5       	ldd	r24, Y+41	; 0x29
    13de:	9a a5       	ldd	r25, Y+42	; 0x2a
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	4a ef       	ldi	r20, 0xFA	; 250
    13e6:	54 e4       	ldi	r21, 0x44	; 68
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	8b a3       	std	Y+35, r24	; 0x23
    13f2:	9c a3       	std	Y+36, r25	; 0x24
    13f4:	ad a3       	std	Y+37, r26	; 0x25
    13f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13f8:	6b a1       	ldd	r22, Y+35	; 0x23
    13fa:	7c a1       	ldd	r23, Y+36	; 0x24
    13fc:	8d a1       	ldd	r24, Y+37	; 0x25
    13fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f e3       	ldi	r21, 0x3F	; 63
    1408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	2c f4       	brge	.+10     	; 0x141a <Door_Choice+0x8e>
		__ticks = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9a a3       	std	Y+34, r25	; 0x22
    1416:	89 a3       	std	Y+33, r24	; 0x21
    1418:	3f c0       	rjmp	.+126    	; 0x1498 <Door_Choice+0x10c>
	else if (__tmp > 65535)
    141a:	6b a1       	ldd	r22, Y+35	; 0x23
    141c:	7c a1       	ldd	r23, Y+36	; 0x24
    141e:	8d a1       	ldd	r24, Y+37	; 0x25
    1420:	9e a1       	ldd	r25, Y+38	; 0x26
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	3f ef       	ldi	r19, 0xFF	; 255
    1426:	4f e7       	ldi	r20, 0x7F	; 127
    1428:	57 e4       	ldi	r21, 0x47	; 71
    142a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142e:	18 16       	cp	r1, r24
    1430:	4c f5       	brge	.+82     	; 0x1484 <Door_Choice+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1432:	6f a1       	ldd	r22, Y+39	; 0x27
    1434:	78 a5       	ldd	r23, Y+40	; 0x28
    1436:	89 a5       	ldd	r24, Y+41	; 0x29
    1438:	9a a5       	ldd	r25, Y+42	; 0x2a
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9a a3       	std	Y+34, r25	; 0x22
    1458:	89 a3       	std	Y+33, r24	; 0x21
    145a:	0f c0       	rjmp	.+30     	; 0x147a <Door_Choice+0xee>
    145c:	88 ec       	ldi	r24, 0xC8	; 200
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	98 a3       	std	Y+32, r25	; 0x20
    1462:	8f 8f       	std	Y+31, r24	; 0x1f
    1464:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1466:	98 a1       	ldd	r25, Y+32	; 0x20
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <Door_Choice+0xdc>
    146c:	98 a3       	std	Y+32, r25	; 0x20
    146e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1470:	89 a1       	ldd	r24, Y+33	; 0x21
    1472:	9a a1       	ldd	r25, Y+34	; 0x22
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	9a a3       	std	Y+34, r25	; 0x22
    1478:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	89 a1       	ldd	r24, Y+33	; 0x21
    147c:	9a a1       	ldd	r25, Y+34	; 0x22
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	69 f7       	brne	.-38     	; 0x145c <Door_Choice+0xd0>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <Door_Choice+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1484:	6b a1       	ldd	r22, Y+35	; 0x23
    1486:	7c a1       	ldd	r23, Y+36	; 0x24
    1488:	8d a1       	ldd	r24, Y+37	; 0x25
    148a:	9e a1       	ldd	r25, Y+38	; 0x26
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9a a3       	std	Y+34, r25	; 0x22
    1496:	89 a3       	std	Y+33, r24	; 0x21
    1498:	89 a1       	ldd	r24, Y+33	; 0x21
    149a:	9a a1       	ldd	r25, Y+34	; 0x22
    149c:	9e 8f       	std	Y+30, r25	; 0x1e
    149e:	8d 8f       	std	Y+29, r24	; 0x1d
    14a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <Door_Choice+0x118>
    14a8:	9e 8f       	std	Y+30, r25	; 0x1e
    14aa:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(15000);
		LCD_clearScreen();
    14ac:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
		LCD_displayString("Motor off");
    14b0:	8b e9       	ldi	r24, 0x9B	; 155
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e8       	ldi	r25, 0x80	; 128
    14bc:	ab e3       	ldi	r26, 0x3B	; 59
    14be:	b5 e4       	ldi	r27, 0x45	; 69
    14c0:	89 8f       	std	Y+25, r24	; 0x19
    14c2:	9a 8f       	std	Y+26, r25	; 0x1a
    14c4:	ab 8f       	std	Y+27, r26	; 0x1b
    14c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c8:	69 8d       	ldd	r22, Y+25	; 0x19
    14ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a ef       	ldi	r20, 0xFA	; 250
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	8d 8b       	std	Y+21, r24	; 0x15
    14e2:	9e 8b       	std	Y+22, r25	; 0x16
    14e4:	af 8b       	std	Y+23, r26	; 0x17
    14e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14e8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ea:	7e 89       	ldd	r23, Y+22	; 0x16
    14ec:	8f 89       	ldd	r24, Y+23	; 0x17
    14ee:	98 8d       	ldd	r25, Y+24	; 0x18
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14fc:	88 23       	and	r24, r24
    14fe:	2c f4       	brge	.+10     	; 0x150a <Door_Choice+0x17e>
		__ticks = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9c 8b       	std	Y+20, r25	; 0x14
    1506:	8b 8b       	std	Y+19, r24	; 0x13
    1508:	3f c0       	rjmp	.+126    	; 0x1588 <Door_Choice+0x1fc>
	else if (__tmp > 65535)
    150a:	6d 89       	ldd	r22, Y+21	; 0x15
    150c:	7e 89       	ldd	r23, Y+22	; 0x16
    150e:	8f 89       	ldd	r24, Y+23	; 0x17
    1510:	98 8d       	ldd	r25, Y+24	; 0x18
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	3f ef       	ldi	r19, 0xFF	; 255
    1516:	4f e7       	ldi	r20, 0x7F	; 127
    1518:	57 e4       	ldi	r21, 0x47	; 71
    151a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    151e:	18 16       	cp	r1, r24
    1520:	4c f5       	brge	.+82     	; 0x1574 <Door_Choice+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1522:	69 8d       	ldd	r22, Y+25	; 0x19
    1524:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1526:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1528:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e2       	ldi	r20, 0x20	; 32
    1530:	51 e4       	ldi	r21, 0x41	; 65
    1532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9c 8b       	std	Y+20, r25	; 0x14
    1548:	8b 8b       	std	Y+19, r24	; 0x13
    154a:	0f c0       	rjmp	.+30     	; 0x156a <Door_Choice+0x1de>
    154c:	88 ec       	ldi	r24, 0xC8	; 200
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9a 8b       	std	Y+18, r25	; 0x12
    1552:	89 8b       	std	Y+17, r24	; 0x11
    1554:	89 89       	ldd	r24, Y+17	; 0x11
    1556:	9a 89       	ldd	r25, Y+18	; 0x12
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <Door_Choice+0x1cc>
    155c:	9a 8b       	std	Y+18, r25	; 0x12
    155e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1560:	8b 89       	ldd	r24, Y+19	; 0x13
    1562:	9c 89       	ldd	r25, Y+20	; 0x14
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	9c 8b       	std	Y+20, r25	; 0x14
    1568:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156a:	8b 89       	ldd	r24, Y+19	; 0x13
    156c:	9c 89       	ldd	r25, Y+20	; 0x14
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	69 f7       	brne	.-38     	; 0x154c <Door_Choice+0x1c0>
    1572:	14 c0       	rjmp	.+40     	; 0x159c <Door_Choice+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1574:	6d 89       	ldd	r22, Y+21	; 0x15
    1576:	7e 89       	ldd	r23, Y+22	; 0x16
    1578:	8f 89       	ldd	r24, Y+23	; 0x17
    157a:	98 8d       	ldd	r25, Y+24	; 0x18
    157c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9c 8b       	std	Y+20, r25	; 0x14
    1586:	8b 8b       	std	Y+19, r24	; 0x13
    1588:	8b 89       	ldd	r24, Y+19	; 0x13
    158a:	9c 89       	ldd	r25, Y+20	; 0x14
    158c:	98 8b       	std	Y+16, r25	; 0x10
    158e:	8f 87       	std	Y+15, r24	; 0x0f
    1590:	8f 85       	ldd	r24, Y+15	; 0x0f
    1592:	98 89       	ldd	r25, Y+16	; 0x10
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <Door_Choice+0x208>
    1598:	98 8b       	std	Y+16, r25	; 0x10
    159a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		LCD_clearScreen();
    159c:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
		LCD_displayString("Door is locking");
    15a0:	85 ea       	ldi	r24, 0xA5	; 165
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e6       	ldi	r25, 0x60	; 96
    15ac:	aa e6       	ldi	r26, 0x6A	; 106
    15ae:	b6 e4       	ldi	r27, 0x46	; 70
    15b0:	8b 87       	std	Y+11, r24	; 0x0b
    15b2:	9c 87       	std	Y+12, r25	; 0x0c
    15b4:	ad 87       	std	Y+13, r26	; 0x0d
    15b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    15bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15be:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4a ef       	ldi	r20, 0xFA	; 250
    15c6:	54 e4       	ldi	r21, 0x44	; 68
    15c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	8f 83       	std	Y+7, r24	; 0x07
    15d2:	98 87       	std	Y+8, r25	; 0x08
    15d4:	a9 87       	std	Y+9, r26	; 0x09
    15d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15d8:	6f 81       	ldd	r22, Y+7	; 0x07
    15da:	78 85       	ldd	r23, Y+8	; 0x08
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e8       	ldi	r20, 0x80	; 128
    15e6:	5f e3       	ldi	r21, 0x3F	; 63
    15e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ec:	88 23       	and	r24, r24
    15ee:	2c f4       	brge	.+10     	; 0x15fa <Door_Choice+0x26e>
		__ticks = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	3f c0       	rjmp	.+126    	; 0x1678 <Door_Choice+0x2ec>
	else if (__tmp > 65535)
    15fa:	6f 81       	ldd	r22, Y+7	; 0x07
    15fc:	78 85       	ldd	r23, Y+8	; 0x08
    15fe:	89 85       	ldd	r24, Y+9	; 0x09
    1600:	9a 85       	ldd	r25, Y+10	; 0x0a
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	57 e4       	ldi	r21, 0x47	; 71
    160a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    160e:	18 16       	cp	r1, r24
    1610:	4c f5       	brge	.+82     	; 0x1664 <Door_Choice+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1612:	6b 85       	ldd	r22, Y+11	; 0x0b
    1614:	7c 85       	ldd	r23, Y+12	; 0x0c
    1616:	8d 85       	ldd	r24, Y+13	; 0x0d
    1618:	9e 85       	ldd	r25, Y+14	; 0x0e
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e2       	ldi	r20, 0x20	; 32
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	0f c0       	rjmp	.+30     	; 0x165a <Door_Choice+0x2ce>
    163c:	88 ec       	ldi	r24, 0xC8	; 200
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	9c 83       	std	Y+4, r25	; 0x04
    1642:	8b 83       	std	Y+3, r24	; 0x03
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <Door_Choice+0x2bc>
    164c:	9c 83       	std	Y+4, r25	; 0x04
    164e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	69 f7       	brne	.-38     	; 0x163c <Door_Choice+0x2b0>
    1662:	14 c0       	rjmp	.+40     	; 0x168c <Door_Choice+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	6f 81       	ldd	r22, Y+7	; 0x07
    1666:	78 85       	ldd	r23, Y+8	; 0x08
    1668:	89 85       	ldd	r24, Y+9	; 0x09
    166a:	9a 85       	ldd	r25, Y+10	; 0x0a
    166c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <Door_Choice+0x2f8>
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15000);

	}
	LCD_clearScreen();
    168c:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>

	End_State();
    1690:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <End_State>
}
    1694:	ad 96       	adiw	r28, 0x2d	; 45
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <Change_Password_Choice>:
/* description:
 * Function to change the password of the system if the entered password is correct
 * and matched to the real password entered at first
 */
void Change_Password_Choice(void)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	e0 97       	sbiw	r28, 0x30	; 48
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
	uint8 m;
	uint8 key4;
	uint8 key5;
	uint8 p;

	LCD_clearScreen();
    16ba:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>

	read_password();
    16be:	0e 94 a3 07 	call	0xf46	; 0xf46 <read_password>

	if(error_check==CLEAR)
    16c2:	80 91 1f 01 	lds	r24, 0x011F
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	09 f0       	breq	.+2      	; 0x16cc <Change_Password_Choice+0x26>
    16ca:	f5 c1       	rjmp	.+1002   	; 0x1ab6 <Change_Password_Choice+0x410>
	{
		do {
		Pass_Match=MATCHED;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 13 01 	sts	0x0113, r24
		LCD_clearScreen();
    16d2:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
		LCD_displayString("Enter new pass");
    16d6:	85 eb       	ldi	r24, 0xB5	; 181
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
		LCD_moveCursor(1,0);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_moveCursor>


		while(KEYPAD_getPressedKey()=='='){}
    16e6:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    16ea:	8d 33       	cpi	r24, 0x3D	; 61
    16ec:	e1 f3       	breq	.-8      	; 0x16e6 <Change_Password_Choice+0x40>
		for(k=0;k<5;k++) // To enter the password //
    16ee:	1f a6       	std	Y+47, r1	; 0x2f
    16f0:	85 c0       	rjmp	.+266    	; 0x17fc <Change_Password_Choice+0x156>
		{
			key4=KEYPAD_getPressedKey();
    16f2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    16f6:	8d a7       	std	Y+45, r24	; 0x2d
			pass1[k]=key4;
    16f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	fc 01       	movw	r30, r24
    1700:	ec 5e       	subi	r30, 0xEC	; 236
    1702:	fe 4f       	sbci	r31, 0xFE	; 254
    1704:	8d a5       	ldd	r24, Y+45	; 0x2d
    1706:	80 83       	st	Z, r24
			LCD_intgerToString(key4);
    1708:	8d a5       	ldd	r24, Y+45	; 0x2d
    170a:	88 2f       	mov	r24, r24
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_intgerToString>
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	aa ef       	ldi	r26, 0xFA	; 250
    1718:	b3 e4       	ldi	r27, 0x43	; 67
    171a:	8f a3       	std	Y+39, r24	; 0x27
    171c:	98 a7       	std	Y+40, r25	; 0x28
    171e:	a9 a7       	std	Y+41, r26	; 0x29
    1720:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	6f a1       	ldd	r22, Y+39	; 0x27
    1724:	78 a5       	ldd	r23, Y+40	; 0x28
    1726:	89 a5       	ldd	r24, Y+41	; 0x29
    1728:	9a a5       	ldd	r25, Y+42	; 0x2a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8b a3       	std	Y+35, r24	; 0x23
    173c:	9c a3       	std	Y+36, r25	; 0x24
    173e:	ad a3       	std	Y+37, r26	; 0x25
    1740:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1742:	6b a1       	ldd	r22, Y+35	; 0x23
    1744:	7c a1       	ldd	r23, Y+36	; 0x24
    1746:	8d a1       	ldd	r24, Y+37	; 0x25
    1748:	9e a1       	ldd	r25, Y+38	; 0x26
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	5f e3       	ldi	r21, 0x3F	; 63
    1752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1756:	88 23       	and	r24, r24
    1758:	2c f4       	brge	.+10     	; 0x1764 <Change_Password_Choice+0xbe>
		__ticks = 1;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9a a3       	std	Y+34, r25	; 0x22
    1760:	89 a3       	std	Y+33, r24	; 0x21
    1762:	3f c0       	rjmp	.+126    	; 0x17e2 <Change_Password_Choice+0x13c>
	else if (__tmp > 65535)
    1764:	6b a1       	ldd	r22, Y+35	; 0x23
    1766:	7c a1       	ldd	r23, Y+36	; 0x24
    1768:	8d a1       	ldd	r24, Y+37	; 0x25
    176a:	9e a1       	ldd	r25, Y+38	; 0x26
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	4c f5       	brge	.+82     	; 0x17ce <Change_Password_Choice+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	6f a1       	ldd	r22, Y+39	; 0x27
    177e:	78 a5       	ldd	r23, Y+40	; 0x28
    1780:	89 a5       	ldd	r24, Y+41	; 0x29
    1782:	9a a5       	ldd	r25, Y+42	; 0x2a
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e2       	ldi	r20, 0x20	; 32
    178a:	51 e4       	ldi	r21, 0x41	; 65
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9a a3       	std	Y+34, r25	; 0x22
    17a2:	89 a3       	std	Y+33, r24	; 0x21
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <Change_Password_Choice+0x11e>
    17a6:	88 ec       	ldi	r24, 0xC8	; 200
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	98 a3       	std	Y+32, r25	; 0x20
    17ac:	8f 8f       	std	Y+31, r24	; 0x1f
    17ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17b0:	98 a1       	ldd	r25, Y+32	; 0x20
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <Change_Password_Choice+0x10c>
    17b6:	98 a3       	std	Y+32, r25	; 0x20
    17b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	89 a1       	ldd	r24, Y+33	; 0x21
    17bc:	9a a1       	ldd	r25, Y+34	; 0x22
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	9a a3       	std	Y+34, r25	; 0x22
    17c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	89 a1       	ldd	r24, Y+33	; 0x21
    17c6:	9a a1       	ldd	r25, Y+34	; 0x22
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <Change_Password_Choice+0x100>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <Change_Password_Choice+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	6b a1       	ldd	r22, Y+35	; 0x23
    17d0:	7c a1       	ldd	r23, Y+36	; 0x24
    17d2:	8d a1       	ldd	r24, Y+37	; 0x25
    17d4:	9e a1       	ldd	r25, Y+38	; 0x26
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9a a3       	std	Y+34, r25	; 0x22
    17e0:	89 a3       	std	Y+33, r24	; 0x21
    17e2:	89 a1       	ldd	r24, Y+33	; 0x21
    17e4:	9a a1       	ldd	r25, Y+34	; 0x22
    17e6:	9e 8f       	std	Y+30, r25	; 0x1e
    17e8:	8d 8f       	std	Y+29, r24	; 0x1d
    17ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <Change_Password_Choice+0x148>
    17f2:	9e 8f       	std	Y+30, r25	; 0x1e
    17f4:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayString("Enter new pass");
		LCD_moveCursor(1,0);


		while(KEYPAD_getPressedKey()=='='){}
		for(k=0;k<5;k++) // To enter the password //
    17f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f8:	8f 5f       	subi	r24, 0xFF	; 255
    17fa:	8f a7       	std	Y+47, r24	; 0x2f
    17fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17fe:	85 30       	cpi	r24, 0x05	; 5
    1800:	08 f4       	brcc	.+2      	; 0x1804 <Change_Password_Choice+0x15e>
    1802:	77 cf       	rjmp	.-274    	; 0x16f2 <Change_Password_Choice+0x4c>
			pass1[k]=key4;
			LCD_intgerToString(key4);
			_delay_ms(500);
		}

		while(KEYPAD_getPressedKey()!='='){} // wait till the user enter the ENTER button//
    1804:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    1808:	8d 33       	cpi	r24, 0x3D	; 61
    180a:	e1 f7       	brne	.-8      	; 0x1804 <Change_Password_Choice+0x15e>

		LCD_clearScreen();
    180c:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
		LCD_displayString("plz Re-Enter");
    1810:	80 e7       	ldi	r24, 0x70	; 112
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
		LCD_moveCursor(1,1);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_moveCursor>
		LCD_displayString("pass:");
    1820:	8d e7       	ldi	r24, 0x7D	; 125
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>

		while(KEYPAD_getPressedKey()=='='){}
    1828:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    182c:	8d 33       	cpi	r24, 0x3D	; 61
    182e:	e1 f3       	breq	.-8      	; 0x1828 <Change_Password_Choice+0x182>

		for(m=0;m<5;m++) // to Re-enter the password//
    1830:	1e a6       	std	Y+46, r1	; 0x2e
    1832:	85 c0       	rjmp	.+266    	; 0x193e <Change_Password_Choice+0x298>
		{
			key5=KEYPAD_getPressedKey();
    1834:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    1838:	8c a7       	std	Y+44, r24	; 0x2c
			pass2[m]=key5;
    183a:	8e a5       	ldd	r24, Y+46	; 0x2e
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	fc 01       	movw	r30, r24
    1842:	e9 5f       	subi	r30, 0xF9	; 249
    1844:	fe 4f       	sbci	r31, 0xFE	; 254
    1846:	8c a5       	ldd	r24, Y+44	; 0x2c
    1848:	80 83       	st	Z, r24
			LCD_intgerToString(key5);
    184a:	8c a5       	ldd	r24, Y+44	; 0x2c
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 5d 18 	call	0x30ba	; 0x30ba <LCD_intgerToString>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	aa ef       	ldi	r26, 0xFA	; 250
    185a:	b3 e4       	ldi	r27, 0x43	; 67
    185c:	89 8f       	std	Y+25, r24	; 0x19
    185e:	9a 8f       	std	Y+26, r25	; 0x1a
    1860:	ab 8f       	std	Y+27, r26	; 0x1b
    1862:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1864:	69 8d       	ldd	r22, Y+25	; 0x19
    1866:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    186a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a ef       	ldi	r20, 0xFA	; 250
    1872:	54 e4       	ldi	r21, 0x44	; 68
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8d 8b       	std	Y+21, r24	; 0x15
    187e:	9e 8b       	std	Y+22, r25	; 0x16
    1880:	af 8b       	std	Y+23, r26	; 0x17
    1882:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1884:	6d 89       	ldd	r22, Y+21	; 0x15
    1886:	7e 89       	ldd	r23, Y+22	; 0x16
    1888:	8f 89       	ldd	r24, Y+23	; 0x17
    188a:	98 8d       	ldd	r25, Y+24	; 0x18
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e8       	ldi	r20, 0x80	; 128
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1898:	88 23       	and	r24, r24
    189a:	2c f4       	brge	.+10     	; 0x18a6 <Change_Password_Choice+0x200>
		__ticks = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9c 8b       	std	Y+20, r25	; 0x14
    18a2:	8b 8b       	std	Y+19, r24	; 0x13
    18a4:	3f c0       	rjmp	.+126    	; 0x1924 <Change_Password_Choice+0x27e>
	else if (__tmp > 65535)
    18a6:	6d 89       	ldd	r22, Y+21	; 0x15
    18a8:	7e 89       	ldd	r23, Y+22	; 0x16
    18aa:	8f 89       	ldd	r24, Y+23	; 0x17
    18ac:	98 8d       	ldd	r25, Y+24	; 0x18
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	3f ef       	ldi	r19, 0xFF	; 255
    18b2:	4f e7       	ldi	r20, 0x7F	; 127
    18b4:	57 e4       	ldi	r21, 0x47	; 71
    18b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ba:	18 16       	cp	r1, r24
    18bc:	4c f5       	brge	.+82     	; 0x1910 <Change_Password_Choice+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18be:	69 8d       	ldd	r22, Y+25	; 0x19
    18c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e2       	ldi	r20, 0x20	; 32
    18cc:	51 e4       	ldi	r21, 0x41	; 65
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9c 8b       	std	Y+20, r25	; 0x14
    18e4:	8b 8b       	std	Y+19, r24	; 0x13
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <Change_Password_Choice+0x260>
    18e8:	88 ec       	ldi	r24, 0xC8	; 200
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9a 8b       	std	Y+18, r25	; 0x12
    18ee:	89 8b       	std	Y+17, r24	; 0x11
    18f0:	89 89       	ldd	r24, Y+17	; 0x11
    18f2:	9a 89       	ldd	r25, Y+18	; 0x12
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <Change_Password_Choice+0x24e>
    18f8:	9a 8b       	std	Y+18, r25	; 0x12
    18fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	8b 89       	ldd	r24, Y+19	; 0x13
    18fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	9c 8b       	std	Y+20, r25	; 0x14
    1904:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1906:	8b 89       	ldd	r24, Y+19	; 0x13
    1908:	9c 89       	ldd	r25, Y+20	; 0x14
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	69 f7       	brne	.-38     	; 0x18e8 <Change_Password_Choice+0x242>
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <Change_Password_Choice+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1910:	6d 89       	ldd	r22, Y+21	; 0x15
    1912:	7e 89       	ldd	r23, Y+22	; 0x16
    1914:	8f 89       	ldd	r24, Y+23	; 0x17
    1916:	98 8d       	ldd	r25, Y+24	; 0x18
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9c 8b       	std	Y+20, r25	; 0x14
    1922:	8b 8b       	std	Y+19, r24	; 0x13
    1924:	8b 89       	ldd	r24, Y+19	; 0x13
    1926:	9c 89       	ldd	r25, Y+20	; 0x14
    1928:	98 8b       	std	Y+16, r25	; 0x10
    192a:	8f 87       	std	Y+15, r24	; 0x0f
    192c:	8f 85       	ldd	r24, Y+15	; 0x0f
    192e:	98 89       	ldd	r25, Y+16	; 0x10
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <Change_Password_Choice+0x28a>
    1934:	98 8b       	std	Y+16, r25	; 0x10
    1936:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_moveCursor(1,1);
		LCD_displayString("pass:");

		while(KEYPAD_getPressedKey()=='='){}

		for(m=0;m<5;m++) // to Re-enter the password//
    1938:	8e a5       	ldd	r24, Y+46	; 0x2e
    193a:	8f 5f       	subi	r24, 0xFF	; 255
    193c:	8e a7       	std	Y+46, r24	; 0x2e
    193e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1940:	85 30       	cpi	r24, 0x05	; 5
    1942:	08 f4       	brcc	.+2      	; 0x1946 <Change_Password_Choice+0x2a0>
    1944:	77 cf       	rjmp	.-274    	; 0x1834 <Change_Password_Choice+0x18e>
			LCD_intgerToString(key5);
			_delay_ms(500);
		}


		while(KEYPAD_getPressedKey()!='='){} // wait till the user enter the ENTER button//
    1946:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    194a:	8d 33       	cpi	r24, 0x3D	; 61
    194c:	e1 f7       	brne	.-8      	; 0x1946 <Change_Password_Choice+0x2a0>

		for(i=0;i<5;i++) // to check if the two passwords are matched or not//
    194e:	18 aa       	std	Y+48, r1	; 0x30
    1950:	16 c0       	rjmp	.+44     	; 0x197e <Change_Password_Choice+0x2d8>
		{
			if (pass1[i]!=pass2[i])
    1952:	88 a9       	ldd	r24, Y+48	; 0x30
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	fc 01       	movw	r30, r24
    195a:	ec 5e       	subi	r30, 0xEC	; 236
    195c:	fe 4f       	sbci	r31, 0xFE	; 254
    195e:	20 81       	ld	r18, Z
    1960:	88 a9       	ldd	r24, Y+48	; 0x30
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	fc 01       	movw	r30, r24
    1968:	e9 5f       	subi	r30, 0xF9	; 249
    196a:	fe 4f       	sbci	r31, 0xFE	; 254
    196c:	80 81       	ld	r24, Z
    196e:	28 17       	cp	r18, r24
    1970:	19 f0       	breq	.+6      	; 0x1978 <Change_Password_Choice+0x2d2>
			{
				Pass_Match=UNMATCHED;
    1972:	10 92 13 01 	sts	0x0113, r1
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <Change_Password_Choice+0x2de>
		}


		while(KEYPAD_getPressedKey()!='='){} // wait till the user enter the ENTER button//

		for(i=0;i<5;i++) // to check if the two passwords are matched or not//
    1978:	88 a9       	ldd	r24, Y+48	; 0x30
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	88 ab       	std	Y+48, r24	; 0x30
    197e:	88 a9       	ldd	r24, Y+48	; 0x30
    1980:	85 30       	cpi	r24, 0x05	; 5
    1982:	38 f3       	brcs	.-50     	; 0x1952 <Change_Password_Choice+0x2ac>
			{
				Pass_Match=UNMATCHED;
				break;
			}
		}
		if (Pass_Match==MATCHED)// if the two passwords are matched the send it to the EEPROM//
    1984:	80 91 13 01 	lds	r24, 0x0113
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	09 f0       	breq	.+2      	; 0x198e <Change_Password_Choice+0x2e8>
    198c:	8f c0       	rjmp	.+286    	; 0x1aac <Change_Password_Choice+0x406>
		{
			while(UART_recieveByte()!=MC2_READY){}
    198e:	0e 94 8e 1a 	call	0x351c	; 0x351c <UART_recieveByte>
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	e1 f7       	brne	.-8      	; 0x198e <Change_Password_Choice+0x2e8>
			UART_sendByte(MC1_change_password);
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_sendByte>
			while(UART_recieveByte()!=MC2_READY){}
    199c:	0e 94 8e 1a 	call	0x351c	; 0x351c <UART_recieveByte>
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	e1 f7       	brne	.-8      	; 0x199c <Change_Password_Choice+0x2f6>
			for(p=0;p<5;p++)
    19a4:	1b a6       	std	Y+43, r1	; 0x2b
    19a6:	7e c0       	rjmp	.+252    	; 0x1aa4 <Change_Password_Choice+0x3fe>
			{
				UART_sendByte(pass1[p]);
    19a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	fc 01       	movw	r30, r24
    19b0:	ec 5e       	subi	r30, 0xEC	; 236
    19b2:	fe 4f       	sbci	r31, 0xFE	; 254
    19b4:	80 81       	ld	r24, Z
    19b6:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_sendByte>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a8 e4       	ldi	r26, 0x48	; 72
    19c0:	b2 e4       	ldi	r27, 0x42	; 66
    19c2:	8b 87       	std	Y+11, r24	; 0x0b
    19c4:	9c 87       	std	Y+12, r25	; 0x0c
    19c6:	ad 87       	std	Y+13, r26	; 0x0d
    19c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    19cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4a ef       	ldi	r20, 0xFA	; 250
    19d8:	54 e4       	ldi	r21, 0x44	; 68
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8f 83       	std	Y+7, r24	; 0x07
    19e4:	98 87       	std	Y+8, r25	; 0x08
    19e6:	a9 87       	std	Y+9, r26	; 0x09
    19e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ea:	6f 81       	ldd	r22, Y+7	; 0x07
    19ec:	78 85       	ldd	r23, Y+8	; 0x08
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	2c f4       	brge	.+10     	; 0x1a0c <Change_Password_Choice+0x366>
		__ticks = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	3f c0       	rjmp	.+126    	; 0x1a8a <Change_Password_Choice+0x3e4>
	else if (__tmp > 65535)
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	4c f5       	brge	.+82     	; 0x1a76 <Change_Password_Choice+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e2       	ldi	r20, 0x20	; 32
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <Change_Password_Choice+0x3c6>
    1a4e:	88 ec       	ldi	r24, 0xC8	; 200
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9c 83       	std	Y+4, r25	; 0x04
    1a54:	8b 83       	std	Y+3, r24	; 0x03
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <Change_Password_Choice+0x3b4>
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	69 f7       	brne	.-38     	; 0x1a4e <Change_Password_Choice+0x3a8>
    1a74:	14 c0       	rjmp	.+40     	; 0x1a9e <Change_Password_Choice+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <Change_Password_Choice+0x3f0>
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
		if (Pass_Match==MATCHED)// if the two passwords are matched the send it to the EEPROM//
		{
			while(UART_recieveByte()!=MC2_READY){}
			UART_sendByte(MC1_change_password);
			while(UART_recieveByte()!=MC2_READY){}
			for(p=0;p<5;p++)
    1a9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aa0:	8f 5f       	subi	r24, 0xFF	; 255
    1aa2:	8b a7       	std	Y+43, r24	; 0x2b
    1aa4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aa6:	85 30       	cpi	r24, 0x05	; 5
    1aa8:	08 f4       	brcc	.+2      	; 0x1aac <Change_Password_Choice+0x406>
    1aaa:	7e cf       	rjmp	.-260    	; 0x19a8 <Change_Password_Choice+0x302>
				UART_sendByte(pass1[p]);
				_delay_ms(50);
			}
		}

		} while(Pass_Match==UNMATCHED);
    1aac:	80 91 13 01 	lds	r24, 0x0113
    1ab0:	88 23       	and	r24, r24
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <Change_Password_Choice+0x410>
    1ab4:	0b ce       	rjmp	.-1002   	; 0x16cc <Change_Password_Choice+0x26>
	}


}
    1ab6:	e0 96       	adiw	r28, 0x30	; 48
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <End_State>:

void End_State(void)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	LCD_displayString("END!");
    1ad0:	84 ec       	ldi	r24, 0xC4	; 196
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
    1ad8:	ff cf       	rjmp	.-2      	; 0x1ad8 <End_State+0x10>

00001ada <main>:
	{

	}
}
int main(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	2c 97       	sbiw	r28, 0x0c	; 12
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61

	LCD_init(); /* to initialize LCD screen*/
    1aee:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <LCD_init>

	UART_ConfigType Config_Type={BITS_8,disabled_parity,BIT_1,9600};
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	99 87       	std	Y+9, r25	; 0x09
    1af8:	88 87       	std	Y+8, r24	; 0x08
    1afa:	e9 ef       	ldi	r30, 0xF9	; 249
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	fb 87       	std	Y+11, r31	; 0x0b
    1b00:	ea 87       	std	Y+10, r30	; 0x0a
    1b02:	f7 e0       	ldi	r31, 0x07	; 7
    1b04:	fc 87       	std	Y+12, r31	; 0x0c
    1b06:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b08:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b0a:	00 80       	ld	r0, Z
    1b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	9b 87       	std	Y+11, r25	; 0x0b
    1b14:	8a 87       	std	Y+10, r24	; 0x0a
    1b16:	e8 85       	ldd	r30, Y+8	; 0x08
    1b18:	f9 85       	ldd	r31, Y+9	; 0x09
    1b1a:	00 82       	st	Z, r0
    1b1c:	88 85       	ldd	r24, Y+8	; 0x08
    1b1e:	99 85       	ldd	r25, Y+9	; 0x09
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	99 87       	std	Y+9, r25	; 0x09
    1b24:	88 87       	std	Y+8, r24	; 0x08
    1b26:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b28:	91 50       	subi	r25, 0x01	; 1
    1b2a:	9c 87       	std	Y+12, r25	; 0x0c
    1b2c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b2e:	ee 23       	and	r30, r30
    1b30:	51 f7       	brne	.-44     	; 0x1b06 <main+0x2c>
	UART_init(&Config_Type); /* to initialize UART*/
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	0e 94 f6 19 	call	0x33ec	; 0x33ec <UART_init>
	SREG=(1<<7);
    1b3a:	ef e5       	ldi	r30, 0x5F	; 95
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 e8       	ldi	r24, 0x80	; 128
    1b40:	80 83       	st	Z, r24

	/* to call the function of the set password first*/
	Set_Password();
    1b42:	0e 94 a3 05 	call	0xb46	; 0xb46 <Set_Password>



	while(1)
	{
		LCD_clearScreen();
    1b46:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LCD_clearScreen>
		LCD_displayString("+ : open door");
    1b4a:	89 ec       	ldi	r24, 0xC9	; 201
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
		LCD_moveCursor(1,1);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_moveCursor>
		LCD_displayString("- : change password");
    1b5a:	87 ed       	ldi	r24, 0xD7	; 215
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>

		while(KEYPAD_getPressedKey()!='+' && KEYPAD_getPressedKey()!='-'){}
    1b62:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    1b66:	8b 32       	cpi	r24, 0x2B	; 43
    1b68:	21 f0       	breq	.+8      	; 0x1b72 <main+0x98>
    1b6a:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    1b6e:	8d 32       	cpi	r24, 0x2D	; 45
    1b70:	c1 f7       	brne	.-16     	; 0x1b62 <main+0x88>

		if(KEYPAD_getPressedKey()=='+')
    1b72:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    1b76:	8b 32       	cpi	r24, 0x2B	; 43
    1b78:	19 f4       	brne	.+6      	; 0x1b80 <main+0xa6>
		{
			Door_Choice();
    1b7a:	0e 94 c6 09 	call	0x138c	; 0x138c <Door_Choice>
    1b7e:	e3 cf       	rjmp	.-58     	; 0x1b46 <main+0x6c>

	}
		else if (KEYPAD_getPressedKey()=='-')
    1b80:	0e 94 51 11 	call	0x22a2	; 0x22a2 <KEYPAD_getPressedKey>
    1b84:	8d 32       	cpi	r24, 0x2D	; 45
    1b86:	f9 f6       	brne	.-66     	; 0x1b46 <main+0x6c>
		{
			Change_Password_Choice();
    1b88:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <Change_Password_Choice>
    1b8c:	dc cf       	rjmp	.-72     	; 0x1b46 <main+0x6c>

00001b8e <GPIO_setUpPinDirection>:
/* description:
 * function to determine the direction of the pin wethere input or output
 * if the pin number or port number is not correct, the function will do nothing
 */
void GPIO_setUpPinDirection(uint8 port_num, uint8 pin_num, uint8 direction)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	27 97       	sbiw	r28, 0x07	; 7
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	6a 83       	std	Y+2, r22	; 0x02
    1ba6:	4b 83       	std	Y+3, r20	; 0x03
	/* to check if the number of port and number of pin is correct
	 * if not correct then the function will not handle the request
	 * if correct then switch on the port to setup the pin direction in each port
	 * */

	if ((port_num >= NUM_OF_PORTS ) | (pin_num>=NUM_OF_PINS) )
    1ba8:	1f 82       	std	Y+7, r1	; 0x07
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	84 30       	cpi	r24, 0x04	; 4
    1bae:	10 f0       	brcs	.+4      	; 0x1bb4 <GPIO_setUpPinDirection+0x26>
    1bb0:	21 e0       	ldi	r18, 0x01	; 1
    1bb2:	2f 83       	std	Y+7, r18	; 0x07
    1bb4:	1e 82       	std	Y+6, r1	; 0x06
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	88 30       	cpi	r24, 0x08	; 8
    1bba:	10 f0       	brcs	.+4      	; 0x1bc0 <GPIO_setUpPinDirection+0x32>
    1bbc:	31 e0       	ldi	r19, 0x01	; 1
    1bbe:	3e 83       	std	Y+6, r19	; 0x06
    1bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	89 2b       	or	r24, r25
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	89 27       	eor	r24, r25
    1bca:	88 23       	and	r24, r24
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <GPIO_setUpPinDirection+0x42>
    1bce:	d1 c0       	rjmp	.+418    	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
		/* Do nothing */
	}
	else {

	/* to check for the port and pin number and setup the pin direction*/
	switch(port_num)
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	3d 83       	std	Y+5, r19	; 0x05
    1bd8:	2c 83       	std	Y+4, r18	; 0x04
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	91 05       	cpc	r25, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <GPIO_setUpPinDirection+0x58>
    1be4:	43 c0       	rjmp	.+134    	; 0x1c6c <GPIO_setUpPinDirection+0xde>
    1be6:	2c 81       	ldd	r18, Y+4	; 0x04
    1be8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bea:	22 30       	cpi	r18, 0x02	; 2
    1bec:	31 05       	cpc	r19, r1
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <GPIO_setUpPinDirection+0x6c>
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	71 f0       	breq	.+28     	; 0x1c14 <GPIO_setUpPinDirection+0x86>
    1bf8:	bc c0       	rjmp	.+376    	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
    1bfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <GPIO_setUpPinDirection+0x78>
    1c04:	5f c0       	rjmp	.+190    	; 0x1cc4 <GPIO_setUpPinDirection+0x136>
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <GPIO_setUpPinDirection+0x84>
    1c10:	85 c0       	rjmp	.+266    	; 0x1d1c <GPIO_setUpPinDirection+0x18e>
    1c12:	af c0       	rjmp	.+350    	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
	{
	case PORTA_ID:
		if (direction == PIN_INPUT)
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 23       	and	r24, r24
    1c18:	a9 f4       	brne	.+42     	; 0x1c44 <GPIO_setUpPinDirection+0xb6>
			CLEAR_BIT(DDRA,pin_num);
    1c1a:	aa e3       	ldi	r26, 0x3A	; 58
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	ea e3       	ldi	r30, 0x3A	; 58
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <GPIO_setUpPinDirection+0xaa>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <GPIO_setUpPinDirection+0xa6>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	97 c0       	rjmp	.+302    	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
		else
			SET_BIT(DDRA,pin_num);
    1c44:	aa e3       	ldi	r26, 0x3A	; 58
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	ea e3       	ldi	r30, 0x3A	; 58
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 2e       	mov	r0, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <GPIO_setUpPinDirection+0xd4>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	0a 94       	dec	r0
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <GPIO_setUpPinDirection+0xd0>
    1c66:	84 2b       	or	r24, r20
    1c68:	8c 93       	st	X, r24
    1c6a:	83 c0       	rjmp	.+262    	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
		break;
	case PORTB_ID:
			if (direction==PIN_INPUT)
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	88 23       	and	r24, r24
    1c70:	a9 f4       	brne	.+42     	; 0x1c9c <GPIO_setUpPinDirection+0x10e>
				CLEAR_BIT(DDRB,pin_num);
    1c72:	a7 e3       	ldi	r26, 0x37	; 55
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e7 e3       	ldi	r30, 0x37	; 55
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	02 2e       	mov	r0, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <GPIO_setUpPinDirection+0x102>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	0a 94       	dec	r0
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <GPIO_setUpPinDirection+0xfe>
    1c94:	80 95       	com	r24
    1c96:	84 23       	and	r24, r20
    1c98:	8c 93       	st	X, r24
    1c9a:	6b c0       	rjmp	.+214    	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
			else
				SET_BIT(DDRB,pin_num);
    1c9c:	a7 e3       	ldi	r26, 0x37	; 55
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e7 e3       	ldi	r30, 0x37	; 55
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	48 2f       	mov	r20, r24
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	02 2e       	mov	r0, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <GPIO_setUpPinDirection+0x12c>
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	0a 94       	dec	r0
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <GPIO_setUpPinDirection+0x128>
    1cbe:	84 2b       	or	r24, r20
    1cc0:	8c 93       	st	X, r24
    1cc2:	57 c0       	rjmp	.+174    	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
			break;
	case PORTC_ID:
			if (direction==PIN_INPUT)
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	88 23       	and	r24, r24
    1cc8:	a9 f4       	brne	.+42     	; 0x1cf4 <GPIO_setUpPinDirection+0x166>
				CLEAR_BIT(DDRC,pin_num);
    1cca:	a4 e3       	ldi	r26, 0x34	; 52
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e4 e3       	ldi	r30, 0x34	; 52
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	48 2f       	mov	r20, r24
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <GPIO_setUpPinDirection+0x15a>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <GPIO_setUpPinDirection+0x156>
    1cec:	80 95       	com	r24
    1cee:	84 23       	and	r24, r20
    1cf0:	8c 93       	st	X, r24
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
			else
				SET_BIT(DDRC,pin_num);
    1cf4:	a4 e3       	ldi	r26, 0x34	; 52
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e4 e3       	ldi	r30, 0x34	; 52
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	48 2f       	mov	r20, r24
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	02 2e       	mov	r0, r18
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <GPIO_setUpPinDirection+0x184>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	0a 94       	dec	r0
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <GPIO_setUpPinDirection+0x180>
    1d16:	84 2b       	or	r24, r20
    1d18:	8c 93       	st	X, r24
    1d1a:	2b c0       	rjmp	.+86     	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
			break;
	case PORTD_ID:
			if (direction==PIN_INPUT)
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	88 23       	and	r24, r24
    1d20:	a9 f4       	brne	.+42     	; 0x1d4c <GPIO_setUpPinDirection+0x1be>
				CLEAR_BIT(DDRD,pin_num);
    1d22:	a1 e3       	ldi	r26, 0x31	; 49
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e1 e3       	ldi	r30, 0x31	; 49
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <GPIO_setUpPinDirection+0x1b2>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <GPIO_setUpPinDirection+0x1ae>
    1d44:	80 95       	com	r24
    1d46:	84 23       	and	r24, r20
    1d48:	8c 93       	st	X, r24
    1d4a:	13 c0       	rjmp	.+38     	; 0x1d72 <GPIO_setUpPinDirection+0x1e4>
			else
				SET_BIT(DDRD,pin_num);
    1d4c:	a1 e3       	ldi	r26, 0x31	; 49
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e1 e3       	ldi	r30, 0x31	; 49
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	48 2f       	mov	r20, r24
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 2e       	mov	r0, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <GPIO_setUpPinDirection+0x1dc>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	0a 94       	dec	r0
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <GPIO_setUpPinDirection+0x1d8>
    1d6e:	84 2b       	or	r24, r20
    1d70:	8c 93       	st	X, r24
			break;
	}
	}
}
    1d72:	27 96       	adiw	r28, 0x07	; 7
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <GPIO_writePin>:
 * function to set pin or clear pin
 * if the pin number or port number is not correct, the function will do nothing
 */

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	27 97       	sbiw	r28, 0x07	; 7
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	6a 83       	std	Y+2, r22	; 0x02
    1d9c:	4b 83       	std	Y+3, r20	; 0x03
	/* if the pin number or port number is not correct then the function will do nothing
	 */
	if ((port_num >= NUM_OF_PORTS ) | (pin_num>=NUM_OF_PINS) )
    1d9e:	1f 82       	std	Y+7, r1	; 0x07
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	84 30       	cpi	r24, 0x04	; 4
    1da4:	10 f0       	brcs	.+4      	; 0x1daa <GPIO_writePin+0x26>
    1da6:	21 e0       	ldi	r18, 0x01	; 1
    1da8:	2f 83       	std	Y+7, r18	; 0x07
    1daa:	1e 82       	std	Y+6, r1	; 0x06
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	88 30       	cpi	r24, 0x08	; 8
    1db0:	10 f0       	brcs	.+4      	; 0x1db6 <GPIO_writePin+0x32>
    1db2:	31 e0       	ldi	r19, 0x01	; 1
    1db4:	3e 83       	std	Y+6, r19	; 0x06
    1db6:	8f 81       	ldd	r24, Y+7	; 0x07
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	89 2b       	or	r24, r25
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	89 27       	eor	r24, r25
    1dc0:	88 23       	and	r24, r24
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <GPIO_writePin+0x42>
    1dc4:	d1 c0       	rjmp	.+418    	; 0x1f68 <GPIO_writePin+0x1e4>
	else {


	/* switch on the port number to set the required pin in the required port */

	switch(port_num)
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	3d 83       	std	Y+5, r19	; 0x05
    1dce:	2c 83       	std	Y+4, r18	; 0x04
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <GPIO_writePin+0x58>
    1dda:	43 c0       	rjmp	.+134    	; 0x1e62 <GPIO_writePin+0xde>
    1ddc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dde:	3d 81       	ldd	r19, Y+5	; 0x05
    1de0:	22 30       	cpi	r18, 0x02	; 2
    1de2:	31 05       	cpc	r19, r1
    1de4:	2c f4       	brge	.+10     	; 0x1df0 <GPIO_writePin+0x6c>
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	71 f0       	breq	.+28     	; 0x1e0a <GPIO_writePin+0x86>
    1dee:	bc c0       	rjmp	.+376    	; 0x1f68 <GPIO_writePin+0x1e4>
    1df0:	2c 81       	ldd	r18, Y+4	; 0x04
    1df2:	3d 81       	ldd	r19, Y+5	; 0x05
    1df4:	22 30       	cpi	r18, 0x02	; 2
    1df6:	31 05       	cpc	r19, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <GPIO_writePin+0x78>
    1dfa:	5f c0       	rjmp	.+190    	; 0x1eba <GPIO_writePin+0x136>
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	91 05       	cpc	r25, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <GPIO_writePin+0x84>
    1e06:	85 c0       	rjmp	.+266    	; 0x1f12 <GPIO_writePin+0x18e>
    1e08:	af c0       	rjmp	.+350    	; 0x1f68 <GPIO_writePin+0x1e4>
	{
	case PORTA_ID:
		if(value==LOGIC_HIGH)
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	a1 f4       	brne	.+40     	; 0x1e38 <GPIO_writePin+0xb4>
			SET_BIT(PORTA,pin_num);
    1e10:	ab e3       	ldi	r26, 0x3B	; 59
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	eb e3       	ldi	r30, 0x3B	; 59
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	02 2e       	mov	r0, r18
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <GPIO_writePin+0xaa>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	0a 94       	dec	r0
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <GPIO_writePin+0xa6>
    1e32:	84 2b       	or	r24, r20
    1e34:	8c 93       	st	X, r24
    1e36:	98 c0       	rjmp	.+304    	; 0x1f68 <GPIO_writePin+0x1e4>
		else
			CLEAR_BIT(PORTA,pin_num);
    1e38:	ab e3       	ldi	r26, 0x3B	; 59
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	eb e3       	ldi	r30, 0x3B	; 59
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	48 2f       	mov	r20, r24
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 2e       	mov	r0, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <GPIO_writePin+0xd2>
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	0a 94       	dec	r0
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <GPIO_writePin+0xce>
    1e5a:	80 95       	com	r24
    1e5c:	84 23       	and	r24, r20
    1e5e:	8c 93       	st	X, r24
    1e60:	83 c0       	rjmp	.+262    	; 0x1f68 <GPIO_writePin+0x1e4>
		break;
	case PORTB_ID:
			if(value==LOGIC_HIGH)
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	a1 f4       	brne	.+40     	; 0x1e90 <GPIO_writePin+0x10c>
				SET_BIT(PORTB,pin_num);
    1e68:	a8 e3       	ldi	r26, 0x38	; 56
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e8 e3       	ldi	r30, 0x38	; 56
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <GPIO_writePin+0x102>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <GPIO_writePin+0xfe>
    1e8a:	84 2b       	or	r24, r20
    1e8c:	8c 93       	st	X, r24
    1e8e:	6c c0       	rjmp	.+216    	; 0x1f68 <GPIO_writePin+0x1e4>
			else
				CLEAR_BIT(PORTB,pin_num);
    1e90:	a8 e3       	ldi	r26, 0x38	; 56
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e8 e3       	ldi	r30, 0x38	; 56
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 2e       	mov	r0, r18
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <GPIO_writePin+0x12a>
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	0a 94       	dec	r0
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <GPIO_writePin+0x126>
    1eb2:	80 95       	com	r24
    1eb4:	84 23       	and	r24, r20
    1eb6:	8c 93       	st	X, r24
    1eb8:	57 c0       	rjmp	.+174    	; 0x1f68 <GPIO_writePin+0x1e4>
			break;
	case PORTC_ID:
			if(value==LOGIC_HIGH)
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	a1 f4       	brne	.+40     	; 0x1ee8 <GPIO_writePin+0x164>
				SET_BIT(PORTC,pin_num);
    1ec0:	a5 e3       	ldi	r26, 0x35	; 53
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e5 e3       	ldi	r30, 0x35	; 53
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <GPIO_writePin+0x15a>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <GPIO_writePin+0x156>
    1ee2:	84 2b       	or	r24, r20
    1ee4:	8c 93       	st	X, r24
    1ee6:	40 c0       	rjmp	.+128    	; 0x1f68 <GPIO_writePin+0x1e4>
			else
				CLEAR_BIT(PORTC,pin_num);
    1ee8:	a5 e3       	ldi	r26, 0x35	; 53
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e5 e3       	ldi	r30, 0x35	; 53
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <GPIO_writePin+0x182>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <GPIO_writePin+0x17e>
    1f0a:	80 95       	com	r24
    1f0c:	84 23       	and	r24, r20
    1f0e:	8c 93       	st	X, r24
    1f10:	2b c0       	rjmp	.+86     	; 0x1f68 <GPIO_writePin+0x1e4>
			break;
	case PORTD_ID:
			if(value==LOGIC_HIGH)
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	a1 f4       	brne	.+40     	; 0x1f40 <GPIO_writePin+0x1bc>
				SET_BIT(PORTD,pin_num);
    1f18:	a2 e3       	ldi	r26, 0x32	; 50
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e2 e3       	ldi	r30, 0x32	; 50
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	48 2f       	mov	r20, r24
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	02 2e       	mov	r0, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <GPIO_writePin+0x1b2>
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <GPIO_writePin+0x1ae>
    1f3a:	84 2b       	or	r24, r20
    1f3c:	8c 93       	st	X, r24
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <GPIO_writePin+0x1e4>
			else
				CLEAR_BIT(PORTD,pin_num);
    1f40:	a2 e3       	ldi	r26, 0x32	; 50
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e2 e3       	ldi	r30, 0x32	; 50
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 2e       	mov	r0, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <GPIO_writePin+0x1da>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <GPIO_writePin+0x1d6>
    1f62:	80 95       	com	r24
    1f64:	84 23       	and	r24, r20
    1f66:	8c 93       	st	X, r24
			break;
	}
	}

}
    1f68:	27 96       	adiw	r28, 0x07	; 7
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <GPIO_readPin>:
/* description:
 * function to read the statues of the pin whether it is high or low
 * if the number of port of pin number is incorrect then the function return logic low
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	27 97       	sbiw	r28, 0x07	; 7
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	8a 83       	std	Y+2, r24	; 0x02
    1f90:	6b 83       	std	Y+3, r22	; 0x03
	uint8 statues;

	/* if the number of port of pin number is incorrect so return logic low */
	if ((port_num >= NUM_OF_PORTS ) | (pin_num>=NUM_OF_PINS) )
    1f92:	1f 82       	std	Y+7, r1	; 0x07
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	84 30       	cpi	r24, 0x04	; 4
    1f98:	10 f0       	brcs	.+4      	; 0x1f9e <GPIO_readPin+0x24>
    1f9a:	21 e0       	ldi	r18, 0x01	; 1
    1f9c:	2f 83       	std	Y+7, r18	; 0x07
    1f9e:	1e 82       	std	Y+6, r1	; 0x06
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	88 30       	cpi	r24, 0x08	; 8
    1fa4:	10 f0       	brcs	.+4      	; 0x1faa <GPIO_readPin+0x30>
    1fa6:	31 e0       	ldi	r19, 0x01	; 1
    1fa8:	3e 83       	std	Y+6, r19	; 0x06
    1faa:	8f 81       	ldd	r24, Y+7	; 0x07
    1fac:	4e 81       	ldd	r20, Y+6	; 0x06
    1fae:	84 2b       	or	r24, r20
    1fb0:	88 23       	and	r24, r24
    1fb2:	11 f0       	breq	.+4      	; 0x1fb8 <GPIO_readPin+0x3e>
	{
		statues=LOGIC_LOW;
    1fb4:	19 82       	std	Y+1, r1	; 0x01
    1fb6:	80 c0       	rjmp	.+256    	; 0x20b8 <GPIO_readPin+0x13e>


	/* read the required pin from the required port and return the statues
	 * of the pin whether 1 or 0 (SET OR CLEARED)
	 */
	switch(port_num)
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	3d 83       	std	Y+5, r19	; 0x05
    1fc0:	2c 83       	std	Y+4, r18	; 0x04
    1fc2:	4c 81       	ldd	r20, Y+4	; 0x04
    1fc4:	5d 81       	ldd	r21, Y+5	; 0x05
    1fc6:	41 30       	cpi	r20, 0x01	; 1
    1fc8:	51 05       	cpc	r21, r1
    1fca:	79 f1       	breq	.+94     	; 0x202a <GPIO_readPin+0xb0>
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	34 f4       	brge	.+12     	; 0x1fe2 <GPIO_readPin+0x68>
    1fd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fda:	21 15       	cp	r18, r1
    1fdc:	31 05       	cpc	r19, r1
    1fde:	69 f0       	breq	.+26     	; 0x1ffa <GPIO_readPin+0x80>
    1fe0:	6b c0       	rjmp	.+214    	; 0x20b8 <GPIO_readPin+0x13e>
    1fe2:	4c 81       	ldd	r20, Y+4	; 0x04
    1fe4:	5d 81       	ldd	r21, Y+5	; 0x05
    1fe6:	42 30       	cpi	r20, 0x02	; 2
    1fe8:	51 05       	cpc	r21, r1
    1fea:	b9 f1       	breq	.+110    	; 0x205a <GPIO_readPin+0xe0>
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	83 30       	cpi	r24, 0x03	; 3
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <GPIO_readPin+0x7e>
    1ff6:	49 c0       	rjmp	.+146    	; 0x208a <GPIO_readPin+0x110>
    1ff8:	5f c0       	rjmp	.+190    	; 0x20b8 <GPIO_readPin+0x13e>
	{
	case PORTA_ID:
		if (BIT_IS_SET(PINA,pin_num))
    1ffa:	e9 e3       	ldi	r30, 0x39	; 57
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a9 01       	movw	r20, r18
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <GPIO_readPin+0x98>
    200e:	55 95       	asr	r21
    2010:	47 95       	ror	r20
    2012:	8a 95       	dec	r24
    2014:	e2 f7       	brpl	.-8      	; 0x200e <GPIO_readPin+0x94>
    2016:	ca 01       	movw	r24, r20
    2018:	81 70       	andi	r24, 0x01	; 1
    201a:	90 70       	andi	r25, 0x00	; 0
    201c:	88 23       	and	r24, r24
    201e:	19 f0       	breq	.+6      	; 0x2026 <GPIO_readPin+0xac>
			statues=LOGIC_HIGH;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	49 c0       	rjmp	.+146    	; 0x20b8 <GPIO_readPin+0x13e>
		else
			statues=LOGIC_LOW;
    2026:	19 82       	std	Y+1, r1	; 0x01
    2028:	47 c0       	rjmp	.+142    	; 0x20b8 <GPIO_readPin+0x13e>
		break;
	case PORTB_ID:
			if (BIT_IS_SET(PINB,pin_num))
    202a:	e6 e3       	ldi	r30, 0x36	; 54
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	88 2f       	mov	r24, r24
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a9 01       	movw	r20, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <GPIO_readPin+0xc8>
    203e:	55 95       	asr	r21
    2040:	47 95       	ror	r20
    2042:	8a 95       	dec	r24
    2044:	e2 f7       	brpl	.-8      	; 0x203e <GPIO_readPin+0xc4>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	88 23       	and	r24, r24
    204e:	19 f0       	breq	.+6      	; 0x2056 <GPIO_readPin+0xdc>
				statues=LOGIC_HIGH;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	31 c0       	rjmp	.+98     	; 0x20b8 <GPIO_readPin+0x13e>
			else
				statues=LOGIC_LOW;
    2056:	19 82       	std	Y+1, r1	; 0x01
    2058:	2f c0       	rjmp	.+94     	; 0x20b8 <GPIO_readPin+0x13e>
			break;
	case PORTC_ID:
			if (BIT_IS_SET(PINC,pin_num))
    205a:	e3 e3       	ldi	r30, 0x33	; 51
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	88 2f       	mov	r24, r24
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a9 01       	movw	r20, r18
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <GPIO_readPin+0xf8>
    206e:	55 95       	asr	r21
    2070:	47 95       	ror	r20
    2072:	8a 95       	dec	r24
    2074:	e2 f7       	brpl	.-8      	; 0x206e <GPIO_readPin+0xf4>
    2076:	ca 01       	movw	r24, r20
    2078:	81 70       	andi	r24, 0x01	; 1
    207a:	90 70       	andi	r25, 0x00	; 0
    207c:	88 23       	and	r24, r24
    207e:	19 f0       	breq	.+6      	; 0x2086 <GPIO_readPin+0x10c>
				statues=LOGIC_HIGH;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	19 c0       	rjmp	.+50     	; 0x20b8 <GPIO_readPin+0x13e>
			else
				statues=LOGIC_LOW;
    2086:	19 82       	std	Y+1, r1	; 0x01
    2088:	17 c0       	rjmp	.+46     	; 0x20b8 <GPIO_readPin+0x13e>
			break;
	case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num))
    208a:	e0 e3       	ldi	r30, 0x30	; 48
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a9 01       	movw	r20, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <GPIO_readPin+0x128>
    209e:	55 95       	asr	r21
    20a0:	47 95       	ror	r20
    20a2:	8a 95       	dec	r24
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <GPIO_readPin+0x124>
    20a6:	ca 01       	movw	r24, r20
    20a8:	81 70       	andi	r24, 0x01	; 1
    20aa:	90 70       	andi	r25, 0x00	; 0
    20ac:	88 23       	and	r24, r24
    20ae:	19 f0       	breq	.+6      	; 0x20b6 <GPIO_readPin+0x13c>
				statues=LOGIC_HIGH;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <GPIO_readPin+0x13e>
			else
				statues=LOGIC_LOW;
    20b6:	19 82       	std	Y+1, r1	; 0x01
			break;

	}
	}
	return statues;
    20b8:	89 81       	ldd	r24, Y+1	; 0x01

}
    20ba:	27 96       	adiw	r28, 0x07	; 7
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <GPIO_setUpPortDirection>:
/* description:
 * function to determine the direction of the port wethere input or output
 * if the pin number or port number is not correct, the function will do nothing
 */
void GPIO_setUpPortDirection(uint8 port_num, uint8 direction)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <GPIO_setUpPortDirection+0x6>
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <GPIO_setUpPortDirection+0x8>
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	6a 83       	std	Y+2, r22	; 0x02
	/*if the  port number is not correct, do nothing*/
	if ((port_num >= NUM_OF_PORTS ) )
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	84 30       	cpi	r24, 0x04	; 4
    20e0:	08 f0       	brcs	.+2      	; 0x20e4 <GPIO_setUpPortDirection+0x18>
    20e2:	4e c0       	rjmp	.+156    	; 0x2180 <GPIO_setUpPortDirection+0xb4>


/* switch on the port to get the required port then set the whole port as input or
 * output
 */
	switch(port_num)
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	3c 83       	std	Y+4, r19	; 0x04
    20ec:	2b 83       	std	Y+3, r18	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	91 05       	cpc	r25, r1
    20f6:	09 f1       	breq	.+66     	; 0x213a <GPIO_setUpPortDirection+0x6e>
    20f8:	2b 81       	ldd	r18, Y+3	; 0x03
    20fa:	3c 81       	ldd	r19, Y+4	; 0x04
    20fc:	22 30       	cpi	r18, 0x02	; 2
    20fe:	31 05       	cpc	r19, r1
    2100:	2c f4       	brge	.+10     	; 0x210c <GPIO_setUpPortDirection+0x40>
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	61 f0       	breq	.+24     	; 0x2122 <GPIO_setUpPortDirection+0x56>
    210a:	3a c0       	rjmp	.+116    	; 0x2180 <GPIO_setUpPortDirection+0xb4>
    210c:	2b 81       	ldd	r18, Y+3	; 0x03
    210e:	3c 81       	ldd	r19, Y+4	; 0x04
    2110:	22 30       	cpi	r18, 0x02	; 2
    2112:	31 05       	cpc	r19, r1
    2114:	f1 f0       	breq	.+60     	; 0x2152 <GPIO_setUpPortDirection+0x86>
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	91 05       	cpc	r25, r1
    211e:	29 f1       	breq	.+74     	; 0x216a <GPIO_setUpPortDirection+0x9e>
    2120:	2f c0       	rjmp	.+94     	; 0x2180 <GPIO_setUpPortDirection+0xb4>
	{
	case PORTA_ID:
		if(direction==PORT_INPUT)
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	88 23       	and	r24, r24
    2126:	21 f4       	brne	.+8      	; 0x2130 <GPIO_setUpPortDirection+0x64>
			DDRA=0x00;
    2128:	ea e3       	ldi	r30, 0x3A	; 58
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	10 82       	st	Z, r1
    212e:	28 c0       	rjmp	.+80     	; 0x2180 <GPIO_setUpPortDirection+0xb4>
		else
			DDRA=0xFF;
    2130:	ea e3       	ldi	r30, 0x3A	; 58
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	8f ef       	ldi	r24, 0xFF	; 255
    2136:	80 83       	st	Z, r24
    2138:	23 c0       	rjmp	.+70     	; 0x2180 <GPIO_setUpPortDirection+0xb4>
		break;
	case PORTB_ID:
			if(direction==PORT_INPUT)
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	88 23       	and	r24, r24
    213e:	21 f4       	brne	.+8      	; 0x2148 <GPIO_setUpPortDirection+0x7c>
				DDRB=0x00;
    2140:	e7 e3       	ldi	r30, 0x37	; 55
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	10 82       	st	Z, r1
    2146:	1c c0       	rjmp	.+56     	; 0x2180 <GPIO_setUpPortDirection+0xb4>
			else
				DDRB=0xFF;
    2148:	e7 e3       	ldi	r30, 0x37	; 55
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	8f ef       	ldi	r24, 0xFF	; 255
    214e:	80 83       	st	Z, r24
    2150:	17 c0       	rjmp	.+46     	; 0x2180 <GPIO_setUpPortDirection+0xb4>
			break;
	case PORTC_ID:
				if(direction==PORT_INPUT)
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	88 23       	and	r24, r24
    2156:	21 f4       	brne	.+8      	; 0x2160 <GPIO_setUpPortDirection+0x94>
					DDRC=0x00;
    2158:	e4 e3       	ldi	r30, 0x34	; 52
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	10 82       	st	Z, r1
    215e:	10 c0       	rjmp	.+32     	; 0x2180 <GPIO_setUpPortDirection+0xb4>
				else
					DDRC=0xFF;
    2160:	e4 e3       	ldi	r30, 0x34	; 52
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	80 83       	st	Z, r24
    2168:	0b c0       	rjmp	.+22     	; 0x2180 <GPIO_setUpPortDirection+0xb4>
				break;
	case PORTD_ID:
				if(direction==PORT_INPUT)
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	88 23       	and	r24, r24
    216e:	21 f4       	brne	.+8      	; 0x2178 <GPIO_setUpPortDirection+0xac>
					DDRD=0x00;
    2170:	e1 e3       	ldi	r30, 0x31	; 49
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	10 82       	st	Z, r1
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <GPIO_setUpPortDirection+0xb4>
				else
					DDRD=0xFF;
    2178:	e1 e3       	ldi	r30, 0x31	; 49
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	80 83       	st	Z, r24
				break;
	}
	}
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <GPIO_writePort>:
/* description:
 * function to write on port a required value
 * if the pin number or port number is not correct, the function will do nothing
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <GPIO_writePort+0x6>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <GPIO_writePort+0x8>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	6a 83       	std	Y+2, r22	; 0x02
	/*if the port number is not correct, the function will do nothing*/
	if ((port_num >= NUM_OF_PORTS ))
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	84 30       	cpi	r24, 0x04	; 4
    21a2:	90 f5       	brcc	.+100    	; 0x2208 <GPIO_writePort+0x7a>
			/*do nothing*/
		}

	else {
		/* find the required port then write on the port the required value*/
		switch(port_num){
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	3c 83       	std	Y+4, r19	; 0x04
    21ac:	2b 83       	std	Y+3, r18	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	91 05       	cpc	r25, r1
    21b6:	d1 f0       	breq	.+52     	; 0x21ec <GPIO_writePort+0x5e>
    21b8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ba:	3c 81       	ldd	r19, Y+4	; 0x04
    21bc:	22 30       	cpi	r18, 0x02	; 2
    21be:	31 05       	cpc	r19, r1
    21c0:	2c f4       	brge	.+10     	; 0x21cc <GPIO_writePort+0x3e>
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	61 f0       	breq	.+24     	; 0x21e2 <GPIO_writePort+0x54>
    21ca:	1e c0       	rjmp	.+60     	; 0x2208 <GPIO_writePort+0x7a>
    21cc:	2b 81       	ldd	r18, Y+3	; 0x03
    21ce:	3c 81       	ldd	r19, Y+4	; 0x04
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	81 f0       	breq	.+32     	; 0x21f6 <GPIO_writePort+0x68>
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	91 05       	cpc	r25, r1
    21de:	81 f0       	breq	.+32     	; 0x2200 <GPIO_writePort+0x72>
    21e0:	13 c0       	rjmp	.+38     	; 0x2208 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA=value;
    21e2:	eb e3       	ldi	r30, 0x3B	; 59
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	80 83       	st	Z, r24
    21ea:	0e c0       	rjmp	.+28     	; 0x2208 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    21ec:	e8 e3       	ldi	r30, 0x38	; 56
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	80 83       	st	Z, r24
    21f4:	09 c0       	rjmp	.+18     	; 0x2208 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    21f6:	e5 e3       	ldi	r30, 0x35	; 53
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	80 83       	st	Z, r24
    21fe:	04 c0       	rjmp	.+8      	; 0x2208 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    2200:	e2 e3       	ldi	r30, 0x32	; 50
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	80 83       	st	Z, r24

		}

	}

}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <GPIO_readPort>:
/* description:
 * function to read the whole port and return it's value
 * if the port number or pin number is incorrect the function will return zero
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	00 d0       	rcall	.+0      	; 0x221c <GPIO_readPort+0x6>
    221c:	00 d0       	rcall	.+0      	; 0x221e <GPIO_readPort+0x8>
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value;
	/*if the port number is not correct, the function will do nothing*/
		if ((port_num >= NUM_OF_PORTS ))
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	84 30       	cpi	r24, 0x04	; 4
    2228:	10 f0       	brcs	.+4      	; 0x222e <GPIO_readPort+0x18>
			{
			port_value=0;
    222a:	19 82       	std	Y+1, r1	; 0x01
    222c:	32 c0       	rjmp	.+100    	; 0x2292 <GPIO_readPort+0x7c>
			}
		else
		{
			switch(port_num)
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	3c 83       	std	Y+4, r19	; 0x04
    2236:	2b 83       	std	Y+3, r18	; 0x03
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	91 05       	cpc	r25, r1
    2240:	d1 f0       	breq	.+52     	; 0x2276 <GPIO_readPort+0x60>
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	22 30       	cpi	r18, 0x02	; 2
    2248:	31 05       	cpc	r19, r1
    224a:	2c f4       	brge	.+10     	; 0x2256 <GPIO_readPort+0x40>
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	61 f0       	breq	.+24     	; 0x226c <GPIO_readPort+0x56>
    2254:	1e c0       	rjmp	.+60     	; 0x2292 <GPIO_readPort+0x7c>
    2256:	2b 81       	ldd	r18, Y+3	; 0x03
    2258:	3c 81       	ldd	r19, Y+4	; 0x04
    225a:	22 30       	cpi	r18, 0x02	; 2
    225c:	31 05       	cpc	r19, r1
    225e:	81 f0       	breq	.+32     	; 0x2280 <GPIO_readPort+0x6a>
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	83 30       	cpi	r24, 0x03	; 3
    2266:	91 05       	cpc	r25, r1
    2268:	81 f0       	breq	.+32     	; 0x228a <GPIO_readPort+0x74>
    226a:	13 c0       	rjmp	.+38     	; 0x2292 <GPIO_readPort+0x7c>
			{
			case PORTA_ID:
				port_value=PINA;
    226c:	e9 e3       	ldi	r30, 0x39	; 57
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	0e c0       	rjmp	.+28     	; 0x2292 <GPIO_readPort+0x7c>
				break;
			case PORTB_ID:
				port_value=PINB;
    2276:	e6 e3       	ldi	r30, 0x36	; 54
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	09 c0       	rjmp	.+18     	; 0x2292 <GPIO_readPort+0x7c>
				break;
			case PORTC_ID:
				port_value=PINC;
    2280:	e3 e3       	ldi	r30, 0x33	; 51
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	04 c0       	rjmp	.+8      	; 0x2292 <GPIO_readPort+0x7c>
				break;
			case PORTD_ID:
				port_value=PIND;
    228a:	e0 e3       	ldi	r30, 0x30	; 48
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	89 83       	std	Y+1, r24	; 0x01
				break;

			}
		}
		return port_value;
    2292:	89 81       	ldd	r24, Y+1	; 0x01
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	60 97       	sbiw	r28, 0x10	; 16
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setUpPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
	GPIO_setUpPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
	GPIO_setUpPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	62 e0       	ldi	r22, 0x02	; 2
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
	GPIO_setUpPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	63 e0       	ldi	r22, 0x03	; 3
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>

	GPIO_setUpPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	64 e0       	ldi	r22, 0x04	; 4
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
	GPIO_setUpPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	65 e0       	ldi	r22, 0x05	; 5
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
	GPIO_setUpPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	66 e0       	ldi	r22, 0x06	; 6
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setUpPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	67 e0       	ldi	r22, 0x07	; 7
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2306:	1f 86       	std	Y+15, r1	; 0x0f
    2308:	ab c0       	rjmp	.+342    	; 0x2460 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setUpPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	6f 85       	ldd	r22, Y+15	; 0x0f
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	6f 85       	ldd	r22, Y+15	; 0x0f
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <GPIO_writePin>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 ea       	ldi	r26, 0xA0	; 160
    2324:	b0 e4       	ldi	r27, 0x40	; 64
    2326:	8b 87       	std	Y+11, r24	; 0x0b
    2328:	9c 87       	std	Y+12, r25	; 0x0c
    232a:	ad 87       	std	Y+13, r26	; 0x0d
    232c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2330:	7c 85       	ldd	r23, Y+12	; 0x0c
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a ef       	ldi	r20, 0xFA	; 250
    233c:	54 e4       	ldi	r21, 0x44	; 68
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8f 83       	std	Y+7, r24	; 0x07
    2348:	98 87       	std	Y+8, r25	; 0x08
    234a:	a9 87       	std	Y+9, r26	; 0x09
    234c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <KEYPAD_getPressedKey+0xce>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <KEYPAD_getPressedKey+0x14c>
	else if (__tmp > 65535)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <KEYPAD_getPressedKey+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <KEYPAD_getPressedKey+0x12e>
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <KEYPAD_getPressedKey+0x11c>
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <KEYPAD_getPressedKey+0x110>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <KEYPAD_getPressedKey+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <KEYPAD_getPressedKey+0x158>
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01


			_delay_ms(5);
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2402:	18 8a       	std	Y+16, r1	; 0x10
    2404:	22 c0       	rjmp	.+68     	; 0x244a <KEYPAD_getPressedKey+0x1a8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2406:	88 89       	ldd	r24, Y+16	; 0x10
    2408:	98 2f       	mov	r25, r24
    240a:	9c 5f       	subi	r25, 0xFC	; 252
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	69 2f       	mov	r22, r25
    2410:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <GPIO_readPin>
    2414:	88 23       	and	r24, r24
    2416:	b1 f4       	brne	.+44     	; 0x2444 <KEYPAD_getPressedKey+0x1a2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2418:	8f 85       	ldd	r24, Y+15	; 0x0f
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	98 2f       	mov	r25, r24
    2428:	88 89       	ldd	r24, Y+16	; 0x10
    242a:	89 0f       	add	r24, r25
    242c:	8f 5f       	subi	r24, 0xFF	; 255
    242e:	0e 94 35 12 	call	0x246a	; 0x246a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setUpPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}

	}	
}
    2432:	60 96       	adiw	r28, 0x10	; 16
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);


			_delay_ms(5);
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2444:	88 89       	ldd	r24, Y+16	; 0x10
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	88 8b       	std	Y+16, r24	; 0x10
    244a:	88 89       	ldd	r24, Y+16	; 0x10
    244c:	84 30       	cpi	r24, 0x04	; 4
    244e:	d8 f2       	brcs	.-74     	; 0x2406 <KEYPAD_getPressedKey+0x164>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setUpPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	6f 85       	ldd	r22, Y+15	; 0x0f
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setUpPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    245a:	8f 85       	ldd	r24, Y+15	; 0x0f
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	8f 87       	std	Y+15, r24	; 0x0f
    2460:	8f 85       	ldd	r24, Y+15	; 0x0f
    2462:	84 30       	cpi	r24, 0x04	; 4
    2464:	08 f4       	brcc	.+2      	; 0x2468 <KEYPAD_getPressedKey+0x1c6>
    2466:	51 cf       	rjmp	.-350    	; 0x230a <KEYPAD_getPressedKey+0x68>
    2468:	4e cf       	rjmp	.-356    	; 0x2306 <KEYPAD_getPressedKey+0x64>

0000246a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2478:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	3c 83       	std	Y+4, r19	; 0x04
    2482:	2b 83       	std	Y+3, r18	; 0x03
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	88 30       	cpi	r24, 0x08	; 8
    248a:	91 05       	cpc	r25, r1
    248c:	09 f4       	brne	.+2      	; 0x2490 <KEYPAD_4x4_adjustKeyNumber+0x26>
    248e:	70 c0       	rjmp	.+224    	; 0x2570 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2490:	2b 81       	ldd	r18, Y+3	; 0x03
    2492:	3c 81       	ldd	r19, Y+4	; 0x04
    2494:	29 30       	cpi	r18, 0x09	; 9
    2496:	31 05       	cpc	r19, r1
    2498:	5c f5       	brge	.+86     	; 0x24f0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	84 30       	cpi	r24, 0x04	; 4
    24a0:	91 05       	cpc	r25, r1
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    24a4:	59 c0       	rjmp	.+178    	; 0x2558 <KEYPAD_4x4_adjustKeyNumber+0xee>
    24a6:	2b 81       	ldd	r18, Y+3	; 0x03
    24a8:	3c 81       	ldd	r19, Y+4	; 0x04
    24aa:	25 30       	cpi	r18, 0x05	; 5
    24ac:	31 05       	cpc	r19, r1
    24ae:	9c f4       	brge	.+38     	; 0x24d6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	82 30       	cpi	r24, 0x02	; 2
    24b6:	91 05       	cpc	r25, r1
    24b8:	09 f4       	brne	.+2      	; 0x24bc <KEYPAD_4x4_adjustKeyNumber+0x52>
    24ba:	48 c0       	rjmp	.+144    	; 0x254c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    24bc:	2b 81       	ldd	r18, Y+3	; 0x03
    24be:	3c 81       	ldd	r19, Y+4	; 0x04
    24c0:	23 30       	cpi	r18, 0x03	; 3
    24c2:	31 05       	cpc	r19, r1
    24c4:	0c f0       	brlt	.+2      	; 0x24c8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    24c6:	45 c0       	rjmp	.+138    	; 0x2552 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	81 30       	cpi	r24, 0x01	; 1
    24ce:	91 05       	cpc	r25, r1
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    24d2:	39 c0       	rjmp	.+114    	; 0x2546 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    24d4:	67 c0       	rjmp	.+206    	; 0x25a4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    24d6:	2b 81       	ldd	r18, Y+3	; 0x03
    24d8:	3c 81       	ldd	r19, Y+4	; 0x04
    24da:	26 30       	cpi	r18, 0x06	; 6
    24dc:	31 05       	cpc	r19, r1
    24de:	09 f4       	brne	.+2      	; 0x24e2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    24e0:	41 c0       	rjmp	.+130    	; 0x2564 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	87 30       	cpi	r24, 0x07	; 7
    24e8:	91 05       	cpc	r25, r1
    24ea:	0c f0       	brlt	.+2      	; 0x24ee <KEYPAD_4x4_adjustKeyNumber+0x84>
    24ec:	3e c0       	rjmp	.+124    	; 0x256a <KEYPAD_4x4_adjustKeyNumber+0x100>
    24ee:	37 c0       	rjmp	.+110    	; 0x255e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    24f0:	2b 81       	ldd	r18, Y+3	; 0x03
    24f2:	3c 81       	ldd	r19, Y+4	; 0x04
    24f4:	2c 30       	cpi	r18, 0x0C	; 12
    24f6:	31 05       	cpc	r19, r1
    24f8:	09 f4       	brne	.+2      	; 0x24fc <KEYPAD_4x4_adjustKeyNumber+0x92>
    24fa:	46 c0       	rjmp	.+140    	; 0x2588 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	8d 30       	cpi	r24, 0x0D	; 13
    2502:	91 05       	cpc	r25, r1
    2504:	5c f4       	brge	.+22     	; 0x251c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2506:	2b 81       	ldd	r18, Y+3	; 0x03
    2508:	3c 81       	ldd	r19, Y+4	; 0x04
    250a:	2a 30       	cpi	r18, 0x0A	; 10
    250c:	31 05       	cpc	r19, r1
    250e:	b1 f1       	breq	.+108    	; 0x257c <KEYPAD_4x4_adjustKeyNumber+0x112>
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	8b 30       	cpi	r24, 0x0B	; 11
    2516:	91 05       	cpc	r25, r1
    2518:	a4 f5       	brge	.+104    	; 0x2582 <KEYPAD_4x4_adjustKeyNumber+0x118>
    251a:	2d c0       	rjmp	.+90     	; 0x2576 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    251c:	2b 81       	ldd	r18, Y+3	; 0x03
    251e:	3c 81       	ldd	r19, Y+4	; 0x04
    2520:	2e 30       	cpi	r18, 0x0E	; 14
    2522:	31 05       	cpc	r19, r1
    2524:	b9 f1       	breq	.+110    	; 0x2594 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	8e 30       	cpi	r24, 0x0E	; 14
    252c:	91 05       	cpc	r25, r1
    252e:	7c f1       	brlt	.+94     	; 0x258e <KEYPAD_4x4_adjustKeyNumber+0x124>
    2530:	2b 81       	ldd	r18, Y+3	; 0x03
    2532:	3c 81       	ldd	r19, Y+4	; 0x04
    2534:	2f 30       	cpi	r18, 0x0F	; 15
    2536:	31 05       	cpc	r19, r1
    2538:	79 f1       	breq	.+94     	; 0x2598 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	80 31       	cpi	r24, 0x10	; 16
    2540:	91 05       	cpc	r25, r1
    2542:	69 f1       	breq	.+90     	; 0x259e <KEYPAD_4x4_adjustKeyNumber+0x134>
    2544:	2f c0       	rjmp	.+94     	; 0x25a4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2546:	87 e0       	ldi	r24, 0x07	; 7
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	2e c0       	rjmp	.+92     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    254c:	88 e0       	ldi	r24, 0x08	; 8
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	2b c0       	rjmp	.+86     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2552:	89 e0       	ldi	r24, 0x09	; 9
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	28 c0       	rjmp	.+80     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2558:	85 e2       	ldi	r24, 0x25	; 37
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	25 c0       	rjmp	.+74     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    255e:	84 e0       	ldi	r24, 0x04	; 4
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	22 c0       	rjmp	.+68     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2564:	85 e0       	ldi	r24, 0x05	; 5
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	1f c0       	rjmp	.+62     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    256a:	86 e0       	ldi	r24, 0x06	; 6
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	1c c0       	rjmp	.+56     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2570:	8a e2       	ldi	r24, 0x2A	; 42
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	19 c0       	rjmp	.+50     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	16 c0       	rjmp	.+44     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	13 c0       	rjmp	.+38     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	10 c0       	rjmp	.+32     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2588:	8d e2       	ldi	r24, 0x2D	; 45
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	0d c0       	rjmp	.+26     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    258e:	8d e0       	ldi	r24, 0x0D	; 13
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	0a c0       	rjmp	.+20     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	08 c0       	rjmp	.+16     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2598:	8d e3       	ldi	r24, 0x3D	; 61
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	05 c0       	rjmp	.+10     	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    259e:	8b e2       	ldi	r24, 0x2B	; 43
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	2e 97       	sbiw	r28, 0x0e	; 14
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setUpPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	63 e0       	ldi	r22, 0x03	; 3
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
	GPIO_setUpPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	64 e0       	ldi	r22, 0x04	; 4
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>

	/*configure the direction for r/w pin as output pin and it's connected to ground*/
	GPIO_setUpPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	65 e0       	ldi	r22, 0x05	; 5
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GPIO_setUpPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	65 e0       	ldi	r22, 0x05	; 5
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <GPIO_writePin>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a0 ea       	ldi	r26, 0xA0	; 160
    25fa:	b1 e4       	ldi	r27, 0x41	; 65
    25fc:	8b 87       	std	Y+11, r24	; 0x0b
    25fe:	9c 87       	std	Y+12, r25	; 0x0c
    2600:	ad 87       	std	Y+13, r26	; 0x0d
    2602:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	6b 85       	ldd	r22, Y+11	; 0x0b
    2606:	7c 85       	ldd	r23, Y+12	; 0x0c
    2608:	8d 85       	ldd	r24, Y+13	; 0x0d
    260a:	9e 85       	ldd	r25, Y+14	; 0x0e
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a ef       	ldi	r20, 0xFA	; 250
    2612:	54 e4       	ldi	r21, 0x44	; 68
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	8f 83       	std	Y+7, r24	; 0x07
    261e:	98 87       	std	Y+8, r25	; 0x08
    2620:	a9 87       	std	Y+9, r26	; 0x09
    2622:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	5f e3       	ldi	r21, 0x3F	; 63
    2634:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2638:	88 23       	and	r24, r24
    263a:	2c f4       	brge	.+10     	; 0x2646 <LCD_init+0x8e>
		__ticks = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	3f c0       	rjmp	.+126    	; 0x26c4 <LCD_init+0x10c>
	else if (__tmp > 65535)
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	3f ef       	ldi	r19, 0xFF	; 255
    2652:	4f e7       	ldi	r20, 0x7F	; 127
    2654:	57 e4       	ldi	r21, 0x47	; 71
    2656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265a:	18 16       	cp	r1, r24
    265c:	4c f5       	brge	.+82     	; 0x26b0 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e2       	ldi	r20, 0x20	; 32
    266c:	51 e4       	ldi	r21, 0x41	; 65
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <LCD_init+0xee>
    2688:	88 ec       	ldi	r24, 0xC8	; 200
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9c 83       	std	Y+4, r25	; 0x04
    268e:	8b 83       	std	Y+3, r24	; 0x03
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_init+0xdc>
    2698:	9c 83       	std	Y+4, r25	; 0x04
    269a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	9e 83       	std	Y+6, r25	; 0x06
    26a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	69 f7       	brne	.-38     	; 0x2688 <LCD_init+0xd0>
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	9a 83       	std	Y+2, r25	; 0x02
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <LCD_init+0x118>
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setUpPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	61 e0       	ldi	r22, 0x01	; 1
    26dc:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_setUpPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    26e0:	88 e3       	ldi	r24, 0x38	; 56
    26e2:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    26e6:	8c e0       	ldi	r24, 0x0C	; 12
    26e8:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_sendCommand>
}
    26f2:	2e 96       	adiw	r28, 0x0e	; 14
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	e9 97       	sbiw	r28, 0x39	; 57
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	63 e0       	ldi	r22, 0x03	; 3
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <GPIO_writePin>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a0 e8       	ldi	r26, 0x80	; 128
    272a:	bf e3       	ldi	r27, 0x3F	; 63
    272c:	8d ab       	std	Y+53, r24	; 0x35
    272e:	9e ab       	std	Y+54, r25	; 0x36
    2730:	af ab       	std	Y+55, r26	; 0x37
    2732:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2734:	6d a9       	ldd	r22, Y+53	; 0x35
    2736:	7e a9       	ldd	r23, Y+54	; 0x36
    2738:	8f a9       	ldd	r24, Y+55	; 0x37
    273a:	98 ad       	ldd	r25, Y+56	; 0x38
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	4a ef       	ldi	r20, 0xFA	; 250
    2742:	54 e4       	ldi	r21, 0x44	; 68
    2744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	89 ab       	std	Y+49, r24	; 0x31
    274e:	9a ab       	std	Y+50, r25	; 0x32
    2750:	ab ab       	std	Y+51, r26	; 0x33
    2752:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2754:	69 a9       	ldd	r22, Y+49	; 0x31
    2756:	7a a9       	ldd	r23, Y+50	; 0x32
    2758:	8b a9       	ldd	r24, Y+51	; 0x33
    275a:	9c a9       	ldd	r25, Y+52	; 0x34
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e8       	ldi	r20, 0x80	; 128
    2762:	5f e3       	ldi	r21, 0x3F	; 63
    2764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2768:	88 23       	and	r24, r24
    276a:	2c f4       	brge	.+10     	; 0x2776 <LCD_sendCommand+0x72>
		__ticks = 1;
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	98 ab       	std	Y+48, r25	; 0x30
    2772:	8f a7       	std	Y+47, r24	; 0x2f
    2774:	3f c0       	rjmp	.+126    	; 0x27f4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2776:	69 a9       	ldd	r22, Y+49	; 0x31
    2778:	7a a9       	ldd	r23, Y+50	; 0x32
    277a:	8b a9       	ldd	r24, Y+51	; 0x33
    277c:	9c a9       	ldd	r25, Y+52	; 0x34
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	3f ef       	ldi	r19, 0xFF	; 255
    2782:	4f e7       	ldi	r20, 0x7F	; 127
    2784:	57 e4       	ldi	r21, 0x47	; 71
    2786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278a:	18 16       	cp	r1, r24
    278c:	4c f5       	brge	.+82     	; 0x27e0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278e:	6d a9       	ldd	r22, Y+53	; 0x35
    2790:	7e a9       	ldd	r23, Y+54	; 0x36
    2792:	8f a9       	ldd	r24, Y+55	; 0x37
    2794:	98 ad       	ldd	r25, Y+56	; 0x38
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e2       	ldi	r20, 0x20	; 32
    279c:	51 e4       	ldi	r21, 0x41	; 65
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	98 ab       	std	Y+48, r25	; 0x30
    27b4:	8f a7       	std	Y+47, r24	; 0x2f
    27b6:	0f c0       	rjmp	.+30     	; 0x27d6 <LCD_sendCommand+0xd2>
    27b8:	88 ec       	ldi	r24, 0xC8	; 200
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9e a7       	std	Y+46, r25	; 0x2e
    27be:	8d a7       	std	Y+45, r24	; 0x2d
    27c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    27c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <LCD_sendCommand+0xc0>
    27c8:	9e a7       	std	Y+46, r25	; 0x2e
    27ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ce:	98 a9       	ldd	r25, Y+48	; 0x30
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	98 ab       	std	Y+48, r25	; 0x30
    27d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d8:	98 a9       	ldd	r25, Y+48	; 0x30
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	69 f7       	brne	.-38     	; 0x27b8 <LCD_sendCommand+0xb4>
    27de:	14 c0       	rjmp	.+40     	; 0x2808 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e0:	69 a9       	ldd	r22, Y+49	; 0x31
    27e2:	7a a9       	ldd	r23, Y+50	; 0x32
    27e4:	8b a9       	ldd	r24, Y+51	; 0x33
    27e6:	9c a9       	ldd	r25, Y+52	; 0x34
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	98 ab       	std	Y+48, r25	; 0x30
    27f2:	8f a7       	std	Y+47, r24	; 0x2f
    27f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f6:	98 a9       	ldd	r25, Y+48	; 0x30
    27f8:	9c a7       	std	Y+44, r25	; 0x2c
    27fa:	8b a7       	std	Y+43, r24	; 0x2b
    27fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    27fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <LCD_sendCommand+0xfc>
    2804:	9c a7       	std	Y+44, r25	; 0x2c
    2806:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2808:	83 e0       	ldi	r24, 0x03	; 3
    280a:	64 e0       	ldi	r22, 0x04	; 4
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <GPIO_writePin>
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	a0 e8       	ldi	r26, 0x80	; 128
    2818:	bf e3       	ldi	r27, 0x3F	; 63
    281a:	8f a3       	std	Y+39, r24	; 0x27
    281c:	98 a7       	std	Y+40, r25	; 0x28
    281e:	a9 a7       	std	Y+41, r26	; 0x29
    2820:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2822:	6f a1       	ldd	r22, Y+39	; 0x27
    2824:	78 a5       	ldd	r23, Y+40	; 0x28
    2826:	89 a5       	ldd	r24, Y+41	; 0x29
    2828:	9a a5       	ldd	r25, Y+42	; 0x2a
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	4a ef       	ldi	r20, 0xFA	; 250
    2830:	54 e4       	ldi	r21, 0x44	; 68
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	8b a3       	std	Y+35, r24	; 0x23
    283c:	9c a3       	std	Y+36, r25	; 0x24
    283e:	ad a3       	std	Y+37, r26	; 0x25
    2840:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2842:	6b a1       	ldd	r22, Y+35	; 0x23
    2844:	7c a1       	ldd	r23, Y+36	; 0x24
    2846:	8d a1       	ldd	r24, Y+37	; 0x25
    2848:	9e a1       	ldd	r25, Y+38	; 0x26
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5f e3       	ldi	r21, 0x3F	; 63
    2852:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2856:	88 23       	and	r24, r24
    2858:	2c f4       	brge	.+10     	; 0x2864 <LCD_sendCommand+0x160>
		__ticks = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9a a3       	std	Y+34, r25	; 0x22
    2860:	89 a3       	std	Y+33, r24	; 0x21
    2862:	3f c0       	rjmp	.+126    	; 0x28e2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2864:	6b a1       	ldd	r22, Y+35	; 0x23
    2866:	7c a1       	ldd	r23, Y+36	; 0x24
    2868:	8d a1       	ldd	r24, Y+37	; 0x25
    286a:	9e a1       	ldd	r25, Y+38	; 0x26
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	3f ef       	ldi	r19, 0xFF	; 255
    2870:	4f e7       	ldi	r20, 0x7F	; 127
    2872:	57 e4       	ldi	r21, 0x47	; 71
    2874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2878:	18 16       	cp	r1, r24
    287a:	4c f5       	brge	.+82     	; 0x28ce <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287c:	6f a1       	ldd	r22, Y+39	; 0x27
    287e:	78 a5       	ldd	r23, Y+40	; 0x28
    2880:	89 a5       	ldd	r24, Y+41	; 0x29
    2882:	9a a5       	ldd	r25, Y+42	; 0x2a
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e2       	ldi	r20, 0x20	; 32
    288a:	51 e4       	ldi	r21, 0x41	; 65
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	9a a3       	std	Y+34, r25	; 0x22
    28a2:	89 a3       	std	Y+33, r24	; 0x21
    28a4:	0f c0       	rjmp	.+30     	; 0x28c4 <LCD_sendCommand+0x1c0>
    28a6:	88 ec       	ldi	r24, 0xC8	; 200
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	98 a3       	std	Y+32, r25	; 0x20
    28ac:	8f 8f       	std	Y+31, r24	; 0x1f
    28ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28b0:	98 a1       	ldd	r25, Y+32	; 0x20
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <LCD_sendCommand+0x1ae>
    28b6:	98 a3       	std	Y+32, r25	; 0x20
    28b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ba:	89 a1       	ldd	r24, Y+33	; 0x21
    28bc:	9a a1       	ldd	r25, Y+34	; 0x22
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	9a a3       	std	Y+34, r25	; 0x22
    28c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	89 a1       	ldd	r24, Y+33	; 0x21
    28c6:	9a a1       	ldd	r25, Y+34	; 0x22
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	69 f7       	brne	.-38     	; 0x28a6 <LCD_sendCommand+0x1a2>
    28cc:	14 c0       	rjmp	.+40     	; 0x28f6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ce:	6b a1       	ldd	r22, Y+35	; 0x23
    28d0:	7c a1       	ldd	r23, Y+36	; 0x24
    28d2:	8d a1       	ldd	r24, Y+37	; 0x25
    28d4:	9e a1       	ldd	r25, Y+38	; 0x26
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9a a3       	std	Y+34, r25	; 0x22
    28e0:	89 a3       	std	Y+33, r24	; 0x21
    28e2:	89 a1       	ldd	r24, Y+33	; 0x21
    28e4:	9a a1       	ldd	r25, Y+34	; 0x22
    28e6:	9e 8f       	std	Y+30, r25	; 0x1e
    28e8:	8d 8f       	std	Y+29, r24	; 0x1d
    28ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <LCD_sendCommand+0x1ea>
    28f2:	9e 8f       	std	Y+30, r25	; 0x1e
    28f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	69 ad       	ldd	r22, Y+57	; 0x39
    28fa:	0e 94 c7 10 	call	0x218e	; 0x218e <GPIO_writePort>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	a0 e8       	ldi	r26, 0x80	; 128
    2904:	bf e3       	ldi	r27, 0x3F	; 63
    2906:	89 8f       	std	Y+25, r24	; 0x19
    2908:	9a 8f       	std	Y+26, r25	; 0x1a
    290a:	ab 8f       	std	Y+27, r26	; 0x1b
    290c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290e:	69 8d       	ldd	r22, Y+25	; 0x19
    2910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a ef       	ldi	r20, 0xFA	; 250
    291c:	54 e4       	ldi	r21, 0x44	; 68
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	8d 8b       	std	Y+21, r24	; 0x15
    2928:	9e 8b       	std	Y+22, r25	; 0x16
    292a:	af 8b       	std	Y+23, r26	; 0x17
    292c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    292e:	6d 89       	ldd	r22, Y+21	; 0x15
    2930:	7e 89       	ldd	r23, Y+22	; 0x16
    2932:	8f 89       	ldd	r24, Y+23	; 0x17
    2934:	98 8d       	ldd	r25, Y+24	; 0x18
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	5f e3       	ldi	r21, 0x3F	; 63
    293e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2942:	88 23       	and	r24, r24
    2944:	2c f4       	brge	.+10     	; 0x2950 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	3f c0       	rjmp	.+126    	; 0x29ce <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2950:	6d 89       	ldd	r22, Y+21	; 0x15
    2952:	7e 89       	ldd	r23, Y+22	; 0x16
    2954:	8f 89       	ldd	r24, Y+23	; 0x17
    2956:	98 8d       	ldd	r25, Y+24	; 0x18
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	4c f5       	brge	.+82     	; 0x29ba <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2968:	69 8d       	ldd	r22, Y+25	; 0x19
    296a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    296c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    296e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e2       	ldi	r20, 0x20	; 32
    2976:	51 e4       	ldi	r21, 0x41	; 65
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9c 8b       	std	Y+20, r25	; 0x14
    298e:	8b 8b       	std	Y+19, r24	; 0x13
    2990:	0f c0       	rjmp	.+30     	; 0x29b0 <LCD_sendCommand+0x2ac>
    2992:	88 ec       	ldi	r24, 0xC8	; 200
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9a 8b       	std	Y+18, r25	; 0x12
    2998:	89 8b       	std	Y+17, r24	; 0x11
    299a:	89 89       	ldd	r24, Y+17	; 0x11
    299c:	9a 89       	ldd	r25, Y+18	; 0x12
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <LCD_sendCommand+0x29a>
    29a2:	9a 8b       	std	Y+18, r25	; 0x12
    29a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a6:	8b 89       	ldd	r24, Y+19	; 0x13
    29a8:	9c 89       	ldd	r25, Y+20	; 0x14
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	9c 8b       	std	Y+20, r25	; 0x14
    29ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b0:	8b 89       	ldd	r24, Y+19	; 0x13
    29b2:	9c 89       	ldd	r25, Y+20	; 0x14
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	69 f7       	brne	.-38     	; 0x2992 <LCD_sendCommand+0x28e>
    29b8:	14 c0       	rjmp	.+40     	; 0x29e2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ba:	6d 89       	ldd	r22, Y+21	; 0x15
    29bc:	7e 89       	ldd	r23, Y+22	; 0x16
    29be:	8f 89       	ldd	r24, Y+23	; 0x17
    29c0:	98 8d       	ldd	r25, Y+24	; 0x18
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9c 8b       	std	Y+20, r25	; 0x14
    29cc:	8b 8b       	std	Y+19, r24	; 0x13
    29ce:	8b 89       	ldd	r24, Y+19	; 0x13
    29d0:	9c 89       	ldd	r25, Y+20	; 0x14
    29d2:	98 8b       	std	Y+16, r25	; 0x10
    29d4:	8f 87       	std	Y+15, r24	; 0x0f
    29d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d8:	98 89       	ldd	r25, Y+16	; 0x10
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <LCD_sendCommand+0x2d6>
    29de:	98 8b       	std	Y+16, r25	; 0x10
    29e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29e2:	83 e0       	ldi	r24, 0x03	; 3
    29e4:	64 e0       	ldi	r22, 0x04	; 4
    29e6:	40 e0       	ldi	r20, 0x00	; 0
    29e8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <GPIO_writePin>
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	a0 e8       	ldi	r26, 0x80	; 128
    29f2:	bf e3       	ldi	r27, 0x3F	; 63
    29f4:	8b 87       	std	Y+11, r24	; 0x0b
    29f6:	9c 87       	std	Y+12, r25	; 0x0c
    29f8:	ad 87       	std	Y+13, r26	; 0x0d
    29fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	4a ef       	ldi	r20, 0xFA	; 250
    2a0a:	54 e4       	ldi	r21, 0x44	; 68
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	8f 83       	std	Y+7, r24	; 0x07
    2a16:	98 87       	std	Y+8, r25	; 0x08
    2a18:	a9 87       	std	Y+9, r26	; 0x09
    2a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1e:	78 85       	ldd	r23, Y+8	; 0x08
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e8       	ldi	r20, 0x80	; 128
    2a2a:	5f e3       	ldi	r21, 0x3F	; 63
    2a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a30:	88 23       	and	r24, r24
    2a32:	2c f4       	brge	.+10     	; 0x2a3e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	3f c0       	rjmp	.+126    	; 0x2abc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a40:	78 85       	ldd	r23, Y+8	; 0x08
    2a42:	89 85       	ldd	r24, Y+9	; 0x09
    2a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	3f ef       	ldi	r19, 0xFF	; 255
    2a4a:	4f e7       	ldi	r20, 0x7F	; 127
    2a4c:	57 e4       	ldi	r21, 0x47	; 71
    2a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a52:	18 16       	cp	r1, r24
    2a54:	4c f5       	brge	.+82     	; 0x2aa8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e2       	ldi	r20, 0x20	; 32
    2a64:	51 e4       	ldi	r21, 0x41	; 65
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	0f c0       	rjmp	.+30     	; 0x2a9e <LCD_sendCommand+0x39a>
    2a80:	88 ec       	ldi	r24, 0xC8	; 200
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	9c 83       	std	Y+4, r25	; 0x04
    2a86:	8b 83       	std	Y+3, r24	; 0x03
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <LCD_sendCommand+0x388>
    2a90:	9c 83       	std	Y+4, r25	; 0x04
    2a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a94:	8d 81       	ldd	r24, Y+5	; 0x05
    2a96:	9e 81       	ldd	r25, Y+6	; 0x06
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	69 f7       	brne	.-38     	; 0x2a80 <LCD_sendCommand+0x37c>
    2aa6:	14 c0       	rjmp	.+40     	; 0x2ad0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aaa:	78 85       	ldd	r23, Y+8	; 0x08
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <LCD_sendCommand+0x3c4>
    2acc:	9a 83       	std	Y+2, r25	; 0x02
    2ace:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ad0:	e9 96       	adiw	r28, 0x39	; 57
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	e9 97       	sbiw	r28, 0x39	; 57
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2af8:	83 e0       	ldi	r24, 0x03	; 3
    2afa:	63 e0       	ldi	r22, 0x03	; 3
    2afc:	41 e0       	ldi	r20, 0x01	; 1
    2afe:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <GPIO_writePin>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e8       	ldi	r26, 0x80	; 128
    2b08:	bf e3       	ldi	r27, 0x3F	; 63
    2b0a:	8d ab       	std	Y+53, r24	; 0x35
    2b0c:	9e ab       	std	Y+54, r25	; 0x36
    2b0e:	af ab       	std	Y+55, r26	; 0x37
    2b10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b12:	6d a9       	ldd	r22, Y+53	; 0x35
    2b14:	7e a9       	ldd	r23, Y+54	; 0x36
    2b16:	8f a9       	ldd	r24, Y+55	; 0x37
    2b18:	98 ad       	ldd	r25, Y+56	; 0x38
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4a ef       	ldi	r20, 0xFA	; 250
    2b20:	54 e4       	ldi	r21, 0x44	; 68
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	89 ab       	std	Y+49, r24	; 0x31
    2b2c:	9a ab       	std	Y+50, r25	; 0x32
    2b2e:	ab ab       	std	Y+51, r26	; 0x33
    2b30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b32:	69 a9       	ldd	r22, Y+49	; 0x31
    2b34:	7a a9       	ldd	r23, Y+50	; 0x32
    2b36:	8b a9       	ldd	r24, Y+51	; 0x33
    2b38:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	2c f4       	brge	.+10     	; 0x2b54 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	98 ab       	std	Y+48, r25	; 0x30
    2b50:	8f a7       	std	Y+47, r24	; 0x2f
    2b52:	3f c0       	rjmp	.+126    	; 0x2bd2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2b54:	69 a9       	ldd	r22, Y+49	; 0x31
    2b56:	7a a9       	ldd	r23, Y+50	; 0x32
    2b58:	8b a9       	ldd	r24, Y+51	; 0x33
    2b5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
    2b60:	4f e7       	ldi	r20, 0x7F	; 127
    2b62:	57 e4       	ldi	r21, 0x47	; 71
    2b64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b68:	18 16       	cp	r1, r24
    2b6a:	4c f5       	brge	.+82     	; 0x2bbe <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b6e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b70:	8f a9       	ldd	r24, Y+55	; 0x37
    2b72:	98 ad       	ldd	r25, Y+56	; 0x38
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e2       	ldi	r20, 0x20	; 32
    2b7a:	51 e4       	ldi	r21, 0x41	; 65
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	98 ab       	std	Y+48, r25	; 0x30
    2b92:	8f a7       	std	Y+47, r24	; 0x2f
    2b94:	0f c0       	rjmp	.+30     	; 0x2bb4 <LCD_displayCharacter+0xd2>
    2b96:	88 ec       	ldi	r24, 0xC8	; 200
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9e a7       	std	Y+46, r25	; 0x2e
    2b9c:	8d a7       	std	Y+45, r24	; 0x2d
    2b9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ba0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_displayCharacter+0xc0>
    2ba6:	9e a7       	std	Y+46, r25	; 0x2e
    2ba8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bac:	98 a9       	ldd	r25, Y+48	; 0x30
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	98 ab       	std	Y+48, r25	; 0x30
    2bb2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bb6:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <LCD_displayCharacter+0xb4>
    2bbc:	14 c0       	rjmp	.+40     	; 0x2be6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	98 ab       	std	Y+48, r25	; 0x30
    2bd0:	8f a7       	std	Y+47, r24	; 0x2f
    2bd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd6:	9c a7       	std	Y+44, r25	; 0x2c
    2bd8:	8b a7       	std	Y+43, r24	; 0x2b
    2bda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_displayCharacter+0xfc>
    2be2:	9c a7       	std	Y+44, r25	; 0x2c
    2be4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2be6:	83 e0       	ldi	r24, 0x03	; 3
    2be8:	64 e0       	ldi	r22, 0x04	; 4
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <GPIO_writePin>
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a0 e8       	ldi	r26, 0x80	; 128
    2bf6:	bf e3       	ldi	r27, 0x3F	; 63
    2bf8:	8f a3       	std	Y+39, r24	; 0x27
    2bfa:	98 a7       	std	Y+40, r25	; 0x28
    2bfc:	a9 a7       	std	Y+41, r26	; 0x29
    2bfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	6f a1       	ldd	r22, Y+39	; 0x27
    2c02:	78 a5       	ldd	r23, Y+40	; 0x28
    2c04:	89 a5       	ldd	r24, Y+41	; 0x29
    2c06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a ef       	ldi	r20, 0xFA	; 250
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8b a3       	std	Y+35, r24	; 0x23
    2c1a:	9c a3       	std	Y+36, r25	; 0x24
    2c1c:	ad a3       	std	Y+37, r26	; 0x25
    2c1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c20:	6b a1       	ldd	r22, Y+35	; 0x23
    2c22:	7c a1       	ldd	r23, Y+36	; 0x24
    2c24:	8d a1       	ldd	r24, Y+37	; 0x25
    2c26:	9e a1       	ldd	r25, Y+38	; 0x26
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9a a3       	std	Y+34, r25	; 0x22
    2c3e:	89 a3       	std	Y+33, r24	; 0x21
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2c42:	6b a1       	ldd	r22, Y+35	; 0x23
    2c44:	7c a1       	ldd	r23, Y+36	; 0x24
    2c46:	8d a1       	ldd	r24, Y+37	; 0x25
    2c48:	9e a1       	ldd	r25, Y+38	; 0x26
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9a a3       	std	Y+34, r25	; 0x22
    2c80:	89 a3       	std	Y+33, r24	; 0x21
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <LCD_displayCharacter+0x1c0>
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	98 a3       	std	Y+32, r25	; 0x20
    2c8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c8e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_displayCharacter+0x1ae>
    2c94:	98 a3       	std	Y+32, r25	; 0x20
    2c96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9a a3       	std	Y+34, r25	; 0x22
    2ca0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <LCD_displayCharacter+0x1a2>
    2caa:	14 c0       	rjmp	.+40     	; 0x2cd4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	6b a1       	ldd	r22, Y+35	; 0x23
    2cae:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9a a3       	std	Y+34, r25	; 0x22
    2cbe:	89 a3       	std	Y+33, r24	; 0x21
    2cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2cc6:	8d 8f       	std	Y+29, r24	; 0x1d
    2cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <LCD_displayCharacter+0x1ea>
    2cd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2cd2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	69 ad       	ldd	r22, Y+57	; 0x39
    2cd8:	0e 94 c7 10 	call	0x218e	; 0x218e <GPIO_writePort>
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a0 e8       	ldi	r26, 0x80	; 128
    2ce2:	bf e3       	ldi	r27, 0x3F	; 63
    2ce4:	89 8f       	std	Y+25, r24	; 0x19
    2ce6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ce8:	ab 8f       	std	Y+27, r26	; 0x1b
    2cea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	69 8d       	ldd	r22, Y+25	; 0x19
    2cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a ef       	ldi	r20, 0xFA	; 250
    2cfa:	54 e4       	ldi	r21, 0x44	; 68
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8d 8b       	std	Y+21, r24	; 0x15
    2d06:	9e 8b       	std	Y+22, r25	; 0x16
    2d08:	af 8b       	std	Y+23, r26	; 0x17
    2d0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d10:	8f 89       	ldd	r24, Y+23	; 0x17
    2d12:	98 8d       	ldd	r25, Y+24	; 0x18
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9c 8b       	std	Y+20, r25	; 0x14
    2d2a:	8b 8b       	std	Y+19, r24	; 0x13
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d30:	7e 89       	ldd	r23, Y+22	; 0x16
    2d32:	8f 89       	ldd	r24, Y+23	; 0x17
    2d34:	98 8d       	ldd	r25, Y+24	; 0x18
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	69 8d       	ldd	r22, Y+25	; 0x19
    2d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9c 8b       	std	Y+20, r25	; 0x14
    2d6c:	8b 8b       	std	Y+19, r24	; 0x13
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <LCD_displayCharacter+0x2ac>
    2d70:	88 ec       	ldi	r24, 0xC8	; 200
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9a 8b       	std	Y+18, r25	; 0x12
    2d76:	89 8b       	std	Y+17, r24	; 0x11
    2d78:	89 89       	ldd	r24, Y+17	; 0x11
    2d7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <LCD_displayCharacter+0x29a>
    2d80:	9a 8b       	std	Y+18, r25	; 0x12
    2d82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	8b 89       	ldd	r24, Y+19	; 0x13
    2d86:	9c 89       	ldd	r25, Y+20	; 0x14
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9c 8b       	std	Y+20, r25	; 0x14
    2d8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d90:	9c 89       	ldd	r25, Y+20	; 0x14
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <LCD_displayCharacter+0x28e>
    2d96:	14 c0       	rjmp	.+40     	; 0x2dc0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	6d 89       	ldd	r22, Y+21	; 0x15
    2d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9c 8b       	std	Y+20, r25	; 0x14
    2daa:	8b 8b       	std	Y+19, r24	; 0x13
    2dac:	8b 89       	ldd	r24, Y+19	; 0x13
    2dae:	9c 89       	ldd	r25, Y+20	; 0x14
    2db0:	98 8b       	std	Y+16, r25	; 0x10
    2db2:	8f 87       	std	Y+15, r24	; 0x0f
    2db4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db6:	98 89       	ldd	r25, Y+16	; 0x10
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <LCD_displayCharacter+0x2d6>
    2dbc:	98 8b       	std	Y+16, r25	; 0x10
    2dbe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2dc0:	83 e0       	ldi	r24, 0x03	; 3
    2dc2:	64 e0       	ldi	r22, 0x04	; 4
    2dc4:	40 e0       	ldi	r20, 0x00	; 0
    2dc6:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <GPIO_writePin>
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	a0 e8       	ldi	r26, 0x80	; 128
    2dd0:	bf e3       	ldi	r27, 0x3F	; 63
    2dd2:	8b 87       	std	Y+11, r24	; 0x0b
    2dd4:	9c 87       	std	Y+12, r25	; 0x0c
    2dd6:	ad 87       	std	Y+13, r26	; 0x0d
    2dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	4a ef       	ldi	r20, 0xFA	; 250
    2de8:	54 e4       	ldi	r21, 0x44	; 68
    2dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	8f 83       	std	Y+7, r24	; 0x07
    2df4:	98 87       	std	Y+8, r25	; 0x08
    2df6:	a9 87       	std	Y+9, r26	; 0x09
    2df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfc:	78 85       	ldd	r23, Y+8	; 0x08
    2dfe:	89 85       	ldd	r24, Y+9	; 0x09
    2e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e8       	ldi	r20, 0x80	; 128
    2e08:	5f e3       	ldi	r21, 0x3F	; 63
    2e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0e:	88 23       	and	r24, r24
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	3f c0       	rjmp	.+126    	; 0x2e9a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1e:	78 85       	ldd	r23, Y+8	; 0x08
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	3f ef       	ldi	r19, 0xFF	; 255
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	57 e4       	ldi	r21, 0x47	; 71
    2e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	4c f5       	brge	.+82     	; 0x2e86 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e2       	ldi	r20, 0x20	; 32
    2e42:	51 e4       	ldi	r21, 0x41	; 65
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <LCD_displayCharacter+0x39a>
    2e5e:	88 ec       	ldi	r24, 0xC8	; 200
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	8b 83       	std	Y+3, r24	; 0x03
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <LCD_displayCharacter+0x388>
    2e6e:	9c 83       	std	Y+4, r25	; 0x04
    2e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e72:	8d 81       	ldd	r24, Y+5	; 0x05
    2e74:	9e 81       	ldd	r25, Y+6	; 0x06
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	69 f7       	brne	.-38     	; 0x2e5e <LCD_displayCharacter+0x37c>
    2e84:	14 c0       	rjmp	.+40     	; 0x2eae <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e86:	6f 81       	ldd	r22, Y+7	; 0x07
    2e88:	78 85       	ldd	r23, Y+8	; 0x08
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9e 83       	std	Y+6, r25	; 0x06
    2e98:	8d 83       	std	Y+5, r24	; 0x05
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	9a 83       	std	Y+2, r25	; 0x02
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <LCD_displayCharacter+0x3c4>
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2eae:	e9 96       	adiw	r28, 0x39	; 57
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	61 97       	sbiw	r28, 0x11	; 17
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	99 8b       	std	Y+17, r25	; 0x11
    2ed6:	88 8b       	std	Y+16, r24	; 0x10
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a0 e2       	ldi	r26, 0x20	; 32
    2ede:	b1 e4       	ldi	r27, 0x41	; 65
    2ee0:	8b 87       	std	Y+11, r24	; 0x0b
    2ee2:	9c 87       	std	Y+12, r25	; 0x0c
    2ee4:	ad 87       	std	Y+13, r26	; 0x0d
    2ee6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	4a ef       	ldi	r20, 0xFA	; 250
    2ef6:	54 e4       	ldi	r21, 0x44	; 68
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	8f 83       	std	Y+7, r24	; 0x07
    2f02:	98 87       	std	Y+8, r25	; 0x08
    2f04:	a9 87       	std	Y+9, r26	; 0x09
    2f06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f08:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0a:	78 85       	ldd	r23, Y+8	; 0x08
    2f0c:	89 85       	ldd	r24, Y+9	; 0x09
    2f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e8       	ldi	r20, 0x80	; 128
    2f16:	5f e3       	ldi	r21, 0x3F	; 63
    2f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f1c:	88 23       	and	r24, r24
    2f1e:	2c f4       	brge	.+10     	; 0x2f2a <LCD_displayString+0x6a>
		__ticks = 1;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	9e 83       	std	Y+6, r25	; 0x06
    2f26:	8d 83       	std	Y+5, r24	; 0x05
    2f28:	3f c0       	rjmp	.+126    	; 0x2fa8 <LCD_displayString+0xe8>
	else if (__tmp > 65535)
    2f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2c:	78 85       	ldd	r23, Y+8	; 0x08
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	3f ef       	ldi	r19, 0xFF	; 255
    2f36:	4f e7       	ldi	r20, 0x7F	; 127
    2f38:	57 e4       	ldi	r21, 0x47	; 71
    2f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f3e:	18 16       	cp	r1, r24
    2f40:	4c f5       	brge	.+82     	; 0x2f94 <LCD_displayString+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e2       	ldi	r20, 0x20	; 32
    2f50:	51 e4       	ldi	r21, 0x41	; 65
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	9e 83       	std	Y+6, r25	; 0x06
    2f68:	8d 83       	std	Y+5, r24	; 0x05
    2f6a:	0f c0       	rjmp	.+30     	; 0x2f8a <LCD_displayString+0xca>
    2f6c:	88 ec       	ldi	r24, 0xC8	; 200
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9c 83       	std	Y+4, r25	; 0x04
    2f72:	8b 83       	std	Y+3, r24	; 0x03
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	9c 81       	ldd	r25, Y+4	; 0x04
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <LCD_displayString+0xb8>
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f80:	8d 81       	ldd	r24, Y+5	; 0x05
    2f82:	9e 81       	ldd	r25, Y+6	; 0x06
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	69 f7       	brne	.-38     	; 0x2f6c <LCD_displayString+0xac>
    2f92:	14 c0       	rjmp	.+40     	; 0x2fbc <LCD_displayString+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f94:	6f 81       	ldd	r22, Y+7	; 0x07
    2f96:	78 85       	ldd	r23, Y+8	; 0x08
    2f98:	89 85       	ldd	r24, Y+9	; 0x09
    2f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	9e 83       	std	Y+6, r25	; 0x06
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	9a 83       	std	Y+2, r25	; 0x02
    2fae:	89 83       	std	Y+1, r24	; 0x01
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <LCD_displayString+0xf4>
    2fb8:	9a 83       	std	Y+2, r25	; 0x02
    2fba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	uint8 i = 0;
    2fbc:	1f 86       	std	Y+15, r1	; 0x0f
    2fbe:	0e c0       	rjmp	.+28     	; 0x2fdc <LCD_displayString+0x11c>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc2:	28 2f       	mov	r18, r24
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	88 89       	ldd	r24, Y+16	; 0x10
    2fc8:	99 89       	ldd	r25, Y+17	; 0x11
    2fca:	fc 01       	movw	r30, r24
    2fcc:	e2 0f       	add	r30, r18
    2fce:	f3 1f       	adc	r31, r19
    2fd0:	80 81       	ld	r24, Z
    2fd2:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayCharacter>
		i++;
    2fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fd8:	8f 5f       	subi	r24, 0xFF	; 255
    2fda:	8f 87       	std	Y+15, r24	; 0x0f
 */
void LCD_displayString(const char *Str)
{
	_delay_ms(10);
	uint8 i = 0;
	while(Str[i] != '\0')
    2fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	88 89       	ldd	r24, Y+16	; 0x10
    2fe4:	99 89       	ldd	r25, Y+17	; 0x11
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	e2 0f       	add	r30, r18
    2fea:	f3 1f       	adc	r31, r19
    2fec:	80 81       	ld	r24, Z
    2fee:	88 23       	and	r24, r24
    2ff0:	39 f7       	brne	.-50     	; 0x2fc0 <LCD_displayString+0x100>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2ff2:	61 96       	adiw	r28, 0x11	; 17
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	00 d0       	rcall	.+0      	; 0x300a <LCD_moveCursor+0x6>
    300a:	00 d0       	rcall	.+0      	; 0x300c <LCD_moveCursor+0x8>
    300c:	0f 92       	push	r0
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	8a 83       	std	Y+2, r24	; 0x02
    3014:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	3d 83       	std	Y+5, r19	; 0x05
    301e:	2c 83       	std	Y+4, r18	; 0x04
    3020:	8c 81       	ldd	r24, Y+4	; 0x04
    3022:	9d 81       	ldd	r25, Y+5	; 0x05
    3024:	81 30       	cpi	r24, 0x01	; 1
    3026:	91 05       	cpc	r25, r1
    3028:	c1 f0       	breq	.+48     	; 0x305a <LCD_moveCursor+0x56>
    302a:	2c 81       	ldd	r18, Y+4	; 0x04
    302c:	3d 81       	ldd	r19, Y+5	; 0x05
    302e:	22 30       	cpi	r18, 0x02	; 2
    3030:	31 05       	cpc	r19, r1
    3032:	2c f4       	brge	.+10     	; 0x303e <LCD_moveCursor+0x3a>
    3034:	8c 81       	ldd	r24, Y+4	; 0x04
    3036:	9d 81       	ldd	r25, Y+5	; 0x05
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	61 f0       	breq	.+24     	; 0x3054 <LCD_moveCursor+0x50>
    303c:	19 c0       	rjmp	.+50     	; 0x3070 <LCD_moveCursor+0x6c>
    303e:	2c 81       	ldd	r18, Y+4	; 0x04
    3040:	3d 81       	ldd	r19, Y+5	; 0x05
    3042:	22 30       	cpi	r18, 0x02	; 2
    3044:	31 05       	cpc	r19, r1
    3046:	69 f0       	breq	.+26     	; 0x3062 <LCD_moveCursor+0x5e>
    3048:	8c 81       	ldd	r24, Y+4	; 0x04
    304a:	9d 81       	ldd	r25, Y+5	; 0x05
    304c:	83 30       	cpi	r24, 0x03	; 3
    304e:	91 05       	cpc	r25, r1
    3050:	61 f0       	breq	.+24     	; 0x306a <LCD_moveCursor+0x66>
    3052:	0e c0       	rjmp	.+28     	; 0x3070 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3054:	8b 81       	ldd	r24, Y+3	; 0x03
    3056:	89 83       	std	Y+1, r24	; 0x01
    3058:	0b c0       	rjmp	.+22     	; 0x3070 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	80 5c       	subi	r24, 0xC0	; 192
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	07 c0       	rjmp	.+14     	; 0x3070 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	80 5f       	subi	r24, 0xF0	; 240
    3066:	89 83       	std	Y+1, r24	; 0x01
    3068:	03 c0       	rjmp	.+6      	; 0x3070 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	80 5b       	subi	r24, 0xB0	; 176
    306e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	80 68       	ori	r24, 0x80	; 128
    3074:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_sendCommand>
}
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	00 d0       	rcall	.+0      	; 0x308e <LCD_displayStringRowColumn+0x6>
    308e:	00 d0       	rcall	.+0      	; 0x3090 <LCD_displayStringRowColumn+0x8>
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	6a 83       	std	Y+2, r22	; 0x02
    3098:	5c 83       	std	Y+4, r21	; 0x04
    309a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	6a 81       	ldd	r22, Y+2	; 0x02
    30a0:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	9c 81       	ldd	r25, Y+4	; 0x04
    30a8:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
}
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	08 95       	ret

000030ba <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	a0 97       	sbiw	r28, 0x20	; 32
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	98 a3       	std	Y+32, r25	; 0x20
    30d0:	8f 8f       	std	Y+31, r24	; 0x1f
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	a0 e2       	ldi	r26, 0x20	; 32
    30d8:	b1 e4       	ldi	r27, 0x41	; 65
    30da:	8b 87       	std	Y+11, r24	; 0x0b
    30dc:	9c 87       	std	Y+12, r25	; 0x0c
    30de:	ad 87       	std	Y+13, r26	; 0x0d
    30e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	4a ef       	ldi	r20, 0xFA	; 250
    30f0:	54 e4       	ldi	r21, 0x44	; 68
    30f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	8f 83       	std	Y+7, r24	; 0x07
    30fc:	98 87       	std	Y+8, r25	; 0x08
    30fe:	a9 87       	std	Y+9, r26	; 0x09
    3100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3102:	6f 81       	ldd	r22, Y+7	; 0x07
    3104:	78 85       	ldd	r23, Y+8	; 0x08
    3106:	89 85       	ldd	r24, Y+9	; 0x09
    3108:	9a 85       	ldd	r25, Y+10	; 0x0a
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e8       	ldi	r20, 0x80	; 128
    3110:	5f e3       	ldi	r21, 0x3F	; 63
    3112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3116:	88 23       	and	r24, r24
    3118:	2c f4       	brge	.+10     	; 0x3124 <LCD_intgerToString+0x6a>
		__ticks = 1;
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	9e 83       	std	Y+6, r25	; 0x06
    3120:	8d 83       	std	Y+5, r24	; 0x05
    3122:	3f c0       	rjmp	.+126    	; 0x31a2 <LCD_intgerToString+0xe8>
	else if (__tmp > 65535)
    3124:	6f 81       	ldd	r22, Y+7	; 0x07
    3126:	78 85       	ldd	r23, Y+8	; 0x08
    3128:	89 85       	ldd	r24, Y+9	; 0x09
    312a:	9a 85       	ldd	r25, Y+10	; 0x0a
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	3f ef       	ldi	r19, 0xFF	; 255
    3130:	4f e7       	ldi	r20, 0x7F	; 127
    3132:	57 e4       	ldi	r21, 0x47	; 71
    3134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3138:	18 16       	cp	r1, r24
    313a:	4c f5       	brge	.+82     	; 0x318e <LCD_intgerToString+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313c:	6b 85       	ldd	r22, Y+11	; 0x0b
    313e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3140:	8d 85       	ldd	r24, Y+13	; 0x0d
    3142:	9e 85       	ldd	r25, Y+14	; 0x0e
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	40 e2       	ldi	r20, 0x20	; 32
    314a:	51 e4       	ldi	r21, 0x41	; 65
    314c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	bc 01       	movw	r22, r24
    3156:	cd 01       	movw	r24, r26
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	9e 83       	std	Y+6, r25	; 0x06
    3162:	8d 83       	std	Y+5, r24	; 0x05
    3164:	0f c0       	rjmp	.+30     	; 0x3184 <LCD_intgerToString+0xca>
    3166:	88 ec       	ldi	r24, 0xC8	; 200
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	9c 83       	std	Y+4, r25	; 0x04
    316c:	8b 83       	std	Y+3, r24	; 0x03
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	9c 81       	ldd	r25, Y+4	; 0x04
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	f1 f7       	brne	.-4      	; 0x3172 <LCD_intgerToString+0xb8>
    3176:	9c 83       	std	Y+4, r25	; 0x04
    3178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317a:	8d 81       	ldd	r24, Y+5	; 0x05
    317c:	9e 81       	ldd	r25, Y+6	; 0x06
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	9e 81       	ldd	r25, Y+6	; 0x06
    3188:	00 97       	sbiw	r24, 0x00	; 0
    318a:	69 f7       	brne	.-38     	; 0x3166 <LCD_intgerToString+0xac>
    318c:	14 c0       	rjmp	.+40     	; 0x31b6 <LCD_intgerToString+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318e:	6f 81       	ldd	r22, Y+7	; 0x07
    3190:	78 85       	ldd	r23, Y+8	; 0x08
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	9a 85       	ldd	r25, Y+10	; 0x0a
    3196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	8d 83       	std	Y+5, r24	; 0x05
    31a2:	8d 81       	ldd	r24, Y+5	; 0x05
    31a4:	9e 81       	ldd	r25, Y+6	; 0x06
    31a6:	9a 83       	std	Y+2, r25	; 0x02
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	9a 81       	ldd	r25, Y+2	; 0x02
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	f1 f7       	brne	.-4      	; 0x31ae <LCD_intgerToString+0xf4>
    31b2:	9a 83       	std	Y+2, r25	; 0x02
    31b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    31b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31b8:	98 a1       	ldd	r25, Y+32	; 0x20
    31ba:	9e 01       	movw	r18, r28
    31bc:	21 5f       	subi	r18, 0xF1	; 241
    31be:	3f 4f       	sbci	r19, 0xFF	; 255
    31c0:	b9 01       	movw	r22, r18
    31c2:	4a e0       	ldi	r20, 0x0A	; 10
    31c4:	50 e0       	ldi	r21, 0x00	; 0
    31c6:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <itoa>
   LCD_displayString(buff); /* Display the string */
    31ca:	ce 01       	movw	r24, r28
    31cc:	0f 96       	adiw	r24, 0x0f	; 15
    31ce:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_displayString>
}
    31d2:	a0 96       	adiw	r28, 0x20	; 32
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	0e 94 82 13 	call	0x2704	; 0x2704 <LCD_sendCommand>
}
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <__vector_7>:
                     * Function Definitions*
 **********************************************************************/


ISR(TIMER1_COMPA_vect)
{
    31f8:	1f 92       	push	r1
    31fa:	0f 92       	push	r0
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	0f 92       	push	r0
    3200:	11 24       	eor	r1, r1
    3202:	2f 93       	push	r18
    3204:	3f 93       	push	r19
    3206:	4f 93       	push	r20
    3208:	5f 93       	push	r21
    320a:	6f 93       	push	r22
    320c:	7f 93       	push	r23
    320e:	8f 93       	push	r24
    3210:	9f 93       	push	r25
    3212:	af 93       	push	r26
    3214:	bf 93       	push	r27
    3216:	ef 93       	push	r30
    3218:	ff 93       	push	r31
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    3222:	80 91 00 01 	lds	r24, 0x0100
    3226:	90 91 01 01 	lds	r25, 0x0101
    322a:	00 97       	sbiw	r24, 0x00	; 0
    322c:	29 f0       	breq	.+10     	; 0x3238 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    322e:	e0 91 00 01 	lds	r30, 0x0100
    3232:	f0 91 01 01 	lds	r31, 0x0101
    3236:	09 95       	icall
	}
}
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	ff 91       	pop	r31
    323e:	ef 91       	pop	r30
    3240:	bf 91       	pop	r27
    3242:	af 91       	pop	r26
    3244:	9f 91       	pop	r25
    3246:	8f 91       	pop	r24
    3248:	7f 91       	pop	r23
    324a:	6f 91       	pop	r22
    324c:	5f 91       	pop	r21
    324e:	4f 91       	pop	r20
    3250:	3f 91       	pop	r19
    3252:	2f 91       	pop	r18
    3254:	0f 90       	pop	r0
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	0f 90       	pop	r0
    325a:	1f 90       	pop	r1
    325c:	18 95       	reti

0000325e <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    325e:	1f 92       	push	r1
    3260:	0f 92       	push	r0
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	0f 92       	push	r0
    3266:	11 24       	eor	r1, r1
    3268:	2f 93       	push	r18
    326a:	3f 93       	push	r19
    326c:	4f 93       	push	r20
    326e:	5f 93       	push	r21
    3270:	6f 93       	push	r22
    3272:	7f 93       	push	r23
    3274:	8f 93       	push	r24
    3276:	9f 93       	push	r25
    3278:	af 93       	push	r26
    327a:	bf 93       	push	r27
    327c:	ef 93       	push	r30
    327e:	ff 93       	push	r31
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    3288:	80 91 00 01 	lds	r24, 0x0100
    328c:	90 91 01 01 	lds	r25, 0x0101
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	29 f0       	breq	.+10     	; 0x329e <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    3294:	e0 91 00 01 	lds	r30, 0x0100
    3298:	f0 91 01 01 	lds	r31, 0x0101
    329c:	09 95       	icall
	}
}
    329e:	cf 91       	pop	r28
    32a0:	df 91       	pop	r29
    32a2:	ff 91       	pop	r31
    32a4:	ef 91       	pop	r30
    32a6:	bf 91       	pop	r27
    32a8:	af 91       	pop	r26
    32aa:	9f 91       	pop	r25
    32ac:	8f 91       	pop	r24
    32ae:	7f 91       	pop	r23
    32b0:	6f 91       	pop	r22
    32b2:	5f 91       	pop	r21
    32b4:	4f 91       	pop	r20
    32b6:	3f 91       	pop	r19
    32b8:	2f 91       	pop	r18
    32ba:	0f 90       	pop	r0
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	0f 90       	pop	r0
    32c0:	1f 90       	pop	r1
    32c2:	18 95       	reti

000032c4 <Timer1_init>:
 * configurable function to initialize the timer with its settings
 * whether its mode or prescalar or the initial value or the compare vale if compare mode
 */

void Timer1_init(const Timer1_ConfigType* config_ptr)
{
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <Timer1_init+0x6>
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	9a 83       	std	Y+2, r25	; 0x02
    32d0:	89 83       	std	Y+1, r24	; 0x01
	/* FOC1A and FOC1B are set high when a non-pwm mode*/
	TCCR1A =(1<<FOC1A);
    32d2:	ef e4       	ldi	r30, 0x4F	; 79
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	88 e0       	ldi	r24, 0x08	; 8
    32d8:	80 83       	st	Z, r24

	/* make the mode operation configurable wether normal or compare
	 * by configuration in WGM10,WGM11 in TCCR1A register
	 * and WGM12 in TCCR1B register
	 */
	TCCR1A=(TCCR1A & 0xFC)| ( (config_ptr->mode) & 0x03) ;
    32da:	af e4       	ldi	r26, 0x4F	; 79
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	ef e4       	ldi	r30, 0x4F	; 79
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	98 2f       	mov	r25, r24
    32e6:	9c 7f       	andi	r25, 0xFC	; 252
    32e8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ea:	fa 81       	ldd	r31, Y+2	; 0x02
    32ec:	85 81       	ldd	r24, Z+5	; 0x05
    32ee:	83 70       	andi	r24, 0x03	; 3
    32f0:	89 2b       	or	r24, r25
    32f2:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B & 0xE7)| ( ((config_ptr->mode) & 0x0C) << 1);
    32f4:	ae e4       	ldi	r26, 0x4E	; 78
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	ee e4       	ldi	r30, 0x4E	; 78
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	28 2f       	mov	r18, r24
    3300:	27 7e       	andi	r18, 0xE7	; 231
    3302:	e9 81       	ldd	r30, Y+1	; 0x01
    3304:	fa 81       	ldd	r31, Y+2	; 0x02
    3306:	85 81       	ldd	r24, Z+5	; 0x05
    3308:	88 2f       	mov	r24, r24
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	8c 70       	andi	r24, 0x0C	; 12
    330e:	90 70       	andi	r25, 0x00	; 0
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	82 2b       	or	r24, r18
    3316:	8c 93       	st	X, r24

	/* make the prescalar configurable
	 * by configuration in bit CS10,CS11,CS12 in TCCR1B
	 */
	TCCR1B=(TCCR1B & 0xF8) |(config_ptr->prescalar);
    3318:	ae e4       	ldi	r26, 0x4E	; 78
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	ee e4       	ldi	r30, 0x4E	; 78
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	98 2f       	mov	r25, r24
    3324:	98 7f       	andi	r25, 0xF8	; 248
    3326:	e9 81       	ldd	r30, Y+1	; 0x01
    3328:	fa 81       	ldd	r31, Y+2	; 0x02
    332a:	84 81       	ldd	r24, Z+4	; 0x04
    332c:	89 2b       	or	r24, r25
    332e:	8c 93       	st	X, r24
	TCNT1= (config_ptr-> initial_value);
    3330:	ac e4       	ldi	r26, 0x4C	; 76
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	e9 81       	ldd	r30, Y+1	; 0x01
    3336:	fa 81       	ldd	r31, Y+2	; 0x02
    3338:	80 81       	ld	r24, Z
    333a:	91 81       	ldd	r25, Z+1	; 0x01
    333c:	11 96       	adiw	r26, 0x01	; 1
    333e:	9c 93       	st	X, r25
    3340:	8e 93       	st	-X, r24

	/* to write in the compare register if it is compare mode*/

	if (config_ptr->mode==operation_CTC)
    3342:	e9 81       	ldd	r30, Y+1	; 0x01
    3344:	fa 81       	ldd	r31, Y+2	; 0x02
    3346:	85 81       	ldd	r24, Z+5	; 0x05
    3348:	84 30       	cpi	r24, 0x04	; 4
    334a:	89 f4       	brne	.+34     	; 0x336e <Timer1_init+0xaa>
	{
		OCR1A= (config_ptr->compare_value);
    334c:	aa e4       	ldi	r26, 0x4A	; 74
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	e9 81       	ldd	r30, Y+1	; 0x01
    3352:	fa 81       	ldd	r31, Y+2	; 0x02
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	11 96       	adiw	r26, 0x01	; 1
    335a:	9c 93       	st	X, r25
    335c:	8e 93       	st	-X, r24
		TIMSK |=(1<<OCIE1A);
    335e:	a9 e5       	ldi	r26, 0x59	; 89
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e9 e5       	ldi	r30, 0x59	; 89
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	80 61       	ori	r24, 0x10	; 16
    336a:	8c 93       	st	X, r24
    336c:	0c c0       	rjmp	.+24     	; 0x3386 <Timer1_init+0xc2>

	}

	else if(config_ptr->mode==operation_normal)
    336e:	e9 81       	ldd	r30, Y+1	; 0x01
    3370:	fa 81       	ldd	r31, Y+2	; 0x02
    3372:	85 81       	ldd	r24, Z+5	; 0x05
    3374:	88 23       	and	r24, r24
    3376:	39 f4       	brne	.+14     	; 0x3386 <Timer1_init+0xc2>
		TIMSK |=(1<<TOIE1);
    3378:	a9 e5       	ldi	r26, 0x59	; 89
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e9 e5       	ldi	r30, 0x59	; 89
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	84 60       	ori	r24, 0x04	; 4
    3384:	8c 93       	st	X, r24


}
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <Timer1_setCallBack>:
/* description:
 * Function to call the call back function when an interrupt occurs
 */

void Timer1_setCallBack(void(*a_ptr)(void))
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	00 d0       	rcall	.+0      	; 0x3396 <Timer1_setCallBack+0x6>
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	9a 83       	std	Y+2, r25	; 0x02
    339c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	9a 81       	ldd	r25, Y+2	; 0x02
    33a2:	90 93 01 01 	sts	0x0101, r25
    33a6:	80 93 00 01 	sts	0x0100, r24
}
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <Timer1_deInit>:
/* description:
 * Function to stop the timer , if it is needed to initialize it with diffrenet settings
 */

void Timer1_deInit(void)
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1<<CS10);
    33bc:	ae e4       	ldi	r26, 0x4E	; 78
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	ee e4       	ldi	r30, 0x4E	; 78
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	8e 7f       	andi	r24, 0xFE	; 254
    33c8:	8c 93       	st	X, r24
	TCCR1B &= ~(1<<CS11);
    33ca:	ae e4       	ldi	r26, 0x4E	; 78
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	ee e4       	ldi	r30, 0x4E	; 78
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	80 81       	ld	r24, Z
    33d4:	8d 7f       	andi	r24, 0xFD	; 253
    33d6:	8c 93       	st	X, r24
	TCCR1B &= ~(1<<CS12);
    33d8:	ae e4       	ldi	r26, 0x4E	; 78
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	ee e4       	ldi	r30, 0x4E	; 78
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	8b 7f       	andi	r24, 0xFB	; 251
    33e4:	8c 93       	st	X, r24

}
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config_ptr)
{
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	00 d0       	rcall	.+0      	; 0x33f2 <UART_init+0x6>
    33f2:	00 d0       	rcall	.+0      	; 0x33f4 <UART_init+0x8>
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	9c 83       	std	Y+4, r25	; 0x04
    33fa:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    33fc:	1a 82       	std	Y+2, r1	; 0x02
    33fe:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3400:	eb e2       	ldi	r30, 0x2B	; 43
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3408:	ea e2       	ldi	r30, 0x2A	; 42
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	88 e1       	ldi	r24, 0x18	; 24
    340e:	80 83       	st	Z, r24
	 * UMSEL   = 0 Asynchronous Operation
	 * make the parity configurable
	 * make the stop bit configurable
	 * make the data bit configurable
	 */
	UCSRC = (1<<URSEL) ;
    3410:	e0 e4       	ldi	r30, 0x40	; 64
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 e8       	ldi	r24, 0x80	; 128
    3416:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) |( (config_ptr->parity) << 4);
    3418:	a0 e4       	ldi	r26, 0x40	; 64
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	e0 e4       	ldi	r30, 0x40	; 64
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	80 81       	ld	r24, Z
    3422:	28 2f       	mov	r18, r24
    3424:	2f 7c       	andi	r18, 0xCF	; 207
    3426:	eb 81       	ldd	r30, Y+3	; 0x03
    3428:	fc 81       	ldd	r31, Y+4	; 0x04
    342a:	81 81       	ldd	r24, Z+1	; 0x01
    342c:	88 2f       	mov	r24, r24
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	82 95       	swap	r24
    3432:	92 95       	swap	r25
    3434:	90 7f       	andi	r25, 0xF0	; 240
    3436:	98 27       	eor	r25, r24
    3438:	80 7f       	andi	r24, 0xF0	; 240
    343a:	98 27       	eor	r25, r24
    343c:	82 2b       	or	r24, r18
    343e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) |( (config_ptr->stop_bit) << 3);
    3440:	a0 e4       	ldi	r26, 0x40	; 64
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	e0 e4       	ldi	r30, 0x40	; 64
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	80 81       	ld	r24, Z
    344a:	28 2f       	mov	r18, r24
    344c:	27 7f       	andi	r18, 0xF7	; 247
    344e:	eb 81       	ldd	r30, Y+3	; 0x03
    3450:	fc 81       	ldd	r31, Y+4	; 0x04
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	88 2f       	mov	r24, r24
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	88 0f       	add	r24, r24
    3462:	99 1f       	adc	r25, r25
    3464:	82 2b       	or	r24, r18
    3466:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) |( (config_ptr->bit_data) << 1);
    3468:	a0 e4       	ldi	r26, 0x40	; 64
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	e0 e4       	ldi	r30, 0x40	; 64
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	80 81       	ld	r24, Z
    3472:	28 2f       	mov	r18, r24
    3474:	29 7f       	andi	r18, 0xF9	; 249
    3476:	eb 81       	ldd	r30, Y+3	; 0x03
    3478:	fc 81       	ldd	r31, Y+4	; 0x04
    347a:	80 81       	ld	r24, Z
    347c:	88 2f       	mov	r24, r24
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	82 2b       	or	r24, r18
    3486:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((config_ptr->baud_rate) * 8UL))) - 1);
    3488:	eb 81       	ldd	r30, Y+3	; 0x03
    348a:	fc 81       	ldd	r31, Y+4	; 0x04
    348c:	83 81       	ldd	r24, Z+3	; 0x03
    348e:	94 81       	ldd	r25, Z+4	; 0x04
    3490:	a5 81       	ldd	r26, Z+5	; 0x05
    3492:	b6 81       	ldd	r27, Z+6	; 0x06
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	aa 1f       	adc	r26, r26
    349a:	bb 1f       	adc	r27, r27
    349c:	88 0f       	add	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	aa 1f       	adc	r26, r26
    34a2:	bb 1f       	adc	r27, r27
    34a4:	88 0f       	add	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	aa 1f       	adc	r26, r26
    34aa:	bb 1f       	adc	r27, r27
    34ac:	9c 01       	movw	r18, r24
    34ae:	ad 01       	movw	r20, r26
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	92 e1       	ldi	r25, 0x12	; 18
    34b4:	aa e7       	ldi	r26, 0x7A	; 122
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	0e 94 09 1b 	call	0x3612	; 0x3612 <__udivmodsi4>
    34c0:	da 01       	movw	r26, r20
    34c2:	c9 01       	movw	r24, r18
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	9a 83       	std	Y+2, r25	; 0x02
    34c8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    34ca:	e0 e4       	ldi	r30, 0x40	; 64
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	9a 81       	ldd	r25, Y+2	; 0x02
    34d2:	89 2f       	mov	r24, r25
    34d4:	99 27       	eor	r25, r25
    34d6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    34d8:	e9 e2       	ldi	r30, 0x29	; 41
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	80 83       	st	Z, r24
}
    34e0:	0f 90       	pop	r0
    34e2:	0f 90       	pop	r0
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	08 95       	ret

000034ee <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	0f 92       	push	r0
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
    34f8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    34fa:	eb e2       	ldi	r30, 0x2B	; 43
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	80 81       	ld	r24, Z
    3500:	88 2f       	mov	r24, r24
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	80 72       	andi	r24, 0x20	; 32
    3506:	90 70       	andi	r25, 0x00	; 0
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	b9 f3       	breq	.-18     	; 0x34fa <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    350c:	ec e2       	ldi	r30, 0x2C	; 44
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3514:	0f 90       	pop	r0
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3524:	eb e2       	ldi	r30, 0x2B	; 43
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	88 23       	and	r24, r24
    352c:	dc f7       	brge	.-10     	; 0x3524 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    352e:	ec e2       	ldi	r30, 0x2C	; 44
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
}
    3534:	cf 91       	pop	r28
    3536:	df 91       	pop	r29
    3538:	08 95       	ret

0000353a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    353a:	df 93       	push	r29
    353c:	cf 93       	push	r28
    353e:	00 d0       	rcall	.+0      	; 0x3540 <UART_sendString+0x6>
    3540:	0f 92       	push	r0
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	9b 83       	std	Y+3, r25	; 0x03
    3548:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    354a:	19 82       	std	Y+1, r1	; 0x01
    354c:	0e c0       	rjmp	.+28     	; 0x356a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	28 2f       	mov	r18, r24
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	9b 81       	ldd	r25, Y+3	; 0x03
    3558:	fc 01       	movw	r30, r24
    355a:	e2 0f       	add	r30, r18
    355c:	f3 1f       	adc	r31, r19
    355e:	80 81       	ld	r24, Z
    3560:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_sendByte>
		i++;
    3564:	89 81       	ldd	r24, Y+1	; 0x01
    3566:	8f 5f       	subi	r24, 0xFF	; 255
    3568:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	28 2f       	mov	r18, r24
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	9b 81       	ldd	r25, Y+3	; 0x03
    3574:	fc 01       	movw	r30, r24
    3576:	e2 0f       	add	r30, r18
    3578:	f3 1f       	adc	r31, r19
    357a:	80 81       	ld	r24, Z
    357c:	88 23       	and	r24, r24
    357e:	39 f7       	brne	.-50     	; 0x354e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    358c:	0f 93       	push	r16
    358e:	1f 93       	push	r17
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	00 d0       	rcall	.+0      	; 0x3596 <UART_receiveString+0xa>
    3596:	0f 92       	push	r0
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	9b 83       	std	Y+3, r25	; 0x03
    359e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35a0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    35a2:	89 81       	ldd	r24, Y+1	; 0x01
    35a4:	28 2f       	mov	r18, r24
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	9b 81       	ldd	r25, Y+3	; 0x03
    35ac:	8c 01       	movw	r16, r24
    35ae:	02 0f       	add	r16, r18
    35b0:	13 1f       	adc	r17, r19
    35b2:	0e 94 8e 1a 	call	0x351c	; 0x351c <UART_recieveByte>
    35b6:	f8 01       	movw	r30, r16
    35b8:	80 83       	st	Z, r24
    35ba:	0f c0       	rjmp	.+30     	; 0x35da <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	8f 5f       	subi	r24, 0xFF	; 255
    35c0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	28 2f       	mov	r18, r24
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	9b 81       	ldd	r25, Y+3	; 0x03
    35cc:	8c 01       	movw	r16, r24
    35ce:	02 0f       	add	r16, r18
    35d0:	13 1f       	adc	r17, r19
    35d2:	0e 94 8e 1a 	call	0x351c	; 0x351c <UART_recieveByte>
    35d6:	f8 01       	movw	r30, r16
    35d8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    35da:	89 81       	ldd	r24, Y+1	; 0x01
    35dc:	28 2f       	mov	r18, r24
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	8a 81       	ldd	r24, Y+2	; 0x02
    35e2:	9b 81       	ldd	r25, Y+3	; 0x03
    35e4:	fc 01       	movw	r30, r24
    35e6:	e2 0f       	add	r30, r18
    35e8:	f3 1f       	adc	r31, r19
    35ea:	80 81       	ld	r24, Z
    35ec:	83 32       	cpi	r24, 0x23	; 35
    35ee:	31 f7       	brne	.-52     	; 0x35bc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	28 2f       	mov	r18, r24
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	9b 81       	ldd	r25, Y+3	; 0x03
    35fa:	fc 01       	movw	r30, r24
    35fc:	e2 0f       	add	r30, r18
    35fe:	f3 1f       	adc	r31, r19
    3600:	10 82       	st	Z, r1
}
    3602:	0f 90       	pop	r0
    3604:	0f 90       	pop	r0
    3606:	0f 90       	pop	r0
    3608:	cf 91       	pop	r28
    360a:	df 91       	pop	r29
    360c:	1f 91       	pop	r17
    360e:	0f 91       	pop	r16
    3610:	08 95       	ret

00003612 <__udivmodsi4>:
    3612:	a1 e2       	ldi	r26, 0x21	; 33
    3614:	1a 2e       	mov	r1, r26
    3616:	aa 1b       	sub	r26, r26
    3618:	bb 1b       	sub	r27, r27
    361a:	fd 01       	movw	r30, r26
    361c:	0d c0       	rjmp	.+26     	; 0x3638 <__udivmodsi4_ep>

0000361e <__udivmodsi4_loop>:
    361e:	aa 1f       	adc	r26, r26
    3620:	bb 1f       	adc	r27, r27
    3622:	ee 1f       	adc	r30, r30
    3624:	ff 1f       	adc	r31, r31
    3626:	a2 17       	cp	r26, r18
    3628:	b3 07       	cpc	r27, r19
    362a:	e4 07       	cpc	r30, r20
    362c:	f5 07       	cpc	r31, r21
    362e:	20 f0       	brcs	.+8      	; 0x3638 <__udivmodsi4_ep>
    3630:	a2 1b       	sub	r26, r18
    3632:	b3 0b       	sbc	r27, r19
    3634:	e4 0b       	sbc	r30, r20
    3636:	f5 0b       	sbc	r31, r21

00003638 <__udivmodsi4_ep>:
    3638:	66 1f       	adc	r22, r22
    363a:	77 1f       	adc	r23, r23
    363c:	88 1f       	adc	r24, r24
    363e:	99 1f       	adc	r25, r25
    3640:	1a 94       	dec	r1
    3642:	69 f7       	brne	.-38     	; 0x361e <__udivmodsi4_loop>
    3644:	60 95       	com	r22
    3646:	70 95       	com	r23
    3648:	80 95       	com	r24
    364a:	90 95       	com	r25
    364c:	9b 01       	movw	r18, r22
    364e:	ac 01       	movw	r20, r24
    3650:	bd 01       	movw	r22, r26
    3652:	cf 01       	movw	r24, r30
    3654:	08 95       	ret

00003656 <__prologue_saves__>:
    3656:	2f 92       	push	r2
    3658:	3f 92       	push	r3
    365a:	4f 92       	push	r4
    365c:	5f 92       	push	r5
    365e:	6f 92       	push	r6
    3660:	7f 92       	push	r7
    3662:	8f 92       	push	r8
    3664:	9f 92       	push	r9
    3666:	af 92       	push	r10
    3668:	bf 92       	push	r11
    366a:	cf 92       	push	r12
    366c:	df 92       	push	r13
    366e:	ef 92       	push	r14
    3670:	ff 92       	push	r15
    3672:	0f 93       	push	r16
    3674:	1f 93       	push	r17
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62
    367e:	ca 1b       	sub	r28, r26
    3680:	db 0b       	sbc	r29, r27
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	09 94       	ijmp

0000368e <__epilogue_restores__>:
    368e:	2a 88       	ldd	r2, Y+18	; 0x12
    3690:	39 88       	ldd	r3, Y+17	; 0x11
    3692:	48 88       	ldd	r4, Y+16	; 0x10
    3694:	5f 84       	ldd	r5, Y+15	; 0x0f
    3696:	6e 84       	ldd	r6, Y+14	; 0x0e
    3698:	7d 84       	ldd	r7, Y+13	; 0x0d
    369a:	8c 84       	ldd	r8, Y+12	; 0x0c
    369c:	9b 84       	ldd	r9, Y+11	; 0x0b
    369e:	aa 84       	ldd	r10, Y+10	; 0x0a
    36a0:	b9 84       	ldd	r11, Y+9	; 0x09
    36a2:	c8 84       	ldd	r12, Y+8	; 0x08
    36a4:	df 80       	ldd	r13, Y+7	; 0x07
    36a6:	ee 80       	ldd	r14, Y+6	; 0x06
    36a8:	fd 80       	ldd	r15, Y+5	; 0x05
    36aa:	0c 81       	ldd	r16, Y+4	; 0x04
    36ac:	1b 81       	ldd	r17, Y+3	; 0x03
    36ae:	aa 81       	ldd	r26, Y+2	; 0x02
    36b0:	b9 81       	ldd	r27, Y+1	; 0x01
    36b2:	ce 0f       	add	r28, r30
    36b4:	d1 1d       	adc	r29, r1
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	ed 01       	movw	r28, r26
    36c2:	08 95       	ret

000036c4 <itoa>:
    36c4:	fb 01       	movw	r30, r22
    36c6:	9f 01       	movw	r18, r30
    36c8:	e8 94       	clt
    36ca:	42 30       	cpi	r20, 0x02	; 2
    36cc:	c4 f0       	brlt	.+48     	; 0x36fe <itoa+0x3a>
    36ce:	45 32       	cpi	r20, 0x25	; 37
    36d0:	b4 f4       	brge	.+44     	; 0x36fe <itoa+0x3a>
    36d2:	4a 30       	cpi	r20, 0x0A	; 10
    36d4:	29 f4       	brne	.+10     	; 0x36e0 <itoa+0x1c>
    36d6:	97 fb       	bst	r25, 7
    36d8:	1e f4       	brtc	.+6      	; 0x36e0 <itoa+0x1c>
    36da:	90 95       	com	r25
    36dc:	81 95       	neg	r24
    36de:	9f 4f       	sbci	r25, 0xFF	; 255
    36e0:	64 2f       	mov	r22, r20
    36e2:	77 27       	eor	r23, r23
    36e4:	0e 94 93 1b 	call	0x3726	; 0x3726 <__udivmodhi4>
    36e8:	80 5d       	subi	r24, 0xD0	; 208
    36ea:	8a 33       	cpi	r24, 0x3A	; 58
    36ec:	0c f0       	brlt	.+2      	; 0x36f0 <itoa+0x2c>
    36ee:	89 5d       	subi	r24, 0xD9	; 217
    36f0:	81 93       	st	Z+, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	a1 f7       	brne	.-24     	; 0x36e0 <itoa+0x1c>
    36f8:	16 f4       	brtc	.+4      	; 0x36fe <itoa+0x3a>
    36fa:	5d e2       	ldi	r21, 0x2D	; 45
    36fc:	51 93       	st	Z+, r21
    36fe:	10 82       	st	Z, r1
    3700:	c9 01       	movw	r24, r18
    3702:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <strrev>

00003706 <strrev>:
    3706:	dc 01       	movw	r26, r24
    3708:	fc 01       	movw	r30, r24
    370a:	67 2f       	mov	r22, r23
    370c:	71 91       	ld	r23, Z+
    370e:	77 23       	and	r23, r23
    3710:	e1 f7       	brne	.-8      	; 0x370a <strrev+0x4>
    3712:	32 97       	sbiw	r30, 0x02	; 2
    3714:	04 c0       	rjmp	.+8      	; 0x371e <strrev+0x18>
    3716:	7c 91       	ld	r23, X
    3718:	6d 93       	st	X+, r22
    371a:	70 83       	st	Z, r23
    371c:	62 91       	ld	r22, -Z
    371e:	ae 17       	cp	r26, r30
    3720:	bf 07       	cpc	r27, r31
    3722:	c8 f3       	brcs	.-14     	; 0x3716 <strrev+0x10>
    3724:	08 95       	ret

00003726 <__udivmodhi4>:
    3726:	aa 1b       	sub	r26, r26
    3728:	bb 1b       	sub	r27, r27
    372a:	51 e1       	ldi	r21, 0x11	; 17
    372c:	07 c0       	rjmp	.+14     	; 0x373c <__udivmodhi4_ep>

0000372e <__udivmodhi4_loop>:
    372e:	aa 1f       	adc	r26, r26
    3730:	bb 1f       	adc	r27, r27
    3732:	a6 17       	cp	r26, r22
    3734:	b7 07       	cpc	r27, r23
    3736:	10 f0       	brcs	.+4      	; 0x373c <__udivmodhi4_ep>
    3738:	a6 1b       	sub	r26, r22
    373a:	b7 0b       	sbc	r27, r23

0000373c <__udivmodhi4_ep>:
    373c:	88 1f       	adc	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	5a 95       	dec	r21
    3742:	a9 f7       	brne	.-22     	; 0x372e <__udivmodhi4_loop>
    3744:	80 95       	com	r24
    3746:	90 95       	com	r25
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	08 95       	ret

0000374e <_exit>:
    374e:	f8 94       	cli

00003750 <__stop_program>:
    3750:	ff cf       	rjmp	.-2      	; 0x3750 <__stop_program>
